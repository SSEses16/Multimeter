
Multimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f78  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001920  0800a118  0800a118  0001a118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba38  0800ba38  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba38  0800ba38  0001ba38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba40  0800ba40  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba40  0800ba40  0001ba40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba44  0800ba44  0001ba44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ba48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009ec  200001e8  0800bc30  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bd4  0800bc30  00020bd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010a29  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b50  00000000  00000000  00030c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  000337d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cbf  00000000  00000000  00034850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019551  00000000  00000000  0003550f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014843  00000000  00000000  0004ea60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c40f  00000000  00000000  000632a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a20  00000000  00000000  000ff6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001050d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a100 	.word	0x0800a100

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a100 	.word	0x0800a100

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001006:	463b      	mov	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <MX_ADC1_Init+0xbc>)
 8001014:	4a2a      	ldr	r2, [pc, #168]	; (80010c0 <MX_ADC1_Init+0xc0>)
 8001016:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <MX_ADC1_Init+0xbc>)
 800101a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800101e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001020:	4b26      	ldr	r3, [pc, #152]	; (80010bc <MX_ADC1_Init+0xbc>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001026:	4b25      	ldr	r3, [pc, #148]	; (80010bc <MX_ADC1_Init+0xbc>)
 8001028:	2201      	movs	r2, #1
 800102a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <MX_ADC1_Init+0xbc>)
 800102e:	2200      	movs	r2, #0
 8001030:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8001032:	4b22      	ldr	r3, [pc, #136]	; (80010bc <MX_ADC1_Init+0xbc>)
 8001034:	2201      	movs	r2, #1
 8001036:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800103a:	4b20      	ldr	r3, [pc, #128]	; (80010bc <MX_ADC1_Init+0xbc>)
 800103c:	2201      	movs	r2, #1
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <MX_ADC1_Init+0xbc>)
 8001042:	2200      	movs	r2, #0
 8001044:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <MX_ADC1_Init+0xbc>)
 8001048:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <MX_ADC1_Init+0xc4>)
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800104c:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_ADC1_Init+0xbc>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <MX_ADC1_Init+0xbc>)
 8001054:	2202      	movs	r2, #2
 8001056:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <MX_ADC1_Init+0xbc>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_ADC1_Init+0xbc>)
 8001062:	2201      	movs	r2, #1
 8001064:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001066:	4815      	ldr	r0, [pc, #84]	; (80010bc <MX_ADC1_Init+0xbc>)
 8001068:	f001 feb4 	bl	8002dd4 <HAL_ADC_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8001072:	f001 f833 	bl	80020dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001076:	2301      	movs	r3, #1
 8001078:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800107a:	2301      	movs	r3, #1
 800107c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001082:	463b      	mov	r3, r7
 8001084:	4619      	mov	r1, r3
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <MX_ADC1_Init+0xbc>)
 8001088:	f002 f8d8 	bl	800323c <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001092:	f001 f823 	bl	80020dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001096:	2302      	movs	r3, #2
 8001098:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800109a:	2302      	movs	r3, #2
 800109c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109e:	463b      	mov	r3, r7
 80010a0:	4619      	mov	r1, r3
 80010a2:	4806      	ldr	r0, [pc, #24]	; (80010bc <MX_ADC1_Init+0xbc>)
 80010a4:	f002 f8ca 	bl	800323c <HAL_ADC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010ae:	f001 f815 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000204 	.word	0x20000204
 80010c0:	40012000 	.word	0x40012000
 80010c4:	0f000001 	.word	0x0f000001

080010c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <HAL_ADC_MspInit+0x8c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d12f      	bne.n	800114a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_ADC_MspInit+0x90>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a19      	ldr	r2, [pc, #100]	; (8001158 <HAL_ADC_MspInit+0x90>)
 80010f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <HAL_ADC_MspInit+0x90>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_ADC_MspInit+0x90>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <HAL_ADC_MspInit+0x90>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <HAL_ADC_MspInit+0x90>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = VOLTAGE_INPUT_Pin|RESISTANCE_INPUT_Pin;
 8001122:	2306      	movs	r3, #6
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4809      	ldr	r0, [pc, #36]	; (800115c <HAL_ADC_MspInit+0x94>)
 8001136:	f002 fbbb 	bl	80038b0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2102      	movs	r1, #2
 800113e:	2012      	movs	r0, #18
 8001140:	f002 fb7f 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001144:	2012      	movs	r0, #18
 8001146:	f002 fb98 	bl	800387a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800114a:	bf00      	nop
 800114c:	3728      	adds	r7, #40	; 0x28
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40012000 	.word	0x40012000
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000

08001160 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b3c      	ldr	r3, [pc, #240]	; (800126c <MX_GPIO_Init+0x10c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a3b      	ldr	r2, [pc, #236]	; (800126c <MX_GPIO_Init+0x10c>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b39      	ldr	r3, [pc, #228]	; (800126c <MX_GPIO_Init+0x10c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b35      	ldr	r3, [pc, #212]	; (800126c <MX_GPIO_Init+0x10c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a34      	ldr	r2, [pc, #208]	; (800126c <MX_GPIO_Init+0x10c>)
 800119c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b32      	ldr	r3, [pc, #200]	; (800126c <MX_GPIO_Init+0x10c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <MX_GPIO_Init+0x10c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a2d      	ldr	r2, [pc, #180]	; (800126c <MX_GPIO_Init+0x10c>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b2b      	ldr	r3, [pc, #172]	; (800126c <MX_GPIO_Init+0x10c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b27      	ldr	r3, [pc, #156]	; (800126c <MX_GPIO_Init+0x10c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a26      	ldr	r2, [pc, #152]	; (800126c <MX_GPIO_Init+0x10c>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b24      	ldr	r3, [pc, #144]	; (800126c <MX_GPIO_Init+0x10c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AC_VOLTAGE_MODE_Pin|DC_VOLTAGE_MODE_RANGE_1_Pin|DC_VOLTAGE_MODE_RANGE_2_Pin|DC_VOLTAGE_MODE_RANGE_3_Pin
 80011e6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80011ea:	617b      	str	r3, [r7, #20]
                          |RESISTANCE_MODE_RANGE_1_Pin|RESISTANCE_MODE_RANGE_2_Pin|RESISTANCE_MODE_RANGE_3_Pin|CAPACITY_MODE_RANGE_1_Pin
                          |CAPACITY_MODE_RANGE_2_Pin|CAPACITY_MODE_RANGE_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	481c      	ldr	r0, [pc, #112]	; (8001270 <MX_GPIO_Init+0x110>)
 80011fe:	f002 fb57 	bl	80038b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2006      	movs	r0, #6
 8001208:	f002 fb1b 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800120c:	2006      	movs	r0, #6
 800120e:	f002 fb34 	bl	800387a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2007      	movs	r0, #7
 8001218:	f002 fb13 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800121c:	2007      	movs	r0, #7
 800121e:	f002 fb2c 	bl	800387a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2008      	movs	r0, #8
 8001228:	f002 fb0b 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800122c:	2008      	movs	r0, #8
 800122e:	f002 fb24 	bl	800387a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2009      	movs	r0, #9
 8001238:	f002 fb03 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800123c:	2009      	movs	r0, #9
 800123e:	f002 fb1c 	bl	800387a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	200a      	movs	r0, #10
 8001248:	f002 fafb 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800124c:	200a      	movs	r0, #10
 800124e:	f002 fb14 	bl	800387a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2100      	movs	r1, #0
 8001256:	2017      	movs	r0, #23
 8001258:	f002 faf3 	bl	8003842 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800125c:	2017      	movs	r0, #23
 800125e:	f002 fb0c 	bl	800387a <HAL_NVIC_EnableIRQ>

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40020800 	.word	0x40020800

08001274 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_I2C1_Init+0x50>)
 800127a:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <MX_I2C1_Init+0x54>)
 800127c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_I2C1_Init+0x50>)
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <MX_I2C1_Init+0x58>)
 8001282:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_I2C1_Init+0x50>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_I2C1_Init+0x50>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_I2C1_Init+0x50>)
 8001292:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001296:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <MX_I2C1_Init+0x50>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_I2C1_Init+0x50>)
 80012b2:	f002 fc99 	bl	8003be8 <HAL_I2C_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012bc:	f000 ff0e 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000024c 	.word	0x2000024c
 80012c8:	40005400 	.word	0x40005400
 80012cc:	000186a0 	.word	0x000186a0

080012d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a19      	ldr	r2, [pc, #100]	; (8001354 <HAL_I2C_MspInit+0x84>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d12b      	bne.n	800134a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <HAL_I2C_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a17      	ldr	r2, [pc, #92]	; (8001358 <HAL_I2C_MspInit+0x88>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_I2C_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = DISPLAY_I2C_SCL_Pin|DISPLAY_I2C_SDA_Pin;
 800130e:	23c0      	movs	r3, #192	; 0xc0
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001312:	2312      	movs	r3, #18
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131a:	2303      	movs	r3, #3
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800131e:	2304      	movs	r3, #4
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <HAL_I2C_MspInit+0x8c>)
 800132a:	f002 fac1 	bl	80038b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_I2C_MspInit+0x88>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_I2C_MspInit+0x88>)
 8001338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_I2C_MspInit+0x88>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40005400 	.word	0x40005400
 8001358:	40023800 	.word	0x40023800
 800135c:	40020400 	.word	0x40020400

08001360 <HAL_GPIO_EXTI_Callback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001370:	d07d      	beq.n	800146e <HAL_GPIO_EXTI_Callback+0x10e>
 8001372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001376:	dc7e      	bgt.n	8001476 <HAL_GPIO_EXTI_Callback+0x116>
 8001378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800137c:	d073      	beq.n	8001466 <HAL_GPIO_EXTI_Callback+0x106>
 800137e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001382:	dc78      	bgt.n	8001476 <HAL_GPIO_EXTI_Callback+0x116>
 8001384:	2b80      	cmp	r3, #128	; 0x80
 8001386:	d06a      	beq.n	800145e <HAL_GPIO_EXTI_Callback+0xfe>
 8001388:	2b80      	cmp	r3, #128	; 0x80
 800138a:	dc74      	bgt.n	8001476 <HAL_GPIO_EXTI_Callback+0x116>
 800138c:	2b20      	cmp	r3, #32
 800138e:	dc47      	bgt.n	8001420 <HAL_GPIO_EXTI_Callback+0xc0>
 8001390:	2b00      	cmp	r3, #0
 8001392:	dd70      	ble.n	8001476 <HAL_GPIO_EXTI_Callback+0x116>
 8001394:	3b01      	subs	r3, #1
 8001396:	2b1f      	cmp	r3, #31
 8001398:	d86d      	bhi.n	8001476 <HAL_GPIO_EXTI_Callback+0x116>
 800139a:	a201      	add	r2, pc, #4	; (adr r2, 80013a0 <HAL_GPIO_EXTI_Callback+0x40>)
 800139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a0:	08001427 	.word	0x08001427
 80013a4:	0800142f 	.word	0x0800142f
 80013a8:	08001477 	.word	0x08001477
 80013ac:	08001437 	.word	0x08001437
 80013b0:	08001477 	.word	0x08001477
 80013b4:	08001477 	.word	0x08001477
 80013b8:	08001477 	.word	0x08001477
 80013bc:	0800143f 	.word	0x0800143f
 80013c0:	08001477 	.word	0x08001477
 80013c4:	08001477 	.word	0x08001477
 80013c8:	08001477 	.word	0x08001477
 80013cc:	08001477 	.word	0x08001477
 80013d0:	08001477 	.word	0x08001477
 80013d4:	08001477 	.word	0x08001477
 80013d8:	08001477 	.word	0x08001477
 80013dc:	08001447 	.word	0x08001447
 80013e0:	08001477 	.word	0x08001477
 80013e4:	08001477 	.word	0x08001477
 80013e8:	08001477 	.word	0x08001477
 80013ec:	08001477 	.word	0x08001477
 80013f0:	08001477 	.word	0x08001477
 80013f4:	08001477 	.word	0x08001477
 80013f8:	08001477 	.word	0x08001477
 80013fc:	08001477 	.word	0x08001477
 8001400:	08001477 	.word	0x08001477
 8001404:	08001477 	.word	0x08001477
 8001408:	08001477 	.word	0x08001477
 800140c:	08001477 	.word	0x08001477
 8001410:	08001477 	.word	0x08001477
 8001414:	08001477 	.word	0x08001477
 8001418:	08001477 	.word	0x08001477
 800141c:	0800144f 	.word	0x0800144f
 8001420:	2b40      	cmp	r3, #64	; 0x40
 8001422:	d018      	beq.n	8001456 <HAL_GPIO_EXTI_Callback+0xf6>
 8001424:	e027      	b.n	8001476 <HAL_GPIO_EXTI_Callback+0x116>
		case AC_VOLTAGE_MODE_Pin:
			mode = AC_VOLTAGE_MODE;
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HAL_GPIO_EXTI_Callback+0x128>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
			break;
 800142c:	e025      	b.n	800147a <HAL_GPIO_EXTI_Callback+0x11a>
		case DC_VOLTAGE_MODE_RANGE_1_Pin:
			mode = DC_VOLTAGE_MODE_RANGE_1;
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_GPIO_EXTI_Callback+0x128>)
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
			break;
 8001434:	e021      	b.n	800147a <HAL_GPIO_EXTI_Callback+0x11a>
		case DC_VOLTAGE_MODE_RANGE_2_Pin:
			mode = DC_VOLTAGE_MODE_RANGE_2;
 8001436:	4b14      	ldr	r3, [pc, #80]	; (8001488 <HAL_GPIO_EXTI_Callback+0x128>)
 8001438:	2202      	movs	r2, #2
 800143a:	701a      	strb	r2, [r3, #0]
			break;
 800143c:	e01d      	b.n	800147a <HAL_GPIO_EXTI_Callback+0x11a>
		case DC_VOLTAGE_MODE_RANGE_3_Pin:
			mode = DC_VOLTAGE_MODE_RANGE_3;
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_GPIO_EXTI_Callback+0x128>)
 8001440:	2203      	movs	r2, #3
 8001442:	701a      	strb	r2, [r3, #0]
			break;
 8001444:	e019      	b.n	800147a <HAL_GPIO_EXTI_Callback+0x11a>
		case RESISTANCE_MODE_RANGE_1_Pin:
			mode = RESISTANCE_MODE_RANGE_1;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_GPIO_EXTI_Callback+0x128>)
 8001448:	2204      	movs	r2, #4
 800144a:	701a      	strb	r2, [r3, #0]
			break;
 800144c:	e015      	b.n	800147a <HAL_GPIO_EXTI_Callback+0x11a>
		case RESISTANCE_MODE_RANGE_2_Pin:
			mode = RESISTANCE_MODE_RANGE_2;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_GPIO_EXTI_Callback+0x128>)
 8001450:	2205      	movs	r2, #5
 8001452:	701a      	strb	r2, [r3, #0]
			break;
 8001454:	e011      	b.n	800147a <HAL_GPIO_EXTI_Callback+0x11a>
		case RESISTANCE_MODE_RANGE_3_Pin:
			mode = RESISTANCE_MODE_RANGE_3;
 8001456:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <HAL_GPIO_EXTI_Callback+0x128>)
 8001458:	2206      	movs	r2, #6
 800145a:	701a      	strb	r2, [r3, #0]
			break;
 800145c:	e00d      	b.n	800147a <HAL_GPIO_EXTI_Callback+0x11a>
		case CAPACITY_MODE_RANGE_1_Pin:
			mode = CAPACITY_MODE_RANGE_1;
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_GPIO_EXTI_Callback+0x128>)
 8001460:	2207      	movs	r2, #7
 8001462:	701a      	strb	r2, [r3, #0]
			break;
 8001464:	e009      	b.n	800147a <HAL_GPIO_EXTI_Callback+0x11a>
		case CAPACITY_MODE_RANGE_2_Pin:
			mode = CAPACITY_MODE_RANGE_2;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_GPIO_EXTI_Callback+0x128>)
 8001468:	2208      	movs	r2, #8
 800146a:	701a      	strb	r2, [r3, #0]
			break;
 800146c:	e005      	b.n	800147a <HAL_GPIO_EXTI_Callback+0x11a>
		case CAPACITY_MODE_RANGE_3_Pin:
			mode = CAPACITY_MODE_RANGE_3;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_GPIO_EXTI_Callback+0x128>)
 8001470:	2209      	movs	r2, #9
 8001472:	701a      	strb	r2, [r3, #0]
			break;
 8001474:	e001      	b.n	800147a <HAL_GPIO_EXTI_Callback+0x11a>
		default:
			Error_Handler();
 8001476:	f000 fe31 	bl	80020dc <Error_Handler>
	}
	mode_chosen = true;
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <HAL_GPIO_EXTI_Callback+0x12c>)
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000000 	.word	0x20000000
 800148c:	20000002 	.word	0x20000002

08001490 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a37      	ldr	r2, [pc, #220]	; (8001578 <HAL_ADC_ConvCpltCallback+0xe8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d165      	bne.n	800156c <HAL_ADC_ConvCpltCallback+0xdc>
		if (channel == VOLTAGE_CHANNEL) {
 80014a0:	4b36      	ldr	r3, [pc, #216]	; (800157c <HAL_ADC_ConvCpltCallback+0xec>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d11d      	bne.n	80014e4 <HAL_ADC_ConvCpltCallback+0x54>
			if (i != 100) {
 80014a8:	4b35      	ldr	r3, [pc, #212]	; (8001580 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b64      	cmp	r3, #100	; 0x64
 80014ae:	d012      	beq.n	80014d6 <HAL_ADC_ConvCpltCallback+0x46>
				adc_V_buf[i] = HAL_ADC_GetValue(hadc);
 80014b0:	4b33      	ldr	r3, [pc, #204]	; (8001580 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461c      	mov	r4, r3
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f001 fe9e 	bl	80031f8 <HAL_ADC_GetValue>
 80014bc:	4603      	mov	r3, r0
 80014be:	4a31      	ldr	r2, [pc, #196]	; (8001584 <HAL_ADC_ConvCpltCallback+0xf4>)
 80014c0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				i++;
 80014c4:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <HAL_ADC_ConvCpltCallback+0xf0>)
 80014ce:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Start_IT(&hadc1);
 80014d0:	4829      	ldr	r0, [pc, #164]	; (8001578 <HAL_ADC_ConvCpltCallback+0xe8>)
 80014d2:	f001 fcc3 	bl	8002e5c <HAL_ADC_Start_IT>
			}
			channel++;
 80014d6:	4b29      	ldr	r3, [pc, #164]	; (800157c <HAL_ADC_ConvCpltCallback+0xec>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <HAL_ADC_ConvCpltCallback+0xec>)
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	e020      	b.n	8001526 <HAL_ADC_ConvCpltCallback+0x96>
		}
		else if (channel == RESISTANCE_CHANNEL){
 80014e4:	4b25      	ldr	r3, [pc, #148]	; (800157c <HAL_ADC_ConvCpltCallback+0xec>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d11c      	bne.n	8001526 <HAL_ADC_ConvCpltCallback+0x96>
			if (q != 100) {
 80014ec:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b64      	cmp	r3, #100	; 0x64
 80014f2:	d012      	beq.n	800151a <HAL_ADC_ConvCpltCallback+0x8a>
				adc_R_buf[q] = HAL_ADC_GetValue(hadc);
 80014f4:	4b24      	ldr	r3, [pc, #144]	; (8001588 <HAL_ADC_ConvCpltCallback+0xf8>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461c      	mov	r4, r3
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f001 fe7c 	bl	80031f8 <HAL_ADC_GetValue>
 8001500:	4603      	mov	r3, r0
 8001502:	4a22      	ldr	r2, [pc, #136]	; (800158c <HAL_ADC_ConvCpltCallback+0xfc>)
 8001504:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
				q++;
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_ADC_ConvCpltCallback+0xf8>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001512:	701a      	strb	r2, [r3, #0]
				HAL_ADC_Start_IT(&hadc1);
 8001514:	4818      	ldr	r0, [pc, #96]	; (8001578 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001516:	f001 fca1 	bl	8002e5c <HAL_ADC_Start_IT>
			}
			channel--;
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_ADC_ConvCpltCallback+0xec>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	3b01      	subs	r3, #1
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_ADC_ConvCpltCallback+0xec>)
 8001524:	701a      	strb	r2, [r3, #0]
		}

		if ((q == 100) && (i == 100)) {
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d120      	bne.n	8001570 <HAL_ADC_ConvCpltCallback+0xe0>
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d11c      	bne.n	8001570 <HAL_ADC_ConvCpltCallback+0xe0>
			adc_ready = true;
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_ADC_ConvCpltCallback+0x100>)
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
			q = 0;
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_ADC_ConvCpltCallback+0xf8>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
			i = 0;
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
			if (change) {
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_ADC_ConvCpltCallback+0x104>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <HAL_ADC_ConvCpltCallback+0xce>
				channel = VOLTAGE_CHANNEL;
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_ADC_ConvCpltCallback+0xec>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
				change = false;
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_ADC_ConvCpltCallback+0x104>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]

	}
	else {
		Error_Handler();
	}
}
 800155c:	e008      	b.n	8001570 <HAL_ADC_ConvCpltCallback+0xe0>
				channel = RESISTANCE_CHANNEL;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <HAL_ADC_ConvCpltCallback+0xec>)
 8001560:	2202      	movs	r2, #2
 8001562:	701a      	strb	r2, [r3, #0]
				change = true;
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_ADC_ConvCpltCallback+0x104>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
}
 800156a:	e001      	b.n	8001570 <HAL_ADC_ConvCpltCallback+0xe0>
		Error_Handler();
 800156c:	f000 fdb6 	bl	80020dc <Error_Handler>
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bd90      	pop	{r4, r7, pc}
 8001578:	20000204 	.word	0x20000204
 800157c:	20000001 	.word	0x20000001
 8001580:	200005d0 	.word	0x200005d0
 8001584:	200002ac 	.word	0x200002ac
 8001588:	200005d1 	.word	0x200005d1
 800158c:	2000043c 	.word	0x2000043c
 8001590:	200005d2 	.word	0x200005d2
 8001594:	200005d4 	.word	0x200005d4

08001598 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	if(htim == &htim1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d10b      	bne.n	80015c0 <HAL_TIM_PeriodElapsedCallback+0x28>
    {
		freq = TIM2->CNT;
 80015a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015b0:	6013      	str	r3, [r2, #0]

		HAL_TIM_Base_Stop_IT(&htim1);
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015b4:	f003 fd04 	bl	8004fc0 <HAL_TIM_Base_Stop_IT>

		tim_ready = true;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
    }
	else {
		Error_Handler();
	}
}
 80015be:	e001      	b.n	80015c4 <HAL_TIM_PeriodElapsedCallback+0x2c>
		Error_Handler();
 80015c0:	f000 fd8c 	bl	80020dc <Error_Handler>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200009f4 	.word	0x200009f4
 80015d0:	200005cc 	.word	0x200005cc
 80015d4:	200005d3 	.word	0x200005d3

080015d8 <voltage_channel_average>:

static float voltage_channel_average(void)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
	uint64_t voltage_tmp = 0;
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	for (uint8_t j = 0; j < 100; j++) {
 80015ea:	2300      	movs	r3, #0
 80015ec:	71fb      	strb	r3, [r7, #7]
 80015ee:	e010      	b.n	8001612 <voltage_channel_average+0x3a>
		voltage_tmp += adc_V_buf[j];
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	4a1d      	ldr	r2, [pc, #116]	; (8001668 <voltage_channel_average+0x90>)
 80015f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f8:	2200      	movs	r2, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	4611      	mov	r1, r2
 80015fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001602:	1814      	adds	r4, r2, r0
 8001604:	eb43 0501 	adc.w	r5, r3, r1
 8001608:	e9c7 4502 	strd	r4, r5, [r7, #8]
	for (uint8_t j = 0; j < 100; j++) {
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	3301      	adds	r3, #1
 8001610:	71fb      	strb	r3, [r7, #7]
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b63      	cmp	r3, #99	; 0x63
 8001616:	d9eb      	bls.n	80015f0 <voltage_channel_average+0x18>
	}

	return (float)((voltage_tmp * 3.3) / (100 * 4095));
 8001618:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800161c:	f7fe ffbe 	bl	800059c <__aeabi_ul2d>
 8001620:	a30d      	add	r3, pc, #52	; (adr r3, 8001658 <voltage_channel_average+0x80>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7fe ffef 	bl	8000608 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	a30b      	add	r3, pc, #44	; (adr r3, 8001660 <voltage_channel_average+0x88>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7ff f910 	bl	800085c <__aeabi_ddiv>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff fad8 	bl	8000bf8 <__aeabi_d2f>
 8001648:	4603      	mov	r3, r0
 800164a:	ee07 3a90 	vmov	s15, r3
}
 800164e:	eeb0 0a67 	vmov.f32	s0, s15
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bdb0      	pop	{r4, r5, r7, pc}
 8001658:	66666666 	.word	0x66666666
 800165c:	400a6666 	.word	0x400a6666
 8001660:	00000000 	.word	0x00000000
 8001664:	4118fe70 	.word	0x4118fe70
 8001668:	200002ac 	.word	0x200002ac
 800166c:	00000000 	.word	0x00000000

08001670 <resistance_channel_average>:

static float resistance_channel_average(void)
{
 8001670:	b5b0      	push	{r4, r5, r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
	uint64_t voltage_tmp = 0;
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	for (uint8_t j = 0; j < 100; j++) {
 8001682:	2300      	movs	r3, #0
 8001684:	71fb      	strb	r3, [r7, #7]
 8001686:	e010      	b.n	80016aa <resistance_channel_average+0x3a>
		voltage_tmp += adc_R_buf[j];
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <resistance_channel_average+0x90>)
 800168c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001690:	2200      	movs	r2, #0
 8001692:	4618      	mov	r0, r3
 8001694:	4611      	mov	r1, r2
 8001696:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800169a:	1814      	adds	r4, r2, r0
 800169c:	eb43 0501 	adc.w	r5, r3, r1
 80016a0:	e9c7 4502 	strd	r4, r5, [r7, #8]
	for (uint8_t j = 0; j < 100; j++) {
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	3301      	adds	r3, #1
 80016a8:	71fb      	strb	r3, [r7, #7]
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b63      	cmp	r3, #99	; 0x63
 80016ae:	d9eb      	bls.n	8001688 <resistance_channel_average+0x18>
	}

	return (float)((voltage_tmp * 3.3) / (100 * 4095));
 80016b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016b4:	f7fe ff72 	bl	800059c <__aeabi_ul2d>
 80016b8:	a30d      	add	r3, pc, #52	; (adr r3, 80016f0 <resistance_channel_average+0x80>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7fe ffa3 	bl	8000608 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	a30b      	add	r3, pc, #44	; (adr r3, 80016f8 <resistance_channel_average+0x88>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7ff f8c4 	bl	800085c <__aeabi_ddiv>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff fa8c 	bl	8000bf8 <__aeabi_d2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	ee07 3a90 	vmov	s15, r3
}
 80016e6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bdb0      	pop	{r4, r5, r7, pc}
 80016f0:	66666666 	.word	0x66666666
 80016f4:	400a6666 	.word	0x400a6666
 80016f8:	00000000 	.word	0x00000000
 80016fc:	4118fe70 	.word	0x4118fe70
 8001700:	2000043c 	.word	0x2000043c
 8001704:	00000000 	.word	0x00000000

08001708 <voltage_max>:

static float voltage_max(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
	uint32_t voltage_tmp = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]

	for (uint8_t j = 0; j < 100; j++) {
 8001712:	2300      	movs	r3, #0
 8001714:	70fb      	strb	r3, [r7, #3]
 8001716:	e00e      	b.n	8001736 <voltage_max+0x2e>
		if (adc_V_buf[j] > voltage_tmp) {
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	4a1d      	ldr	r2, [pc, #116]	; (8001790 <voltage_max+0x88>)
 800171c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	429a      	cmp	r2, r3
 8001724:	d204      	bcs.n	8001730 <voltage_max+0x28>
			voltage_tmp = adc_V_buf[j];
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	4a19      	ldr	r2, [pc, #100]	; (8001790 <voltage_max+0x88>)
 800172a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172e:	607b      	str	r3, [r7, #4]
	for (uint8_t j = 0; j < 100; j++) {
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	3301      	adds	r3, #1
 8001734:	70fb      	strb	r3, [r7, #3]
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	2b63      	cmp	r3, #99	; 0x63
 800173a:	d9ed      	bls.n	8001718 <voltage_max+0x10>
		}
	}

	return (float)(voltage_tmp * 3.3 / 4095);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7fe fee9 	bl	8000514 <__aeabi_ui2d>
 8001742:	a30f      	add	r3, pc, #60	; (adr r3, 8001780 <voltage_max+0x78>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	f7fe ff5e 	bl	8000608 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	a30c      	add	r3, pc, #48	; (adr r3, 8001788 <voltage_max+0x80>)
 8001756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175a:	f7ff f87f 	bl	800085c <__aeabi_ddiv>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff fa47 	bl	8000bf8 <__aeabi_d2f>
 800176a:	4603      	mov	r3, r0
 800176c:	ee07 3a90 	vmov	s15, r3
}
 8001770:	eeb0 0a67 	vmov.f32	s0, s15
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	f3af 8000 	nop.w
 8001780:	66666666 	.word	0x66666666
 8001784:	400a6666 	.word	0x400a6666
 8001788:	00000000 	.word	0x00000000
 800178c:	40affe00 	.word	0x40affe00
 8001790:	200002ac 	.word	0x200002ac

08001794 <default_display_setup>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void default_display_setup(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af02      	add	r7, sp, #8
	  ssd1306_Init();
 800179a:	f000 fcdd 	bl	8002158 <ssd1306_Init>

	  ssd1306_Fill(White);
 800179e:	2001      	movs	r0, #1
 80017a0:	f000 fd44 	bl	800222c <ssd1306_Fill>

	  ssd1306_SetCursor(5,10);
 80017a4:	210a      	movs	r1, #10
 80017a6:	2005      	movs	r0, #5
 80017a8:	f000 fe82 	bl	80024b0 <ssd1306_SetCursor>
	  ssd1306_WriteString("Mode:", Font_7x10, Black);
 80017ac:	4a13      	ldr	r2, [pc, #76]	; (80017fc <default_display_setup+0x68>)
 80017ae:	2300      	movs	r3, #0
 80017b0:	ca06      	ldmia	r2, {r1, r2}
 80017b2:	4813      	ldr	r0, [pc, #76]	; (8001800 <default_display_setup+0x6c>)
 80017b4:	f000 fe56 	bl	8002464 <ssd1306_WriteString>

	  ssd1306_SetCursor(50,10);
 80017b8:	210a      	movs	r1, #10
 80017ba:	2032      	movs	r0, #50	; 0x32
 80017bc:	f000 fe78 	bl	80024b0 <ssd1306_SetCursor>
	  ssd1306_WriteChar('|', Font_7x10, Black);
 80017c0:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <default_display_setup+0x68>)
 80017c2:	2300      	movs	r3, #0
 80017c4:	ca06      	ldmia	r2, {r1, r2}
 80017c6:	207c      	movs	r0, #124	; 0x7c
 80017c8:	f000 fdc4 	bl	8002354 <ssd1306_WriteChar>

	  ssd1306_SetCursor(60,10);
 80017cc:	210a      	movs	r1, #10
 80017ce:	203c      	movs	r0, #60	; 0x3c
 80017d0:	f000 fe6e 	bl	80024b0 <ssd1306_SetCursor>
	  ssd1306_WriteString("Range:", Font_7x10, Black);
 80017d4:	4a09      	ldr	r2, [pc, #36]	; (80017fc <default_display_setup+0x68>)
 80017d6:	2300      	movs	r3, #0
 80017d8:	ca06      	ldmia	r2, {r1, r2}
 80017da:	480a      	ldr	r0, [pc, #40]	; (8001804 <default_display_setup+0x70>)
 80017dc:	f000 fe42 	bl	8002464 <ssd1306_WriteString>

	  ssd1306_DrawRectangle(5, 30, 123, 60, Black);
 80017e0:	2300      	movs	r3, #0
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	233c      	movs	r3, #60	; 0x3c
 80017e6:	227b      	movs	r2, #123	; 0x7b
 80017e8:	211e      	movs	r1, #30
 80017ea:	2005      	movs	r0, #5
 80017ec:	f000 fee4 	bl	80025b8 <ssd1306_DrawRectangle>

	  ssd1306_UpdateScreen();
 80017f0:	f000 fd34 	bl	800225c <ssd1306_UpdateScreen>
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000004 	.word	0x20000004
 8001800:	0800a118 	.word	0x0800a118
 8001804:	0800a120 	.word	0x0800a120

08001808 <ac_voltage_measure>:

/* �?змерение переменного напряжения */
static void ac_voltage_measure(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af02      	add	r7, sp, #8
	if (mode_chosen) {
 800180e:	4b40      	ldr	r3, [pc, #256]	; (8001910 <ac_voltage_measure+0x108>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d03b      	beq.n	800188e <ac_voltage_measure+0x86>
		  ssd1306_FillRectangle(40, 3, 48, 8, White);
 8001816:	2301      	movs	r3, #1
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2308      	movs	r3, #8
 800181c:	2230      	movs	r2, #48	; 0x30
 800181e:	2103      	movs	r1, #3
 8001820:	2028      	movs	r0, #40	; 0x28
 8001822:	f000 ff00 	bl	8002626 <ssd1306_FillRectangle>

		  ssd1306_SetCursor(40,10);
 8001826:	210a      	movs	r1, #10
 8001828:	2028      	movs	r0, #40	; 0x28
 800182a:	f000 fe41 	bl	80024b0 <ssd1306_SetCursor>
		  ssd1306_WriteChar('U', Font_7x10, Black);
 800182e:	4a39      	ldr	r2, [pc, #228]	; (8001914 <ac_voltage_measure+0x10c>)
 8001830:	2300      	movs	r3, #0
 8001832:	ca06      	ldmia	r2, {r1, r2}
 8001834:	2055      	movs	r0, #85	; 0x55
 8001836:	f000 fd8d 	bl	8002354 <ssd1306_WriteChar>

		  ssd1306_Line(40, 6, 40, 8, Black);
 800183a:	2300      	movs	r3, #0
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2308      	movs	r3, #8
 8001840:	2228      	movs	r2, #40	; 0x28
 8001842:	2106      	movs	r1, #6
 8001844:	2028      	movs	r0, #40	; 0x28
 8001846:	f000 fe4b 	bl	80024e0 <ssd1306_Line>
		  ssd1306_Line(41, 6, 42, 6, Black);
 800184a:	2300      	movs	r3, #0
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2306      	movs	r3, #6
 8001850:	222a      	movs	r2, #42	; 0x2a
 8001852:	2106      	movs	r1, #6
 8001854:	2029      	movs	r0, #41	; 0x29
 8001856:	f000 fe43 	bl	80024e0 <ssd1306_Line>
		  ssd1306_Line(43, 7, 44, 7, Black);
 800185a:	2300      	movs	r3, #0
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2307      	movs	r3, #7
 8001860:	222c      	movs	r2, #44	; 0x2c
 8001862:	2107      	movs	r1, #7
 8001864:	202b      	movs	r0, #43	; 0x2b
 8001866:	f000 fe3b 	bl	80024e0 <ssd1306_Line>
		  ssd1306_DrawPixel(44, 6, Black);
 800186a:	2200      	movs	r2, #0
 800186c:	2106      	movs	r1, #6
 800186e:	202c      	movs	r0, #44	; 0x2c
 8001870:	f000 fd1c 	bl	80022ac <ssd1306_DrawPixel>
		  ssd1306_DrawPixel(44, 5, Black);
 8001874:	2200      	movs	r2, #0
 8001876:	2105      	movs	r1, #5
 8001878:	202c      	movs	r0, #44	; 0x2c
 800187a:	f000 fd17 	bl	80022ac <ssd1306_DrawPixel>

		  ssd1306_UpdateScreen();
 800187e:	f000 fced 	bl	800225c <ssd1306_UpdateScreen>

		  mode_chosen = false;
 8001882:	4b23      	ldr	r3, [pc, #140]	; (8001910 <ac_voltage_measure+0x108>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]

		  HAL_ADC_Start_IT(&hadc1);
 8001888:	4823      	ldr	r0, [pc, #140]	; (8001918 <ac_voltage_measure+0x110>)
 800188a:	f001 fae7 	bl	8002e5c <HAL_ADC_Start_IT>
	}
	if (adc_ready) {
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <ac_voltage_measure+0x114>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d034      	beq.n	8001900 <ac_voltage_measure+0xf8>
		Voltage_AC = (float)(voltage_max() * Ku_a * K / 1.4142);
 8001896:	f7ff ff37 	bl	8001708 <voltage_max>
 800189a:	ee10 3a10 	vmov	r3, s0
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fe5a 	bl	8000558 <__aeabi_f2d>
 80018a4:	a318      	add	r3, pc, #96	; (adr r3, 8001908 <ac_voltage_measure+0x100>)
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	f7fe ffd7 	bl	800085c <__aeabi_ddiv>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f7ff f99f 	bl	8000bf8 <__aeabi_d2f>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4a18      	ldr	r2, [pc, #96]	; (8001920 <ac_voltage_measure+0x118>)
 80018be:	6013      	str	r3, [r2, #0]
		snprintf(str, sizeof(str), "%f", Voltage_AC);
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <ac_voltage_measure+0x118>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe fe47 	bl	8000558 <__aeabi_f2d>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	e9cd 2300 	strd	r2, r3, [sp]
 80018d2:	4a14      	ldr	r2, [pc, #80]	; (8001924 <ac_voltage_measure+0x11c>)
 80018d4:	2109      	movs	r1, #9
 80018d6:	4814      	ldr	r0, [pc, #80]	; (8001928 <ac_voltage_measure+0x120>)
 80018d8:	f004 ff40 	bl	800675c <sniprintf>

		ssd1306_SetCursor(10, 37);
 80018dc:	2125      	movs	r1, #37	; 0x25
 80018de:	200a      	movs	r0, #10
 80018e0:	f000 fde6 	bl	80024b0 <ssd1306_SetCursor>
		ssd1306_WriteString(str, Font_11x18, Black);
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <ac_voltage_measure+0x124>)
 80018e6:	2300      	movs	r3, #0
 80018e8:	ca06      	ldmia	r2, {r1, r2}
 80018ea:	480f      	ldr	r0, [pc, #60]	; (8001928 <ac_voltage_measure+0x120>)
 80018ec:	f000 fdba 	bl	8002464 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 80018f0:	f000 fcb4 	bl	800225c <ssd1306_UpdateScreen>

		adc_ready = false;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <ac_voltage_measure+0x114>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]

		HAL_ADC_Start_IT(&hadc1);
 80018fa:	4807      	ldr	r0, [pc, #28]	; (8001918 <ac_voltage_measure+0x110>)
 80018fc:	f001 faae 	bl	8002e5c <HAL_ADC_Start_IT>
	}
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2de00d1b 	.word	0x2de00d1b
 800190c:	3ff6a090 	.word	0x3ff6a090
 8001910:	20000002 	.word	0x20000002
 8001914:	20000004 	.word	0x20000004
 8001918:	20000204 	.word	0x20000204
 800191c:	200005d2 	.word	0x200005d2
 8001920:	200005e4 	.word	0x200005e4
 8001924:	0800a128 	.word	0x0800a128
 8001928:	200002a0 	.word	0x200002a0
 800192c:	2000000c 	.word	0x2000000c

08001930 <dc_voltage_1_measure>:

/* �?змерение постоянного напряжения. Первый диапазон */
static void dc_voltage_1_measure(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af02      	add	r7, sp, #8
	if (mode_chosen) {
 8001936:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <dc_voltage_1_measure+0xc4>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d02b      	beq.n	8001996 <dc_voltage_1_measure+0x66>
		  ssd1306_FillRectangle(40, 3, 48, 8, White);
 800193e:	2301      	movs	r3, #1
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2308      	movs	r3, #8
 8001944:	2230      	movs	r2, #48	; 0x30
 8001946:	2103      	movs	r1, #3
 8001948:	2028      	movs	r0, #40	; 0x28
 800194a:	f000 fe6c 	bl	8002626 <ssd1306_FillRectangle>

		  ssd1306_SetCursor(40,10);
 800194e:	210a      	movs	r1, #10
 8001950:	2028      	movs	r0, #40	; 0x28
 8001952:	f000 fdad 	bl	80024b0 <ssd1306_SetCursor>
		  ssd1306_WriteChar('U', Font_7x10, Black);
 8001956:	4a28      	ldr	r2, [pc, #160]	; (80019f8 <dc_voltage_1_measure+0xc8>)
 8001958:	2300      	movs	r3, #0
 800195a:	ca06      	ldmia	r2, {r1, r2}
 800195c:	2055      	movs	r0, #85	; 0x55
 800195e:	f000 fcf9 	bl	8002354 <ssd1306_WriteChar>

		  ssd1306_Line(40, 7, 45, 7, Black);
 8001962:	2300      	movs	r3, #0
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2307      	movs	r3, #7
 8001968:	222d      	movs	r2, #45	; 0x2d
 800196a:	2107      	movs	r1, #7
 800196c:	2028      	movs	r0, #40	; 0x28
 800196e:	f000 fdb7 	bl	80024e0 <ssd1306_Line>

		  ssd1306_SetCursor(100,11);
 8001972:	210b      	movs	r1, #11
 8001974:	2064      	movs	r0, #100	; 0x64
 8001976:	f000 fd9b 	bl	80024b0 <ssd1306_SetCursor>
		  ssd1306_WriteChar('1', Font_7x10, Black);
 800197a:	4a1f      	ldr	r2, [pc, #124]	; (80019f8 <dc_voltage_1_measure+0xc8>)
 800197c:	2300      	movs	r3, #0
 800197e:	ca06      	ldmia	r2, {r1, r2}
 8001980:	2031      	movs	r0, #49	; 0x31
 8001982:	f000 fce7 	bl	8002354 <ssd1306_WriteChar>

		  ssd1306_UpdateScreen();
 8001986:	f000 fc69 	bl	800225c <ssd1306_UpdateScreen>

		  mode_chosen = false;
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <dc_voltage_1_measure+0xc4>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]

		  HAL_ADC_Start_IT(&hadc1);
 8001990:	481a      	ldr	r0, [pc, #104]	; (80019fc <dc_voltage_1_measure+0xcc>)
 8001992:	f001 fa63 	bl	8002e5c <HAL_ADC_Start_IT>
	}

	if (adc_ready) {
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <dc_voltage_1_measure+0xd0>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d026      	beq.n	80019ec <dc_voltage_1_measure+0xbc>
	  float voltage = voltage_channel_average();
 800199e:	f7ff fe1b 	bl	80015d8 <voltage_channel_average>
 80019a2:	ed87 0a01 	vstr	s0, [r7, #4]
	  Voltage = voltage * Ku1 * K;
 80019a6:	4a17      	ldr	r2, [pc, #92]	; (8001a04 <dc_voltage_1_measure+0xd4>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6013      	str	r3, [r2, #0]
	  snprintf(str, sizeof(str), "%f", Voltage);
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <dc_voltage_1_measure+0xd4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fdd1 	bl	8000558 <__aeabi_f2d>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	e9cd 2300 	strd	r2, r3, [sp]
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <dc_voltage_1_measure+0xd8>)
 80019c0:	2109      	movs	r1, #9
 80019c2:	4812      	ldr	r0, [pc, #72]	; (8001a0c <dc_voltage_1_measure+0xdc>)
 80019c4:	f004 feca 	bl	800675c <sniprintf>

	  ssd1306_SetCursor(10, 37);
 80019c8:	2125      	movs	r1, #37	; 0x25
 80019ca:	200a      	movs	r0, #10
 80019cc:	f000 fd70 	bl	80024b0 <ssd1306_SetCursor>
	  ssd1306_WriteString(str, Font_11x18, Black);
 80019d0:	4a0f      	ldr	r2, [pc, #60]	; (8001a10 <dc_voltage_1_measure+0xe0>)
 80019d2:	2300      	movs	r3, #0
 80019d4:	ca06      	ldmia	r2, {r1, r2}
 80019d6:	480d      	ldr	r0, [pc, #52]	; (8001a0c <dc_voltage_1_measure+0xdc>)
 80019d8:	f000 fd44 	bl	8002464 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80019dc:	f000 fc3e 	bl	800225c <ssd1306_UpdateScreen>

	  adc_ready = false;
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <dc_voltage_1_measure+0xd0>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]

	  HAL_ADC_Start_IT(&hadc1);
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <dc_voltage_1_measure+0xcc>)
 80019e8:	f001 fa38 	bl	8002e5c <HAL_ADC_Start_IT>
	}
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000002 	.word	0x20000002
 80019f8:	20000004 	.word	0x20000004
 80019fc:	20000204 	.word	0x20000204
 8001a00:	200005d2 	.word	0x200005d2
 8001a04:	200005e0 	.word	0x200005e0
 8001a08:	0800a128 	.word	0x0800a128
 8001a0c:	200002a0 	.word	0x200002a0
 8001a10:	2000000c 	.word	0x2000000c

08001a14 <dc_voltage_2_measure>:

/* �?змерение постоянного напряжения. Второй диапазон */
static void dc_voltage_2_measure(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af02      	add	r7, sp, #8
	if (mode_chosen) {
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <dc_voltage_2_measure+0xc4>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d02b      	beq.n	8001a7a <dc_voltage_2_measure+0x66>
		  ssd1306_FillRectangle(40, 3, 48, 8, White);
 8001a22:	2301      	movs	r3, #1
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2308      	movs	r3, #8
 8001a28:	2230      	movs	r2, #48	; 0x30
 8001a2a:	2103      	movs	r1, #3
 8001a2c:	2028      	movs	r0, #40	; 0x28
 8001a2e:	f000 fdfa 	bl	8002626 <ssd1306_FillRectangle>

		  ssd1306_SetCursor(40,10);
 8001a32:	210a      	movs	r1, #10
 8001a34:	2028      	movs	r0, #40	; 0x28
 8001a36:	f000 fd3b 	bl	80024b0 <ssd1306_SetCursor>
		  ssd1306_WriteChar('U', Font_7x10, Black);
 8001a3a:	4a28      	ldr	r2, [pc, #160]	; (8001adc <dc_voltage_2_measure+0xc8>)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	ca06      	ldmia	r2, {r1, r2}
 8001a40:	2055      	movs	r0, #85	; 0x55
 8001a42:	f000 fc87 	bl	8002354 <ssd1306_WriteChar>

		  ssd1306_Line(40, 7, 45, 7, Black);
 8001a46:	2300      	movs	r3, #0
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	222d      	movs	r2, #45	; 0x2d
 8001a4e:	2107      	movs	r1, #7
 8001a50:	2028      	movs	r0, #40	; 0x28
 8001a52:	f000 fd45 	bl	80024e0 <ssd1306_Line>

		  ssd1306_SetCursor(100,11);
 8001a56:	210b      	movs	r1, #11
 8001a58:	2064      	movs	r0, #100	; 0x64
 8001a5a:	f000 fd29 	bl	80024b0 <ssd1306_SetCursor>
		  ssd1306_WriteChar('2', Font_7x10, Black);
 8001a5e:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <dc_voltage_2_measure+0xc8>)
 8001a60:	2300      	movs	r3, #0
 8001a62:	ca06      	ldmia	r2, {r1, r2}
 8001a64:	2032      	movs	r0, #50	; 0x32
 8001a66:	f000 fc75 	bl	8002354 <ssd1306_WriteChar>

		  ssd1306_UpdateScreen();
 8001a6a:	f000 fbf7 	bl	800225c <ssd1306_UpdateScreen>

		  mode_chosen = false;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <dc_voltage_2_measure+0xc4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]

		  HAL_ADC_Start_IT(&hadc1);
 8001a74:	481a      	ldr	r0, [pc, #104]	; (8001ae0 <dc_voltage_2_measure+0xcc>)
 8001a76:	f001 f9f1 	bl	8002e5c <HAL_ADC_Start_IT>
	}

	if (adc_ready) {
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <dc_voltage_2_measure+0xd0>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d026      	beq.n	8001ad0 <dc_voltage_2_measure+0xbc>
	  float voltage = voltage_channel_average();
 8001a82:	f7ff fda9 	bl	80015d8 <voltage_channel_average>
 8001a86:	ed87 0a01 	vstr	s0, [r7, #4]
	  Voltage = voltage * Ku2 * K;
 8001a8a:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <dc_voltage_2_measure+0xd4>)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6013      	str	r3, [r2, #0]
	  snprintf(str, sizeof(str), "%f", Voltage);
 8001a90:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <dc_voltage_2_measure+0xd4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fd5f 	bl	8000558 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	e9cd 2300 	strd	r2, r3, [sp]
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <dc_voltage_2_measure+0xd8>)
 8001aa4:	2109      	movs	r1, #9
 8001aa6:	4812      	ldr	r0, [pc, #72]	; (8001af0 <dc_voltage_2_measure+0xdc>)
 8001aa8:	f004 fe58 	bl	800675c <sniprintf>

	  ssd1306_SetCursor(10, 37);
 8001aac:	2125      	movs	r1, #37	; 0x25
 8001aae:	200a      	movs	r0, #10
 8001ab0:	f000 fcfe 	bl	80024b0 <ssd1306_SetCursor>
	  ssd1306_WriteString(str, Font_11x18, Black);
 8001ab4:	4a0f      	ldr	r2, [pc, #60]	; (8001af4 <dc_voltage_2_measure+0xe0>)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	ca06      	ldmia	r2, {r1, r2}
 8001aba:	480d      	ldr	r0, [pc, #52]	; (8001af0 <dc_voltage_2_measure+0xdc>)
 8001abc:	f000 fcd2 	bl	8002464 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8001ac0:	f000 fbcc 	bl	800225c <ssd1306_UpdateScreen>

	  adc_ready = false;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <dc_voltage_2_measure+0xd0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]

	  HAL_ADC_Start_IT(&hadc1);
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <dc_voltage_2_measure+0xcc>)
 8001acc:	f001 f9c6 	bl	8002e5c <HAL_ADC_Start_IT>
	}
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000002 	.word	0x20000002
 8001adc:	20000004 	.word	0x20000004
 8001ae0:	20000204 	.word	0x20000204
 8001ae4:	200005d2 	.word	0x200005d2
 8001ae8:	200005e0 	.word	0x200005e0
 8001aec:	0800a128 	.word	0x0800a128
 8001af0:	200002a0 	.word	0x200002a0
 8001af4:	2000000c 	.word	0x2000000c

08001af8 <dc_voltage_3_measure>:

/* �?змерение постоянного напряжения. Третий диапазон */
static void dc_voltage_3_measure(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af02      	add	r7, sp, #8
	if (mode_chosen) {
 8001afe:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <dc_voltage_3_measure+0xc4>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d02b      	beq.n	8001b5e <dc_voltage_3_measure+0x66>
		  ssd1306_FillRectangle(40, 3, 48, 8, White);
 8001b06:	2301      	movs	r3, #1
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2308      	movs	r3, #8
 8001b0c:	2230      	movs	r2, #48	; 0x30
 8001b0e:	2103      	movs	r1, #3
 8001b10:	2028      	movs	r0, #40	; 0x28
 8001b12:	f000 fd88 	bl	8002626 <ssd1306_FillRectangle>

		  ssd1306_SetCursor(40,10);
 8001b16:	210a      	movs	r1, #10
 8001b18:	2028      	movs	r0, #40	; 0x28
 8001b1a:	f000 fcc9 	bl	80024b0 <ssd1306_SetCursor>
		  ssd1306_WriteChar('U', Font_7x10, Black);
 8001b1e:	4a28      	ldr	r2, [pc, #160]	; (8001bc0 <dc_voltage_3_measure+0xc8>)
 8001b20:	2300      	movs	r3, #0
 8001b22:	ca06      	ldmia	r2, {r1, r2}
 8001b24:	2055      	movs	r0, #85	; 0x55
 8001b26:	f000 fc15 	bl	8002354 <ssd1306_WriteChar>

		  ssd1306_Line(40, 7, 45, 7, Black);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2307      	movs	r3, #7
 8001b30:	222d      	movs	r2, #45	; 0x2d
 8001b32:	2107      	movs	r1, #7
 8001b34:	2028      	movs	r0, #40	; 0x28
 8001b36:	f000 fcd3 	bl	80024e0 <ssd1306_Line>

		  ssd1306_SetCursor(100,11);
 8001b3a:	210b      	movs	r1, #11
 8001b3c:	2064      	movs	r0, #100	; 0x64
 8001b3e:	f000 fcb7 	bl	80024b0 <ssd1306_SetCursor>
		  ssd1306_WriteChar('3', Font_7x10, Black);
 8001b42:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <dc_voltage_3_measure+0xc8>)
 8001b44:	2300      	movs	r3, #0
 8001b46:	ca06      	ldmia	r2, {r1, r2}
 8001b48:	2033      	movs	r0, #51	; 0x33
 8001b4a:	f000 fc03 	bl	8002354 <ssd1306_WriteChar>

		  ssd1306_UpdateScreen();
 8001b4e:	f000 fb85 	bl	800225c <ssd1306_UpdateScreen>

		  mode_chosen = false;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <dc_voltage_3_measure+0xc4>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]

		  HAL_ADC_Start_IT(&hadc1);
 8001b58:	481a      	ldr	r0, [pc, #104]	; (8001bc4 <dc_voltage_3_measure+0xcc>)
 8001b5a:	f001 f97f 	bl	8002e5c <HAL_ADC_Start_IT>
	}

	if (adc_ready) {
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <dc_voltage_3_measure+0xd0>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d026      	beq.n	8001bb4 <dc_voltage_3_measure+0xbc>
	  float voltage = voltage_channel_average();
 8001b66:	f7ff fd37 	bl	80015d8 <voltage_channel_average>
 8001b6a:	ed87 0a01 	vstr	s0, [r7, #4]
	  Voltage = voltage * Ku3 * K;
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <dc_voltage_3_measure+0xd4>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6013      	str	r3, [r2, #0]
	  snprintf(str, sizeof(str), "%f", Voltage);
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <dc_voltage_3_measure+0xd4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fced 	bl	8000558 <__aeabi_f2d>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	e9cd 2300 	strd	r2, r3, [sp]
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <dc_voltage_3_measure+0xd8>)
 8001b88:	2109      	movs	r1, #9
 8001b8a:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <dc_voltage_3_measure+0xdc>)
 8001b8c:	f004 fde6 	bl	800675c <sniprintf>

	  ssd1306_SetCursor(10, 37);
 8001b90:	2125      	movs	r1, #37	; 0x25
 8001b92:	200a      	movs	r0, #10
 8001b94:	f000 fc8c 	bl	80024b0 <ssd1306_SetCursor>
	  ssd1306_WriteString(str, Font_11x18, Black);
 8001b98:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <dc_voltage_3_measure+0xe0>)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	ca06      	ldmia	r2, {r1, r2}
 8001b9e:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <dc_voltage_3_measure+0xdc>)
 8001ba0:	f000 fc60 	bl	8002464 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8001ba4:	f000 fb5a 	bl	800225c <ssd1306_UpdateScreen>

	  adc_ready = false;
 8001ba8:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <dc_voltage_3_measure+0xd0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]

	  HAL_ADC_Start_IT(&hadc1);
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <dc_voltage_3_measure+0xcc>)
 8001bb0:	f001 f954 	bl	8002e5c <HAL_ADC_Start_IT>
	}
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000002 	.word	0x20000002
 8001bc0:	20000004 	.word	0x20000004
 8001bc4:	20000204 	.word	0x20000204
 8001bc8:	200005d2 	.word	0x200005d2
 8001bcc:	200005e0 	.word	0x200005e0
 8001bd0:	0800a128 	.word	0x0800a128
 8001bd4:	200002a0 	.word	0x200002a0
 8001bd8:	2000000c 	.word	0x2000000c

08001bdc <resistance_1_measure>:

/* �?змерение сопротивления. Первый диапазон */
static void resistance_1_measure(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af02      	add	r7, sp, #8
	if (mode_chosen) {
 8001be2:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <resistance_1_measure+0xb4>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d023      	beq.n	8001c32 <resistance_1_measure+0x56>
		  ssd1306_SetCursor(40,10);
 8001bea:	210a      	movs	r1, #10
 8001bec:	2028      	movs	r0, #40	; 0x28
 8001bee:	f000 fc5f 	bl	80024b0 <ssd1306_SetCursor>
		  ssd1306_WriteChar('R', Font_7x10, Black);
 8001bf2:	4a28      	ldr	r2, [pc, #160]	; (8001c94 <resistance_1_measure+0xb8>)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	ca06      	ldmia	r2, {r1, r2}
 8001bf8:	2052      	movs	r0, #82	; 0x52
 8001bfa:	f000 fbab 	bl	8002354 <ssd1306_WriteChar>

		  ssd1306_SetCursor(100,11);
 8001bfe:	210b      	movs	r1, #11
 8001c00:	2064      	movs	r0, #100	; 0x64
 8001c02:	f000 fc55 	bl	80024b0 <ssd1306_SetCursor>
		  ssd1306_WriteChar('1', Font_7x10, Black);
 8001c06:	4a23      	ldr	r2, [pc, #140]	; (8001c94 <resistance_1_measure+0xb8>)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	ca06      	ldmia	r2, {r1, r2}
 8001c0c:	2031      	movs	r0, #49	; 0x31
 8001c0e:	f000 fba1 	bl	8002354 <ssd1306_WriteChar>

		  ssd1306_FillRectangle(40, 3, 48, 8, White);
 8001c12:	2301      	movs	r3, #1
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2308      	movs	r3, #8
 8001c18:	2230      	movs	r2, #48	; 0x30
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	2028      	movs	r0, #40	; 0x28
 8001c1e:	f000 fd02 	bl	8002626 <ssd1306_FillRectangle>

		  ssd1306_UpdateScreen();
 8001c22:	f000 fb1b 	bl	800225c <ssd1306_UpdateScreen>

		  mode_chosen = false;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <resistance_1_measure+0xb4>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]

		  HAL_ADC_Start_IT(&hadc1);
 8001c2c:	481a      	ldr	r0, [pc, #104]	; (8001c98 <resistance_1_measure+0xbc>)
 8001c2e:	f001 f915 	bl	8002e5c <HAL_ADC_Start_IT>
	}

	if (adc_ready) {
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <resistance_1_measure+0xc0>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d026      	beq.n	8001c88 <resistance_1_measure+0xac>
	  float voltage = resistance_channel_average();
 8001c3a:	f7ff fd19 	bl	8001670 <resistance_channel_average>
 8001c3e:	ed87 0a01 	vstr	s0, [r7, #4]
	  Resistance = voltage * Kr1 * K;
 8001c42:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <resistance_1_measure+0xc4>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6013      	str	r3, [r2, #0]
	  snprintf(str, sizeof(str), "%f", Resistance);
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <resistance_1_measure+0xc4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fc83 	bl	8000558 <__aeabi_f2d>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	e9cd 2300 	strd	r2, r3, [sp]
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <resistance_1_measure+0xc8>)
 8001c5c:	2109      	movs	r1, #9
 8001c5e:	4812      	ldr	r0, [pc, #72]	; (8001ca8 <resistance_1_measure+0xcc>)
 8001c60:	f004 fd7c 	bl	800675c <sniprintf>

	  ssd1306_SetCursor(10, 37);
 8001c64:	2125      	movs	r1, #37	; 0x25
 8001c66:	200a      	movs	r0, #10
 8001c68:	f000 fc22 	bl	80024b0 <ssd1306_SetCursor>
	  ssd1306_WriteString(str, Font_11x18, Black);
 8001c6c:	4a0f      	ldr	r2, [pc, #60]	; (8001cac <resistance_1_measure+0xd0>)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	ca06      	ldmia	r2, {r1, r2}
 8001c72:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <resistance_1_measure+0xcc>)
 8001c74:	f000 fbf6 	bl	8002464 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8001c78:	f000 faf0 	bl	800225c <ssd1306_UpdateScreen>

	  adc_ready = false;
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <resistance_1_measure+0xc0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]

	  HAL_ADC_Start_IT(&hadc1);
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <resistance_1_measure+0xbc>)
 8001c84:	f001 f8ea 	bl	8002e5c <HAL_ADC_Start_IT>
	}
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000002 	.word	0x20000002
 8001c94:	20000004 	.word	0x20000004
 8001c98:	20000204 	.word	0x20000204
 8001c9c:	200005d2 	.word	0x200005d2
 8001ca0:	200005dc 	.word	0x200005dc
 8001ca4:	0800a128 	.word	0x0800a128
 8001ca8:	200002a0 	.word	0x200002a0
 8001cac:	2000000c 	.word	0x2000000c

08001cb0 <resistance_2_measure>:

/* �?змерение сопротивления. Второй диапазон */
static void resistance_2_measure(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af02      	add	r7, sp, #8
	if (mode_chosen) {
 8001cb6:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <resistance_2_measure+0xb4>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d023      	beq.n	8001d06 <resistance_2_measure+0x56>
		  ssd1306_SetCursor(40,10);
 8001cbe:	210a      	movs	r1, #10
 8001cc0:	2028      	movs	r0, #40	; 0x28
 8001cc2:	f000 fbf5 	bl	80024b0 <ssd1306_SetCursor>
		  ssd1306_WriteChar('R', Font_7x10, Black);
 8001cc6:	4a28      	ldr	r2, [pc, #160]	; (8001d68 <resistance_2_measure+0xb8>)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	ca06      	ldmia	r2, {r1, r2}
 8001ccc:	2052      	movs	r0, #82	; 0x52
 8001cce:	f000 fb41 	bl	8002354 <ssd1306_WriteChar>

		  ssd1306_SetCursor(100,11);
 8001cd2:	210b      	movs	r1, #11
 8001cd4:	2064      	movs	r0, #100	; 0x64
 8001cd6:	f000 fbeb 	bl	80024b0 <ssd1306_SetCursor>
		  ssd1306_WriteChar('2', Font_7x10, Black);
 8001cda:	4a23      	ldr	r2, [pc, #140]	; (8001d68 <resistance_2_measure+0xb8>)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	ca06      	ldmia	r2, {r1, r2}
 8001ce0:	2032      	movs	r0, #50	; 0x32
 8001ce2:	f000 fb37 	bl	8002354 <ssd1306_WriteChar>

		  ssd1306_FillRectangle(40, 3, 48, 8, White);
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2308      	movs	r3, #8
 8001cec:	2230      	movs	r2, #48	; 0x30
 8001cee:	2103      	movs	r1, #3
 8001cf0:	2028      	movs	r0, #40	; 0x28
 8001cf2:	f000 fc98 	bl	8002626 <ssd1306_FillRectangle>

		  ssd1306_UpdateScreen();
 8001cf6:	f000 fab1 	bl	800225c <ssd1306_UpdateScreen>

		  mode_chosen = false;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <resistance_2_measure+0xb4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]

		  HAL_ADC_Start_IT(&hadc1);
 8001d00:	481a      	ldr	r0, [pc, #104]	; (8001d6c <resistance_2_measure+0xbc>)
 8001d02:	f001 f8ab 	bl	8002e5c <HAL_ADC_Start_IT>
	}

	if (adc_ready) {
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <resistance_2_measure+0xc0>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d026      	beq.n	8001d5c <resistance_2_measure+0xac>
	  float voltage = resistance_channel_average();
 8001d0e:	f7ff fcaf 	bl	8001670 <resistance_channel_average>
 8001d12:	ed87 0a01 	vstr	s0, [r7, #4]
	  Resistance = voltage * Kr2 * K;
 8001d16:	4a17      	ldr	r2, [pc, #92]	; (8001d74 <resistance_2_measure+0xc4>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6013      	str	r3, [r2, #0]
	  snprintf(str, sizeof(str), "%f", Resistance);
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <resistance_2_measure+0xc4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fc19 	bl	8000558 <__aeabi_f2d>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	e9cd 2300 	strd	r2, r3, [sp]
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <resistance_2_measure+0xc8>)
 8001d30:	2109      	movs	r1, #9
 8001d32:	4812      	ldr	r0, [pc, #72]	; (8001d7c <resistance_2_measure+0xcc>)
 8001d34:	f004 fd12 	bl	800675c <sniprintf>

	  ssd1306_SetCursor(10, 37);
 8001d38:	2125      	movs	r1, #37	; 0x25
 8001d3a:	200a      	movs	r0, #10
 8001d3c:	f000 fbb8 	bl	80024b0 <ssd1306_SetCursor>
	  ssd1306_WriteString(str, Font_11x18, Black);
 8001d40:	4a0f      	ldr	r2, [pc, #60]	; (8001d80 <resistance_2_measure+0xd0>)
 8001d42:	2300      	movs	r3, #0
 8001d44:	ca06      	ldmia	r2, {r1, r2}
 8001d46:	480d      	ldr	r0, [pc, #52]	; (8001d7c <resistance_2_measure+0xcc>)
 8001d48:	f000 fb8c 	bl	8002464 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8001d4c:	f000 fa86 	bl	800225c <ssd1306_UpdateScreen>

	  adc_ready = false;
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <resistance_2_measure+0xc0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]

	  HAL_ADC_Start_IT(&hadc1);
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <resistance_2_measure+0xbc>)
 8001d58:	f001 f880 	bl	8002e5c <HAL_ADC_Start_IT>
	}
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000002 	.word	0x20000002
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	20000204 	.word	0x20000204
 8001d70:	200005d2 	.word	0x200005d2
 8001d74:	200005dc 	.word	0x200005dc
 8001d78:	0800a128 	.word	0x0800a128
 8001d7c:	200002a0 	.word	0x200002a0
 8001d80:	2000000c 	.word	0x2000000c

08001d84 <resistance_3_measure>:

/* �?змерение сопротивления. Третий диапазон */
static void resistance_3_measure(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af02      	add	r7, sp, #8
	if (mode_chosen) {
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <resistance_3_measure+0xb4>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d023      	beq.n	8001dda <resistance_3_measure+0x56>
		  ssd1306_SetCursor(40,10);
 8001d92:	210a      	movs	r1, #10
 8001d94:	2028      	movs	r0, #40	; 0x28
 8001d96:	f000 fb8b 	bl	80024b0 <ssd1306_SetCursor>
		  ssd1306_WriteChar('R', Font_7x10, Black);
 8001d9a:	4a28      	ldr	r2, [pc, #160]	; (8001e3c <resistance_3_measure+0xb8>)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	ca06      	ldmia	r2, {r1, r2}
 8001da0:	2052      	movs	r0, #82	; 0x52
 8001da2:	f000 fad7 	bl	8002354 <ssd1306_WriteChar>

		  ssd1306_SetCursor(100,11);
 8001da6:	210b      	movs	r1, #11
 8001da8:	2064      	movs	r0, #100	; 0x64
 8001daa:	f000 fb81 	bl	80024b0 <ssd1306_SetCursor>
		  ssd1306_WriteChar('3', Font_7x10, Black);
 8001dae:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <resistance_3_measure+0xb8>)
 8001db0:	2300      	movs	r3, #0
 8001db2:	ca06      	ldmia	r2, {r1, r2}
 8001db4:	2033      	movs	r0, #51	; 0x33
 8001db6:	f000 facd 	bl	8002354 <ssd1306_WriteChar>

		  ssd1306_FillRectangle(40, 3, 48, 8, White);
 8001dba:	2301      	movs	r3, #1
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	2230      	movs	r2, #48	; 0x30
 8001dc2:	2103      	movs	r1, #3
 8001dc4:	2028      	movs	r0, #40	; 0x28
 8001dc6:	f000 fc2e 	bl	8002626 <ssd1306_FillRectangle>

		  ssd1306_UpdateScreen();
 8001dca:	f000 fa47 	bl	800225c <ssd1306_UpdateScreen>

		  mode_chosen = false;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <resistance_3_measure+0xb4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]

		  HAL_ADC_Start_IT(&hadc1);
 8001dd4:	481a      	ldr	r0, [pc, #104]	; (8001e40 <resistance_3_measure+0xbc>)
 8001dd6:	f001 f841 	bl	8002e5c <HAL_ADC_Start_IT>
	}

	if (adc_ready) {
 8001dda:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <resistance_3_measure+0xc0>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d026      	beq.n	8001e30 <resistance_3_measure+0xac>
	  float voltage = resistance_channel_average();
 8001de2:	f7ff fc45 	bl	8001670 <resistance_channel_average>
 8001de6:	ed87 0a01 	vstr	s0, [r7, #4]
	  Resistance = voltage * Kr3 * K;
 8001dea:	4a17      	ldr	r2, [pc, #92]	; (8001e48 <resistance_3_measure+0xc4>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6013      	str	r3, [r2, #0]
	  snprintf(str, sizeof(str), "%f", Resistance);
 8001df0:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <resistance_3_measure+0xc4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fbaf 	bl	8000558 <__aeabi_f2d>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	e9cd 2300 	strd	r2, r3, [sp]
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <resistance_3_measure+0xc8>)
 8001e04:	2109      	movs	r1, #9
 8001e06:	4812      	ldr	r0, [pc, #72]	; (8001e50 <resistance_3_measure+0xcc>)
 8001e08:	f004 fca8 	bl	800675c <sniprintf>

	  ssd1306_SetCursor(10, 37);
 8001e0c:	2125      	movs	r1, #37	; 0x25
 8001e0e:	200a      	movs	r0, #10
 8001e10:	f000 fb4e 	bl	80024b0 <ssd1306_SetCursor>
	  ssd1306_WriteString(str, Font_11x18, Black);
 8001e14:	4a0f      	ldr	r2, [pc, #60]	; (8001e54 <resistance_3_measure+0xd0>)
 8001e16:	2300      	movs	r3, #0
 8001e18:	ca06      	ldmia	r2, {r1, r2}
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <resistance_3_measure+0xcc>)
 8001e1c:	f000 fb22 	bl	8002464 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8001e20:	f000 fa1c 	bl	800225c <ssd1306_UpdateScreen>

	  adc_ready = false;
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <resistance_3_measure+0xc0>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]

	  HAL_ADC_Start_IT(&hadc1);
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <resistance_3_measure+0xbc>)
 8001e2c:	f001 f816 	bl	8002e5c <HAL_ADC_Start_IT>
	}
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000002 	.word	0x20000002
 8001e3c:	20000004 	.word	0x20000004
 8001e40:	20000204 	.word	0x20000204
 8001e44:	200005d2 	.word	0x200005d2
 8001e48:	200005dc 	.word	0x200005dc
 8001e4c:	0800a128 	.word	0x0800a128
 8001e50:	200002a0 	.word	0x200002a0
 8001e54:	2000000c 	.word	0x2000000c

08001e58 <capacity_1_measure>:
/* �?змерение емкости. Первый диапазон. P.S. Не уверен, нужны ли другие режимы
 * для измерения емкости, потому что частота измеряется в довольно широком диапазоне.
 * Пока оставил один функциональный режим.
 *  */
static void capacity_1_measure(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af02      	add	r7, sp, #8
	if (mode_chosen) {
 8001e5e:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <capacity_1_measure+0xc4>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d026      	beq.n	8001eb4 <capacity_1_measure+0x5c>
		  ssd1306_SetCursor(40,10);
 8001e66:	210a      	movs	r1, #10
 8001e68:	2028      	movs	r0, #40	; 0x28
 8001e6a:	f000 fb21 	bl	80024b0 <ssd1306_SetCursor>
		  ssd1306_WriteChar('C', Font_7x10, Black);
 8001e6e:	4a2c      	ldr	r2, [pc, #176]	; (8001f20 <capacity_1_measure+0xc8>)
 8001e70:	2300      	movs	r3, #0
 8001e72:	ca06      	ldmia	r2, {r1, r2}
 8001e74:	2043      	movs	r0, #67	; 0x43
 8001e76:	f000 fa6d 	bl	8002354 <ssd1306_WriteChar>

		  ssd1306_SetCursor(100,11);
 8001e7a:	210b      	movs	r1, #11
 8001e7c:	2064      	movs	r0, #100	; 0x64
 8001e7e:	f000 fb17 	bl	80024b0 <ssd1306_SetCursor>
		  ssd1306_WriteChar('1', Font_7x10, Black);
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <capacity_1_measure+0xc8>)
 8001e84:	2300      	movs	r3, #0
 8001e86:	ca06      	ldmia	r2, {r1, r2}
 8001e88:	2031      	movs	r0, #49	; 0x31
 8001e8a:	f000 fa63 	bl	8002354 <ssd1306_WriteChar>

		  ssd1306_FillRectangle(40, 3, 48, 8, White);
 8001e8e:	2301      	movs	r3, #1
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2308      	movs	r3, #8
 8001e94:	2230      	movs	r2, #48	; 0x30
 8001e96:	2103      	movs	r1, #3
 8001e98:	2028      	movs	r0, #40	; 0x28
 8001e9a:	f000 fbc4 	bl	8002626 <ssd1306_FillRectangle>

		  ssd1306_UpdateScreen();
 8001e9e:	f000 f9dd 	bl	800225c <ssd1306_UpdateScreen>

		  mode_chosen = false;
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <capacity_1_measure+0xc4>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]

		  HAL_TIM_Base_Start_IT(&htim1);
 8001ea8:	481e      	ldr	r0, [pc, #120]	; (8001f24 <capacity_1_measure+0xcc>)
 8001eaa:	f003 f827 	bl	8004efc <HAL_TIM_Base_Start_IT>
		  HAL_TIM_Base_Start(&htim2);
 8001eae:	481e      	ldr	r0, [pc, #120]	; (8001f28 <capacity_1_measure+0xd0>)
 8001eb0:	f002 ffca 	bl	8004e48 <HAL_TIM_Base_Start>
	}

	if (tim_ready) {
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <capacity_1_measure+0xd4>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d02c      	beq.n	8001f16 <capacity_1_measure+0xbe>
        tim_ready = false;
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <capacity_1_measure+0xd4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
        /*
         * Чтобы получить измеренную частоту, необходимо брать именно freq*2.
         * В таком случае получается частота в Гц.
         * */

        Capacity = (float)(freq * Kc);
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <capacity_1_measure+0xd8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <capacity_1_measure+0xdc>)
 8001ed0:	edc3 7a00 	vstr	s15, [r3]
        snprintf(str, sizeof(str), "%f", Capacity);
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <capacity_1_measure+0xdc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb3d 	bl	8000558 <__aeabi_f2d>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	e9cd 2300 	strd	r2, r3, [sp]
 8001ee6:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <capacity_1_measure+0xe0>)
 8001ee8:	2109      	movs	r1, #9
 8001eea:	4814      	ldr	r0, [pc, #80]	; (8001f3c <capacity_1_measure+0xe4>)
 8001eec:	f004 fc36 	bl	800675c <sniprintf>

        ssd1306_SetCursor(10, 37);
 8001ef0:	2125      	movs	r1, #37	; 0x25
 8001ef2:	200a      	movs	r0, #10
 8001ef4:	f000 fadc 	bl	80024b0 <ssd1306_SetCursor>
        ssd1306_WriteString(str, Font_11x18, Black);
 8001ef8:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <capacity_1_measure+0xe8>)
 8001efa:	2300      	movs	r3, #0
 8001efc:	ca06      	ldmia	r2, {r1, r2}
 8001efe:	480f      	ldr	r0, [pc, #60]	; (8001f3c <capacity_1_measure+0xe4>)
 8001f00:	f000 fab0 	bl	8002464 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8001f04:	f000 f9aa 	bl	800225c <ssd1306_UpdateScreen>

        __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <capacity_1_measure+0xd0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	625a      	str	r2, [r3, #36]	; 0x24
        HAL_TIM_Base_Start_IT(&htim1);
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <capacity_1_measure+0xcc>)
 8001f12:	f002 fff3 	bl	8004efc <HAL_TIM_Base_Start_IT>
	}
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000002 	.word	0x20000002
 8001f20:	20000004 	.word	0x20000004
 8001f24:	200009f4 	.word	0x200009f4
 8001f28:	20000a3c 	.word	0x20000a3c
 8001f2c:	200005d3 	.word	0x200005d3
 8001f30:	200005cc 	.word	0x200005cc
 8001f34:	200005d8 	.word	0x200005d8
 8001f38:	0800a128 	.word	0x0800a128
 8001f3c:	200002a0 	.word	0x200002a0
 8001f40:	2000000c 	.word	0x2000000c

08001f44 <capacity_2_measure>:

static void capacity_2_measure(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
//        HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 1000);
//
//        __HAL_TIM_SET_COUNTER(&htim2, 0);
//        HAL_TIM_Base_Start_IT(&htim1);
//	}
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <capacity_3_measure>:

static void capacity_3_measure(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0
//        HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), 1000);
//
//        __HAL_TIM_SET_COUNTER(&htim2, 0);
//        HAL_TIM_Base_Start_IT(&htim1);
//	}
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f64:	f000 fea0 	bl	8002ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f68:	f000 f84e 	bl	8002008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f6c:	f7ff f8f8 	bl	8001160 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001f70:	f7ff f846 	bl	8001000 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001f74:	f7ff f97e 	bl	8001274 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001f78:	f000 fd4c 	bl	8002a14 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f7c:	f000 fd9c 	bl	8002ab8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  default_display_setup();
 8001f80:	f7ff fc08 	bl	8001794 <default_display_setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  switch(mode) {
 8001f84:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <main+0xa4>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b09      	cmp	r3, #9
 8001f8a:	d835      	bhi.n	8001ff8 <main+0x98>
 8001f8c:	a201      	add	r2, pc, #4	; (adr r2, 8001f94 <main+0x34>)
 8001f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f92:	bf00      	nop
 8001f94:	08001fbd 	.word	0x08001fbd
 8001f98:	08001fc3 	.word	0x08001fc3
 8001f9c:	08001fc9 	.word	0x08001fc9
 8001fa0:	08001fcf 	.word	0x08001fcf
 8001fa4:	08001fd5 	.word	0x08001fd5
 8001fa8:	08001fdb 	.word	0x08001fdb
 8001fac:	08001fe1 	.word	0x08001fe1
 8001fb0:	08001fe7 	.word	0x08001fe7
 8001fb4:	08001fed 	.word	0x08001fed
 8001fb8:	08001ff3 	.word	0x08001ff3
	  	  case AC_VOLTAGE_MODE:
	  		  ac_voltage_measure();
 8001fbc:	f7ff fc24 	bl	8001808 <ac_voltage_measure>
	  		  break;
 8001fc0:	e01c      	b.n	8001ffc <main+0x9c>
	  	  case DC_VOLTAGE_MODE_RANGE_1:
	  		  dc_voltage_1_measure();
 8001fc2:	f7ff fcb5 	bl	8001930 <dc_voltage_1_measure>
	  		  break;
 8001fc6:	e019      	b.n	8001ffc <main+0x9c>
	  	  case DC_VOLTAGE_MODE_RANGE_2:
	  		  dc_voltage_2_measure();
 8001fc8:	f7ff fd24 	bl	8001a14 <dc_voltage_2_measure>
	  		  break;
 8001fcc:	e016      	b.n	8001ffc <main+0x9c>
	  	  case DC_VOLTAGE_MODE_RANGE_3:
	  		  dc_voltage_3_measure();
 8001fce:	f7ff fd93 	bl	8001af8 <dc_voltage_3_measure>
	  		  break;
 8001fd2:	e013      	b.n	8001ffc <main+0x9c>
	  	  case RESISTANCE_MODE_RANGE_1:
	  		  resistance_1_measure();
 8001fd4:	f7ff fe02 	bl	8001bdc <resistance_1_measure>
	  		  break;
 8001fd8:	e010      	b.n	8001ffc <main+0x9c>
	  	  case RESISTANCE_MODE_RANGE_2:
	  		  resistance_2_measure();
 8001fda:	f7ff fe69 	bl	8001cb0 <resistance_2_measure>
	  		  break;
 8001fde:	e00d      	b.n	8001ffc <main+0x9c>
	  	  case RESISTANCE_MODE_RANGE_3:
	  		  resistance_3_measure();
 8001fe0:	f7ff fed0 	bl	8001d84 <resistance_3_measure>
	  		  break;
 8001fe4:	e00a      	b.n	8001ffc <main+0x9c>
	  	  case CAPACITY_MODE_RANGE_1:
	  		  capacity_1_measure();
 8001fe6:	f7ff ff37 	bl	8001e58 <capacity_1_measure>
	  		  break;
 8001fea:	e007      	b.n	8001ffc <main+0x9c>
	  	  case CAPACITY_MODE_RANGE_2:
	  		  capacity_2_measure();
 8001fec:	f7ff ffaa 	bl	8001f44 <capacity_2_measure>
	  		  break;
 8001ff0:	e004      	b.n	8001ffc <main+0x9c>
	  	  case CAPACITY_MODE_RANGE_3:
	  		  capacity_3_measure();
 8001ff2:	f7ff ffae 	bl	8001f52 <capacity_3_measure>
	  		  break;
 8001ff6:	e001      	b.n	8001ffc <main+0x9c>
	  	  default:
	  		  Error_Handler();
 8001ff8:	f000 f870 	bl	80020dc <Error_Handler>
	  }
	  HAL_Delay(200);
 8001ffc:	20c8      	movs	r0, #200	; 0xc8
 8001ffe:	f000 fec5 	bl	8002d8c <HAL_Delay>
	  switch(mode) {
 8002002:	e7bf      	b.n	8001f84 <main+0x24>
 8002004:	20000000 	.word	0x20000000

08002008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b094      	sub	sp, #80	; 0x50
 800200c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800200e:	f107 0320 	add.w	r3, r7, #32
 8002012:	2230      	movs	r2, #48	; 0x30
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f004 fc51 	bl	80068be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	4b28      	ldr	r3, [pc, #160]	; (80020d4 <SystemClock_Config+0xcc>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	4a27      	ldr	r2, [pc, #156]	; (80020d4 <SystemClock_Config+0xcc>)
 8002036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203a:	6413      	str	r3, [r2, #64]	; 0x40
 800203c:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <SystemClock_Config+0xcc>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002048:	2300      	movs	r3, #0
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <SystemClock_Config+0xd0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002054:	4a20      	ldr	r2, [pc, #128]	; (80020d8 <SystemClock_Config+0xd0>)
 8002056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <SystemClock_Config+0xd0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002068:	2301      	movs	r3, #1
 800206a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800206c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002072:	2302      	movs	r3, #2
 8002074:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800207c:	2304      	movs	r3, #4
 800207e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002080:	2354      	movs	r3, #84	; 0x54
 8002082:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002084:	2302      	movs	r3, #2
 8002086:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002088:	2304      	movs	r3, #4
 800208a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800208c:	f107 0320 	add.w	r3, r7, #32
 8002090:	4618      	mov	r0, r3
 8002092:	f002 fa05 	bl	80044a0 <HAL_RCC_OscConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800209c:	f000 f81e 	bl	80020dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020a0:	230f      	movs	r3, #15
 80020a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020a4:	2302      	movs	r3, #2
 80020a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020b6:	f107 030c 	add.w	r3, r7, #12
 80020ba:	2102      	movs	r1, #2
 80020bc:	4618      	mov	r0, r3
 80020be:	f002 fc67 	bl	8004990 <HAL_RCC_ClockConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80020c8:	f000 f808 	bl	80020dc <Error_Handler>
  }
}
 80020cc:	bf00      	nop
 80020ce:	3750      	adds	r7, #80	; 0x50
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40007000 	.word	0x40007000

080020dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e0:	b672      	cpsid	i
}
 80020e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <Error_Handler+0x8>

080020e6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af04      	add	r7, sp, #16
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	9302      	str	r3, [sp, #8]
 8002104:	2301      	movs	r3, #1
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	1dfb      	adds	r3, r7, #7
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2301      	movs	r3, #1
 800210e:	2200      	movs	r2, #0
 8002110:	2178      	movs	r1, #120	; 0x78
 8002112:	4803      	ldr	r0, [pc, #12]	; (8002120 <ssd1306_WriteCommand+0x2c>)
 8002114:	f001 feac 	bl	8003e70 <HAL_I2C_Mem_Write>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	2000024c 	.word	0x2000024c

08002124 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af04      	add	r7, sp, #16
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b29b      	uxth	r3, r3
 8002132:	f04f 32ff 	mov.w	r2, #4294967295
 8002136:	9202      	str	r2, [sp, #8]
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2301      	movs	r3, #1
 8002140:	2240      	movs	r2, #64	; 0x40
 8002142:	2178      	movs	r1, #120	; 0x78
 8002144:	4803      	ldr	r0, [pc, #12]	; (8002154 <ssd1306_WriteData+0x30>)
 8002146:	f001 fe93 	bl	8003e70 <HAL_I2C_Mem_Write>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000024c 	.word	0x2000024c

08002158 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800215c:	f7ff ffc3 	bl	80020e6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002160:	2064      	movs	r0, #100	; 0x64
 8002162:	f000 fe13 	bl	8002d8c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002166:	2000      	movs	r0, #0
 8002168:	f000 fabe 	bl	80026e8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800216c:	2020      	movs	r0, #32
 800216e:	f7ff ffc1 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002172:	2000      	movs	r0, #0
 8002174:	f7ff ffbe 	bl	80020f4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002178:	20b0      	movs	r0, #176	; 0xb0
 800217a:	f7ff ffbb 	bl	80020f4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800217e:	20c8      	movs	r0, #200	; 0xc8
 8002180:	f7ff ffb8 	bl	80020f4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff ffb5 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800218a:	2010      	movs	r0, #16
 800218c:	f7ff ffb2 	bl	80020f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002190:	2040      	movs	r0, #64	; 0x40
 8002192:	f7ff ffaf 	bl	80020f4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002196:	20ff      	movs	r0, #255	; 0xff
 8002198:	f000 fa93 	bl	80026c2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800219c:	20a1      	movs	r0, #161	; 0xa1
 800219e:	f7ff ffa9 	bl	80020f4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80021a2:	20a6      	movs	r0, #166	; 0xa6
 80021a4:	f7ff ffa6 	bl	80020f4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80021a8:	20a8      	movs	r0, #168	; 0xa8
 80021aa:	f7ff ffa3 	bl	80020f4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80021ae:	203f      	movs	r0, #63	; 0x3f
 80021b0:	f7ff ffa0 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80021b4:	20a4      	movs	r0, #164	; 0xa4
 80021b6:	f7ff ff9d 	bl	80020f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80021ba:	20d3      	movs	r0, #211	; 0xd3
 80021bc:	f7ff ff9a 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80021c0:	2000      	movs	r0, #0
 80021c2:	f7ff ff97 	bl	80020f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80021c6:	20d5      	movs	r0, #213	; 0xd5
 80021c8:	f7ff ff94 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80021cc:	20f0      	movs	r0, #240	; 0xf0
 80021ce:	f7ff ff91 	bl	80020f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80021d2:	20d9      	movs	r0, #217	; 0xd9
 80021d4:	f7ff ff8e 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80021d8:	2022      	movs	r0, #34	; 0x22
 80021da:	f7ff ff8b 	bl	80020f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80021de:	20da      	movs	r0, #218	; 0xda
 80021e0:	f7ff ff88 	bl	80020f4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80021e4:	2012      	movs	r0, #18
 80021e6:	f7ff ff85 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80021ea:	20db      	movs	r0, #219	; 0xdb
 80021ec:	f7ff ff82 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80021f0:	2020      	movs	r0, #32
 80021f2:	f7ff ff7f 	bl	80020f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80021f6:	208d      	movs	r0, #141	; 0x8d
 80021f8:	f7ff ff7c 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80021fc:	2014      	movs	r0, #20
 80021fe:	f7ff ff79 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002202:	2001      	movs	r0, #1
 8002204:	f000 fa70 	bl	80026e8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002208:	2000      	movs	r0, #0
 800220a:	f000 f80f 	bl	800222c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800220e:	f000 f825 	bl	800225c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <ssd1306_Init+0xd0>)
 8002214:	2200      	movs	r2, #0
 8002216:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <ssd1306_Init+0xd0>)
 800221a:	2200      	movs	r2, #0
 800221c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800221e:	4b02      	ldr	r3, [pc, #8]	; (8002228 <ssd1306_Init+0xd0>)
 8002220:	2201      	movs	r2, #1
 8002222:	711a      	strb	r2, [r3, #4]
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200009e8 	.word	0x200009e8

0800222c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <ssd1306_Fill+0x14>
 800223c:	2300      	movs	r3, #0
 800223e:	e000      	b.n	8002242 <ssd1306_Fill+0x16>
 8002240:	23ff      	movs	r3, #255	; 0xff
 8002242:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002246:	4619      	mov	r1, r3
 8002248:	4803      	ldr	r0, [pc, #12]	; (8002258 <ssd1306_Fill+0x2c>)
 800224a:	f004 fb38 	bl	80068be <memset>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200005e8 	.word	0x200005e8

0800225c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002262:	2300      	movs	r3, #0
 8002264:	71fb      	strb	r3, [r7, #7]
 8002266:	e016      	b.n	8002296 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	3b50      	subs	r3, #80	; 0x50
 800226c:	b2db      	uxtb	r3, r3
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ff40 	bl	80020f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002274:	2000      	movs	r0, #0
 8002276:	f7ff ff3d 	bl	80020f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800227a:	2010      	movs	r0, #16
 800227c:	f7ff ff3a 	bl	80020f4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	01db      	lsls	r3, r3, #7
 8002284:	4a08      	ldr	r2, [pc, #32]	; (80022a8 <ssd1306_UpdateScreen+0x4c>)
 8002286:	4413      	add	r3, r2
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff4a 	bl	8002124 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	3301      	adds	r3, #1
 8002294:	71fb      	strb	r3, [r7, #7]
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	2b07      	cmp	r3, #7
 800229a:	d9e5      	bls.n	8002268 <ssd1306_UpdateScreen+0xc>
    }
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200005e8 	.word	0x200005e8

080022ac <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
 80022b6:	460b      	mov	r3, r1
 80022b8:	71bb      	strb	r3, [r7, #6]
 80022ba:	4613      	mov	r3, r2
 80022bc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	db3d      	blt.n	8002342 <ssd1306_DrawPixel+0x96>
 80022c6:	79bb      	ldrb	r3, [r7, #6]
 80022c8:	2b3f      	cmp	r3, #63	; 0x3f
 80022ca:	d83a      	bhi.n	8002342 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80022cc:	797b      	ldrb	r3, [r7, #5]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d11a      	bne.n	8002308 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80022d2:	79fa      	ldrb	r2, [r7, #7]
 80022d4:	79bb      	ldrb	r3, [r7, #6]
 80022d6:	08db      	lsrs	r3, r3, #3
 80022d8:	b2d8      	uxtb	r0, r3
 80022da:	4603      	mov	r3, r0
 80022dc:	01db      	lsls	r3, r3, #7
 80022de:	4413      	add	r3, r2
 80022e0:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <ssd1306_DrawPixel+0xa4>)
 80022e2:	5cd3      	ldrb	r3, [r2, r3]
 80022e4:	b25a      	sxtb	r2, r3
 80022e6:	79bb      	ldrb	r3, [r7, #6]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	4313      	orrs	r3, r2
 80022f6:	b259      	sxtb	r1, r3
 80022f8:	79fa      	ldrb	r2, [r7, #7]
 80022fa:	4603      	mov	r3, r0
 80022fc:	01db      	lsls	r3, r3, #7
 80022fe:	4413      	add	r3, r2
 8002300:	b2c9      	uxtb	r1, r1
 8002302:	4a13      	ldr	r2, [pc, #76]	; (8002350 <ssd1306_DrawPixel+0xa4>)
 8002304:	54d1      	strb	r1, [r2, r3]
 8002306:	e01d      	b.n	8002344 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002308:	79fa      	ldrb	r2, [r7, #7]
 800230a:	79bb      	ldrb	r3, [r7, #6]
 800230c:	08db      	lsrs	r3, r3, #3
 800230e:	b2d8      	uxtb	r0, r3
 8002310:	4603      	mov	r3, r0
 8002312:	01db      	lsls	r3, r3, #7
 8002314:	4413      	add	r3, r2
 8002316:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <ssd1306_DrawPixel+0xa4>)
 8002318:	5cd3      	ldrb	r3, [r2, r3]
 800231a:	b25a      	sxtb	r2, r3
 800231c:	79bb      	ldrb	r3, [r7, #6]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	2101      	movs	r1, #1
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	b25b      	sxtb	r3, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	b25b      	sxtb	r3, r3
 800232e:	4013      	ands	r3, r2
 8002330:	b259      	sxtb	r1, r3
 8002332:	79fa      	ldrb	r2, [r7, #7]
 8002334:	4603      	mov	r3, r0
 8002336:	01db      	lsls	r3, r3, #7
 8002338:	4413      	add	r3, r2
 800233a:	b2c9      	uxtb	r1, r1
 800233c:	4a04      	ldr	r2, [pc, #16]	; (8002350 <ssd1306_DrawPixel+0xa4>)
 800233e:	54d1      	strb	r1, [r2, r3]
 8002340:	e000      	b.n	8002344 <ssd1306_DrawPixel+0x98>
        return;
 8002342:	bf00      	nop
    }
}
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	200005e8 	.word	0x200005e8

08002354 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	4604      	mov	r4, r0
 800235c:	1d38      	adds	r0, r7, #4
 800235e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002362:	461a      	mov	r2, r3
 8002364:	4623      	mov	r3, r4
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	4613      	mov	r3, r2
 800236a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b1f      	cmp	r3, #31
 8002370:	d902      	bls.n	8002378 <ssd1306_WriteChar+0x24>
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	2b7e      	cmp	r3, #126	; 0x7e
 8002376:	d901      	bls.n	800237c <ssd1306_WriteChar+0x28>
        return 0;
 8002378:	2300      	movs	r3, #0
 800237a:	e06d      	b.n	8002458 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800237c:	4b38      	ldr	r3, [pc, #224]	; (8002460 <ssd1306_WriteChar+0x10c>)
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	793b      	ldrb	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	2b80      	cmp	r3, #128	; 0x80
 8002388:	dc06      	bgt.n	8002398 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800238a:	4b35      	ldr	r3, [pc, #212]	; (8002460 <ssd1306_WriteChar+0x10c>)
 800238c:	885b      	ldrh	r3, [r3, #2]
 800238e:	461a      	mov	r2, r3
 8002390:	797b      	ldrb	r3, [r7, #5]
 8002392:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	dd01      	ble.n	800239c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002398:	2300      	movs	r3, #0
 800239a:	e05d      	b.n	8002458 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800239c:	2300      	movs	r3, #0
 800239e:	61fb      	str	r3, [r7, #28]
 80023a0:	e04c      	b.n	800243c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	3b20      	subs	r3, #32
 80023a8:	7979      	ldrb	r1, [r7, #5]
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	4619      	mov	r1, r3
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	440b      	add	r3, r1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	e034      	b.n	800242c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d012      	beq.n	80023f8 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80023d2:	4b23      	ldr	r3, [pc, #140]	; (8002460 <ssd1306_WriteChar+0x10c>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	4413      	add	r3, r2
 80023de:	b2d8      	uxtb	r0, r3
 80023e0:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <ssd1306_WriteChar+0x10c>)
 80023e2:	885b      	ldrh	r3, [r3, #2]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	7bba      	ldrb	r2, [r7, #14]
 80023f0:	4619      	mov	r1, r3
 80023f2:	f7ff ff5b 	bl	80022ac <ssd1306_DrawPixel>
 80023f6:	e016      	b.n	8002426 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <ssd1306_WriteChar+0x10c>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	4413      	add	r3, r2
 8002404:	b2d8      	uxtb	r0, r3
 8002406:	4b16      	ldr	r3, [pc, #88]	; (8002460 <ssd1306_WriteChar+0x10c>)
 8002408:	885b      	ldrh	r3, [r3, #2]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	4413      	add	r3, r2
 8002412:	b2d9      	uxtb	r1, r3
 8002414:	7bbb      	ldrb	r3, [r7, #14]
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf0c      	ite	eq
 800241a:	2301      	moveq	r3, #1
 800241c:	2300      	movne	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	f7ff ff43 	bl	80022ac <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	3301      	adds	r3, #1
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	793b      	ldrb	r3, [r7, #4]
 800242e:	461a      	mov	r2, r3
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4293      	cmp	r3, r2
 8002434:	d3c5      	bcc.n	80023c2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3301      	adds	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	797b      	ldrb	r3, [r7, #5]
 800243e:	461a      	mov	r2, r3
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	4293      	cmp	r3, r2
 8002444:	d3ad      	bcc.n	80023a2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <ssd1306_WriteChar+0x10c>)
 8002448:	881a      	ldrh	r2, [r3, #0]
 800244a:	793b      	ldrb	r3, [r7, #4]
 800244c:	b29b      	uxth	r3, r3
 800244e:	4413      	add	r3, r2
 8002450:	b29a      	uxth	r2, r3
 8002452:	4b03      	ldr	r3, [pc, #12]	; (8002460 <ssd1306_WriteChar+0x10c>)
 8002454:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002456:	7bfb      	ldrb	r3, [r7, #15]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3724      	adds	r7, #36	; 0x24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd90      	pop	{r4, r7, pc}
 8002460:	200009e8 	.word	0x200009e8

08002464 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	1d38      	adds	r0, r7, #4
 800246e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002472:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002474:	e012      	b.n	800249c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	7818      	ldrb	r0, [r3, #0]
 800247a:	78fb      	ldrb	r3, [r7, #3]
 800247c:	1d3a      	adds	r2, r7, #4
 800247e:	ca06      	ldmia	r2, {r1, r2}
 8002480:	f7ff ff68 	bl	8002354 <ssd1306_WriteChar>
 8002484:	4603      	mov	r3, r0
 8002486:	461a      	mov	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d002      	beq.n	8002496 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	e008      	b.n	80024a8 <ssd1306_WriteString+0x44>
        }
        str++;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3301      	adds	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1e8      	bne.n	8002476 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	781b      	ldrb	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	460a      	mov	r2, r1
 80024ba:	71fb      	strb	r3, [r7, #7]
 80024bc:	4613      	mov	r3, r2
 80024be:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <ssd1306_SetCursor+0x2c>)
 80024c6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80024c8:	79bb      	ldrb	r3, [r7, #6]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <ssd1306_SetCursor+0x2c>)
 80024ce:	805a      	strh	r2, [r3, #2]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	200009e8 	.word	0x200009e8

080024e0 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b089      	sub	sp, #36	; 0x24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4604      	mov	r4, r0
 80024e8:	4608      	mov	r0, r1
 80024ea:	4611      	mov	r1, r2
 80024ec:	461a      	mov	r2, r3
 80024ee:	4623      	mov	r3, r4
 80024f0:	71fb      	strb	r3, [r7, #7]
 80024f2:	4603      	mov	r3, r0
 80024f4:	71bb      	strb	r3, [r7, #6]
 80024f6:	460b      	mov	r3, r1
 80024f8:	717b      	strb	r3, [r7, #5]
 80024fa:	4613      	mov	r3, r2
 80024fc:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80024fe:	797a      	ldrb	r2, [r7, #5]
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	bfb8      	it	lt
 8002508:	425b      	neglt	r3, r3
 800250a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 800250c:	793a      	ldrb	r2, [r7, #4]
 800250e:	79bb      	ldrb	r3, [r7, #6]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	bfb8      	it	lt
 8002516:	425b      	neglt	r3, r3
 8002518:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800251a:	79fa      	ldrb	r2, [r7, #7]
 800251c:	797b      	ldrb	r3, [r7, #5]
 800251e:	429a      	cmp	r2, r3
 8002520:	d201      	bcs.n	8002526 <ssd1306_Line+0x46>
 8002522:	2301      	movs	r3, #1
 8002524:	e001      	b.n	800252a <ssd1306_Line+0x4a>
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800252c:	79ba      	ldrb	r2, [r7, #6]
 800252e:	793b      	ldrb	r3, [r7, #4]
 8002530:	429a      	cmp	r2, r3
 8002532:	d201      	bcs.n	8002538 <ssd1306_Line+0x58>
 8002534:	2301      	movs	r3, #1
 8002536:	e001      	b.n	800253c <ssd1306_Line+0x5c>
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
 800253c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002546:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800254a:	7939      	ldrb	r1, [r7, #4]
 800254c:	797b      	ldrb	r3, [r7, #5]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff feac 	bl	80022ac <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002554:	e024      	b.n	80025a0 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002556:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800255a:	79b9      	ldrb	r1, [r7, #6]
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fea4 	bl	80022ac <ssd1306_DrawPixel>
        error2 = error * 2;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	425b      	negs	r3, r3
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	429a      	cmp	r2, r3
 8002572:	dd08      	ble.n	8002586 <ssd1306_Line+0xa6>
            error -= deltaY;
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	4413      	add	r3, r2
 8002584:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	429a      	cmp	r2, r3
 800258c:	da08      	bge.n	80025a0 <ssd1306_Line+0xc0>
            error += deltaX;
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4413      	add	r3, r2
 8002594:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	b2da      	uxtb	r2, r3
 800259a:	79bb      	ldrb	r3, [r7, #6]
 800259c:	4413      	add	r3, r2
 800259e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80025a0:	79fa      	ldrb	r2, [r7, #7]
 80025a2:	797b      	ldrb	r3, [r7, #5]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d1d6      	bne.n	8002556 <ssd1306_Line+0x76>
 80025a8:	79ba      	ldrb	r2, [r7, #6]
 80025aa:	793b      	ldrb	r3, [r7, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d1d2      	bne.n	8002556 <ssd1306_Line+0x76>
        }
    }
    return;
 80025b0:	bf00      	nop
}
 80025b2:	3724      	adds	r7, #36	; 0x24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd90      	pop	{r4, r7, pc}

080025b8 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af02      	add	r7, sp, #8
 80025be:	4604      	mov	r4, r0
 80025c0:	4608      	mov	r0, r1
 80025c2:	4611      	mov	r1, r2
 80025c4:	461a      	mov	r2, r3
 80025c6:	4623      	mov	r3, r4
 80025c8:	71fb      	strb	r3, [r7, #7]
 80025ca:	4603      	mov	r3, r0
 80025cc:	71bb      	strb	r3, [r7, #6]
 80025ce:	460b      	mov	r3, r1
 80025d0:	717b      	strb	r3, [r7, #5]
 80025d2:	4613      	mov	r3, r2
 80025d4:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80025d6:	79bc      	ldrb	r4, [r7, #6]
 80025d8:	797a      	ldrb	r2, [r7, #5]
 80025da:	79b9      	ldrb	r1, [r7, #6]
 80025dc:	79f8      	ldrb	r0, [r7, #7]
 80025de:	7e3b      	ldrb	r3, [r7, #24]
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	4623      	mov	r3, r4
 80025e4:	f7ff ff7c 	bl	80024e0 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80025e8:	793c      	ldrb	r4, [r7, #4]
 80025ea:	797a      	ldrb	r2, [r7, #5]
 80025ec:	79b9      	ldrb	r1, [r7, #6]
 80025ee:	7978      	ldrb	r0, [r7, #5]
 80025f0:	7e3b      	ldrb	r3, [r7, #24]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	4623      	mov	r3, r4
 80025f6:	f7ff ff73 	bl	80024e0 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80025fa:	793c      	ldrb	r4, [r7, #4]
 80025fc:	79fa      	ldrb	r2, [r7, #7]
 80025fe:	7939      	ldrb	r1, [r7, #4]
 8002600:	7978      	ldrb	r0, [r7, #5]
 8002602:	7e3b      	ldrb	r3, [r7, #24]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	4623      	mov	r3, r4
 8002608:	f7ff ff6a 	bl	80024e0 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 800260c:	79bc      	ldrb	r4, [r7, #6]
 800260e:	79fa      	ldrb	r2, [r7, #7]
 8002610:	7939      	ldrb	r1, [r7, #4]
 8002612:	79f8      	ldrb	r0, [r7, #7]
 8002614:	7e3b      	ldrb	r3, [r7, #24]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	4623      	mov	r3, r4
 800261a:	f7ff ff61 	bl	80024e0 <ssd1306_Line>

    return;
 800261e:	bf00      	nop
}
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bd90      	pop	{r4, r7, pc}

08002626 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002626:	b590      	push	{r4, r7, lr}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	4604      	mov	r4, r0
 800262e:	4608      	mov	r0, r1
 8002630:	4611      	mov	r1, r2
 8002632:	461a      	mov	r2, r3
 8002634:	4623      	mov	r3, r4
 8002636:	71fb      	strb	r3, [r7, #7]
 8002638:	4603      	mov	r3, r0
 800263a:	71bb      	strb	r3, [r7, #6]
 800263c:	460b      	mov	r3, r1
 800263e:	717b      	strb	r3, [r7, #5]
 8002640:	4613      	mov	r3, r2
 8002642:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002644:	79fa      	ldrb	r2, [r7, #7]
 8002646:	797b      	ldrb	r3, [r7, #5]
 8002648:	4293      	cmp	r3, r2
 800264a:	bf28      	it	cs
 800264c:	4613      	movcs	r3, r2
 800264e:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002650:	797a      	ldrb	r2, [r7, #5]
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	4293      	cmp	r3, r2
 8002656:	bf38      	it	cc
 8002658:	4613      	movcc	r3, r2
 800265a:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800265c:	79ba      	ldrb	r2, [r7, #6]
 800265e:	793b      	ldrb	r3, [r7, #4]
 8002660:	4293      	cmp	r3, r2
 8002662:	bf28      	it	cs
 8002664:	4613      	movcs	r3, r2
 8002666:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002668:	793a      	ldrb	r2, [r7, #4]
 800266a:	79bb      	ldrb	r3, [r7, #6]
 800266c:	4293      	cmp	r3, r2
 800266e:	bf38      	it	cc
 8002670:	4613      	movcc	r3, r2
 8002672:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002674:	7afb      	ldrb	r3, [r7, #11]
 8002676:	73fb      	strb	r3, [r7, #15]
 8002678:	e017      	b.n	80026aa <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800267a:	7b7b      	ldrb	r3, [r7, #13]
 800267c:	73bb      	strb	r3, [r7, #14]
 800267e:	e009      	b.n	8002694 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002680:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002684:	7bf9      	ldrb	r1, [r7, #15]
 8002686:	7bbb      	ldrb	r3, [r7, #14]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fe0f 	bl	80022ac <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800268e:	7bbb      	ldrb	r3, [r7, #14]
 8002690:	3301      	adds	r3, #1
 8002692:	73bb      	strb	r3, [r7, #14]
 8002694:	7bba      	ldrb	r2, [r7, #14]
 8002696:	7b3b      	ldrb	r3, [r7, #12]
 8002698:	429a      	cmp	r2, r3
 800269a:	d803      	bhi.n	80026a4 <ssd1306_FillRectangle+0x7e>
 800269c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	daed      	bge.n	8002680 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	3301      	adds	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	7abb      	ldrb	r3, [r7, #10]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d803      	bhi.n	80026ba <ssd1306_FillRectangle+0x94>
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	2b3f      	cmp	r3, #63	; 0x3f
 80026b6:	d9e0      	bls.n	800267a <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
}
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd90      	pop	{r4, r7, pc}

080026c2 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80026cc:	2381      	movs	r3, #129	; 0x81
 80026ce:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fd0e 	bl	80020f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fd0a 	bl	80020f4 <ssd1306_WriteCommand>
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80026f8:	23af      	movs	r3, #175	; 0xaf
 80026fa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <ssd1306_SetDisplayOn+0x38>)
 80026fe:	2201      	movs	r2, #1
 8002700:	715a      	strb	r2, [r3, #5]
 8002702:	e004      	b.n	800270e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002704:	23ae      	movs	r3, #174	; 0xae
 8002706:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <ssd1306_SetDisplayOn+0x38>)
 800270a:	2200      	movs	r2, #0
 800270c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fcef 	bl	80020f4 <ssd1306_WriteCommand>
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200009e8 	.word	0x200009e8

08002724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <HAL_MspInit+0x4c>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <HAL_MspInit+0x4c>)
 8002734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002738:	6453      	str	r3, [r2, #68]	; 0x44
 800273a:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <HAL_MspInit+0x4c>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	603b      	str	r3, [r7, #0]
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_MspInit+0x4c>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4a08      	ldr	r2, [pc, #32]	; (8002770 <HAL_MspInit+0x4c>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002754:	6413      	str	r3, [r2, #64]	; 0x40
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_MspInit+0x4c>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800

08002774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <NMI_Handler+0x4>

0800277a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277e:	e7fe      	b.n	800277e <HardFault_Handler+0x4>

08002780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <MemManage_Handler+0x4>

08002786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002786:	b480      	push	{r7}
 8002788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800278a:	e7fe      	b.n	800278a <BusFault_Handler+0x4>

0800278c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <UsageFault_Handler+0x4>

08002792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027c0:	f000 fac4 	bl	8002d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AC_VOLTAGE_MODE_Pin);
 80027cc:	2001      	movs	r0, #1
 80027ce:	f001 f9f3 	bl	8003bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DC_VOLTAGE_MODE_RANGE_1_Pin);
 80027da:	2002      	movs	r0, #2
 80027dc:	f001 f9ec 	bl	8003bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DC_VOLTAGE_MODE_RANGE_2_Pin);
 80027e8:	2004      	movs	r0, #4
 80027ea:	f001 f9e5 	bl	8003bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DC_VOLTAGE_MODE_RANGE_3_Pin);
 80027f6:	2008      	movs	r0, #8
 80027f8:	f001 f9de 	bl	8003bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}

08002800 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESISTANCE_MODE_RANGE_1_Pin);
 8002804:	2010      	movs	r0, #16
 8002806:	f001 f9d7 	bl	8003bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <ADC_IRQHandler+0x10>)
 8002816:	f000 fbdf 	bl	8002fd8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000204 	.word	0x20000204

08002824 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESISTANCE_MODE_RANGE_2_Pin);
 8002828:	2020      	movs	r0, #32
 800282a:	f001 f9c5 	bl	8003bb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RESISTANCE_MODE_RANGE_3_Pin);
 800282e:	2040      	movs	r0, #64	; 0x40
 8002830:	f001 f9c2 	bl	8003bb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAPACITY_MODE_RANGE_1_Pin);
 8002834:	2080      	movs	r0, #128	; 0x80
 8002836:	f001 f9bf 	bl	8003bb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAPACITY_MODE_RANGE_2_Pin);
 800283a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800283e:	f001 f9bb 	bl	8003bb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAPACITY_MODE_RANGE_3_Pin);
 8002842:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002846:	f001 f9b7 	bl	8003bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002854:	4802      	ldr	r0, [pc, #8]	; (8002860 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002856:	f002 fbe2 	bl	800501e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	200009f4 	.word	0x200009f4

08002864 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return 1;
 8002868:	2301      	movs	r3, #1
}
 800286a:	4618      	mov	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <_kill>:

int _kill(int pid, int sig)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800287e:	f004 f871 	bl	8006964 <__errno>
 8002882:	4603      	mov	r3, r0
 8002884:	2216      	movs	r2, #22
 8002886:	601a      	str	r2, [r3, #0]
  return -1;
 8002888:	f04f 33ff 	mov.w	r3, #4294967295
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_exit>:

void _exit (int status)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800289c:	f04f 31ff 	mov.w	r1, #4294967295
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff ffe7 	bl	8002874 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028a6:	e7fe      	b.n	80028a6 <_exit+0x12>

080028a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	e00a      	b.n	80028d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028ba:	f3af 8000 	nop.w
 80028be:	4601      	mov	r1, r0
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	60ba      	str	r2, [r7, #8]
 80028c6:	b2ca      	uxtb	r2, r1
 80028c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3301      	adds	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	dbf0      	blt.n	80028ba <_read+0x12>
  }

  return len;
 80028d8:	687b      	ldr	r3, [r7, #4]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b086      	sub	sp, #24
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	e009      	b.n	8002908 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	60ba      	str	r2, [r7, #8]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	3301      	adds	r3, #1
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	dbf1      	blt.n	80028f4 <_write+0x12>
  }
  return len;
 8002910:	687b      	ldr	r3, [r7, #4]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <_close>:

int _close(int file)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002922:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002942:	605a      	str	r2, [r3, #4]
  return 0;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <_isatty>:

int _isatty(int file)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800295a:	2301      	movs	r3, #1
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800298c:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <_sbrk+0x5c>)
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <_sbrk+0x60>)
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002998:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <_sbrk+0x64>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <_sbrk+0x64>)
 80029a2:	4a12      	ldr	r2, [pc, #72]	; (80029ec <_sbrk+0x68>)
 80029a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d207      	bcs.n	80029c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029b4:	f003 ffd6 	bl	8006964 <__errno>
 80029b8:	4603      	mov	r3, r0
 80029ba:	220c      	movs	r2, #12
 80029bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029be:	f04f 33ff 	mov.w	r3, #4294967295
 80029c2:	e009      	b.n	80029d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <_sbrk+0x64>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ca:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <_sbrk+0x64>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	4a05      	ldr	r2, [pc, #20]	; (80029e8 <_sbrk+0x64>)
 80029d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029d6:	68fb      	ldr	r3, [r7, #12]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20018000 	.word	0x20018000
 80029e4:	00000400 	.word	0x00000400
 80029e8:	200009f0 	.word	0x200009f0
 80029ec:	20000bd8 	.word	0x20000bd8

080029f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <SystemInit+0x20>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <SystemInit+0x20>)
 80029fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	e000ed00 	.word	0xe000ed00

08002a14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a1a:	f107 0308 	add.w	r3, r7, #8
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	609a      	str	r2, [r3, #8]
 8002a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a28:	463b      	mov	r3, r7
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a30:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <MX_TIM1_Init+0x9c>)
 8002a32:	4a20      	ldr	r2, [pc, #128]	; (8002ab4 <MX_TIM1_Init+0xa0>)
 8002a34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8399;
 8002a36:	4b1e      	ldr	r3, [pc, #120]	; (8002ab0 <MX_TIM1_Init+0x9c>)
 8002a38:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002a3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3e:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <MX_TIM1_Init+0x9c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002a44:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <MX_TIM1_Init+0x9c>)
 8002a46:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <MX_TIM1_Init+0x9c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a52:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <MX_TIM1_Init+0x9c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a58:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <MX_TIM1_Init+0x9c>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a5e:	4814      	ldr	r0, [pc, #80]	; (8002ab0 <MX_TIM1_Init+0x9c>)
 8002a60:	f002 f9a2 	bl	8004da8 <HAL_TIM_Base_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002a6a:	f7ff fb37 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a74:	f107 0308 	add.w	r3, r7, #8
 8002a78:	4619      	mov	r1, r3
 8002a7a:	480d      	ldr	r0, [pc, #52]	; (8002ab0 <MX_TIM1_Init+0x9c>)
 8002a7c:	f002 fbd7 	bl	800522e <HAL_TIM_ConfigClockSource>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002a86:	f7ff fb29 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002a8a:	2310      	movs	r3, #16
 8002a8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a92:	463b      	mov	r3, r7
 8002a94:	4619      	mov	r1, r3
 8002a96:	4806      	ldr	r0, [pc, #24]	; (8002ab0 <MX_TIM1_Init+0x9c>)
 8002a98:	f002 fea6 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002aa2:	f7ff fb1b 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	200009f4 	.word	0x200009f4
 8002ab4:	40010000 	.word	0x40010000

08002ab8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08c      	sub	sp, #48	; 0x30
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002abe:	f107 0320 	add.w	r3, r7, #32
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002acc:	f107 030c 	add.w	r3, r7, #12
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	2200      	movs	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ae4:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <MX_TIM2_Init+0xd0>)
 8002ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002aec:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <MX_TIM2_Init+0xd0>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af2:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <MX_TIM2_Init+0xd0>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002af8:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <MX_TIM2_Init+0xd0>)
 8002afa:	f04f 32ff 	mov.w	r2, #4294967295
 8002afe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b00:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <MX_TIM2_Init+0xd0>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <MX_TIM2_Init+0xd0>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b0c:	481e      	ldr	r0, [pc, #120]	; (8002b88 <MX_TIM2_Init+0xd0>)
 8002b0e:	f002 f94b 	bl	8004da8 <HAL_TIM_Base_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8002b18:	f7ff fae0 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b20:	623b      	str	r3, [r7, #32]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002b22:	2300      	movs	r3, #0
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002b26:	2300      	movs	r3, #0
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
  sClockSourceConfig.ClockFilter = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b2e:	f107 0320 	add.w	r3, r7, #32
 8002b32:	4619      	mov	r1, r3
 8002b34:	4814      	ldr	r0, [pc, #80]	; (8002b88 <MX_TIM2_Init+0xd0>)
 8002b36:	f002 fb7a 	bl	800522e <HAL_TIM_ConfigClockSource>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002b40:	f7ff facc 	bl	80020dc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002b44:	2305      	movs	r3, #5
 8002b46:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002b4c:	f107 030c 	add.w	r3, r7, #12
 8002b50:	4619      	mov	r1, r3
 8002b52:	480d      	ldr	r0, [pc, #52]	; (8002b88 <MX_TIM2_Init+0xd0>)
 8002b54:	f002 fc32 	bl	80053bc <HAL_TIM_SlaveConfigSynchro>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002b5e:	f7ff fabd 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b62:	2320      	movs	r3, #32
 8002b64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b6a:	1d3b      	adds	r3, r7, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4806      	ldr	r0, [pc, #24]	; (8002b88 <MX_TIM2_Init+0xd0>)
 8002b70:	f002 fe3a 	bl	80057e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002b7a:	f7ff faaf 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b7e:	bf00      	nop
 8002b80:	3730      	adds	r7, #48	; 0x30
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000a3c 	.word	0x20000a3c

08002b8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a27      	ldr	r2, [pc, #156]	; (8002c48 <HAL_TIM_Base_MspInit+0xbc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d116      	bne.n	8002bdc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	4b26      	ldr	r3, [pc, #152]	; (8002c4c <HAL_TIM_Base_MspInit+0xc0>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	4a25      	ldr	r2, [pc, #148]	; (8002c4c <HAL_TIM_Base_MspInit+0xc0>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bbe:	4b23      	ldr	r3, [pc, #140]	; (8002c4c <HAL_TIM_Base_MspInit+0xc0>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2101      	movs	r1, #1
 8002bce:	2019      	movs	r0, #25
 8002bd0:	f000 fe37 	bl	8003842 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002bd4:	2019      	movs	r0, #25
 8002bd6:	f000 fe50 	bl	800387a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002bda:	e030      	b.n	8002c3e <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be4:	d12b      	bne.n	8002c3e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <HAL_TIM_Base_MspInit+0xc0>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <HAL_TIM_Base_MspInit+0xc0>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <HAL_TIM_Base_MspInit+0xc0>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <HAL_TIM_Base_MspInit+0xc0>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <HAL_TIM_Base_MspInit+0xc0>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6313      	str	r3, [r2, #48]	; 0x30
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <HAL_TIM_Base_MspInit+0xc0>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FREQUENCY_INPUT_Pin;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FREQUENCY_INPUT_GPIO_Port, &GPIO_InitStruct);
 8002c32:	f107 0314 	add.w	r3, r7, #20
 8002c36:	4619      	mov	r1, r3
 8002c38:	4805      	ldr	r0, [pc, #20]	; (8002c50 <HAL_TIM_Base_MspInit+0xc4>)
 8002c3a:	f000 fe39 	bl	80038b0 <HAL_GPIO_Init>
}
 8002c3e:	bf00      	nop
 8002c40:	3728      	adds	r7, #40	; 0x28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40020000 	.word	0x40020000

08002c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c58:	480d      	ldr	r0, [pc, #52]	; (8002c90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c5a:	490e      	ldr	r1, [pc, #56]	; (8002c94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c5c:	4a0e      	ldr	r2, [pc, #56]	; (8002c98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c60:	e002      	b.n	8002c68 <LoopCopyDataInit>

08002c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c66:	3304      	adds	r3, #4

08002c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c6c:	d3f9      	bcc.n	8002c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c70:	4c0b      	ldr	r4, [pc, #44]	; (8002ca0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c74:	e001      	b.n	8002c7a <LoopFillZerobss>

08002c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c78:	3204      	adds	r2, #4

08002c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c7c:	d3fb      	bcc.n	8002c76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c7e:	f7ff feb7 	bl	80029f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c82:	f003 fe75 	bl	8006970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c86:	f7ff f96b 	bl	8001f60 <main>
  bx  lr    
 8002c8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c94:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002c98:	0800ba48 	.word	0x0800ba48
  ldr r2, =_sbss
 8002c9c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002ca0:	20000bd4 	.word	0x20000bd4

08002ca4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ca4:	e7fe      	b.n	8002ca4 <DMA1_Stream0_IRQHandler>
	...

08002ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <HAL_Init+0x40>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ce8 <HAL_Init+0x40>)
 8002cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_Init+0x40>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <HAL_Init+0x40>)
 8002cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_Init+0x40>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a07      	ldr	r2, [pc, #28]	; (8002ce8 <HAL_Init+0x40>)
 8002cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd0:	2003      	movs	r0, #3
 8002cd2:	f000 fdab 	bl	800382c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cd6:	200f      	movs	r0, #15
 8002cd8:	f000 f808 	bl	8002cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cdc:	f7ff fd22 	bl	8002724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023c00 	.word	0x40023c00

08002cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cf4:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_InitTick+0x54>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_InitTick+0x58>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fdc3 	bl	8003896 <HAL_SYSTICK_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e00e      	b.n	8002d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	d80a      	bhi.n	8002d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d20:	2200      	movs	r2, #0
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295
 8002d28:	f000 fd8b 	bl	8003842 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d2c:	4a06      	ldr	r2, [pc, #24]	; (8002d48 <HAL_InitTick+0x5c>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000014 	.word	0x20000014
 8002d44:	2000001c 	.word	0x2000001c
 8002d48:	20000018 	.word	0x20000018

08002d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_IncTick+0x20>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_IncTick+0x24>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <HAL_IncTick+0x24>)
 8002d5e:	6013      	str	r3, [r2, #0]
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	2000001c 	.word	0x2000001c
 8002d70:	20000a84 	.word	0x20000a84

08002d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return uwTick;
 8002d78:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <HAL_GetTick+0x14>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000a84 	.word	0x20000a84

08002d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7ff ffee 	bl	8002d74 <HAL_GetTick>
 8002d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d005      	beq.n	8002db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_Delay+0x44>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002db2:	bf00      	nop
 8002db4:	f7ff ffde 	bl	8002d74 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d8f7      	bhi.n	8002db4 <HAL_Delay+0x28>
  {
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	2000001c 	.word	0x2000001c

08002dd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e033      	b.n	8002e52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe f968 	bl	80010c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d118      	bne.n	8002e44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e1a:	f023 0302 	bic.w	r3, r3, #2
 8002e1e:	f043 0202 	orr.w	r2, r3, #2
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fb2a 	bl	8003480 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f023 0303 	bic.w	r3, r3, #3
 8002e3a:	f043 0201 	orr.w	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
 8002e42:	e001      	b.n	8002e48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_ADC_Start_IT+0x1a>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e0a1      	b.n	8002fba <HAL_ADC_Start_IT+0x15e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d018      	beq.n	8002ebe <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e9c:	4b4a      	ldr	r3, [pc, #296]	; (8002fc8 <HAL_ADC_Start_IT+0x16c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a4a      	ldr	r2, [pc, #296]	; (8002fcc <HAL_ADC_Start_IT+0x170>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	0c9a      	lsrs	r2, r3, #18
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002eb0:	e002      	b.n	8002eb8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f9      	bne.n	8002eb2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d169      	bne.n	8002fa0 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ef6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0a:	d106      	bne.n	8002f1a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	f023 0206 	bic.w	r2, r3, #6
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44
 8002f18:	e002      	b.n	8002f20 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f28:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <HAL_ADC_Start_IT+0x174>)
 8002f2a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f34:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f44:	f043 0320 	orr.w	r3, r3, #32
 8002f48:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10f      	bne.n	8002f76 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d129      	bne.n	8002fb8 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	e020      	b.n	8002fb8 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <HAL_ADC_Start_IT+0x178>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_ADC_Start_IT+0x15c>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d114      	bne.n	8002fb8 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f9c:	609a      	str	r2, [r3, #8]
 8002f9e:	e00b      	b.n	8002fb8 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f043 0210 	orr.w	r2, r3, #16
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	f043 0201 	orr.w	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	20000014 	.word	0x20000014
 8002fcc:	431bde83 	.word	0x431bde83
 8002fd0:	40012300 	.word	0x40012300
 8002fd4:	40012000 	.word	0x40012000

08002fd8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d049      	beq.n	80030a2 <HAL_ADC_IRQHandler+0xca>
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d046      	beq.n	80030a2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	d105      	bne.n	800302c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d12b      	bne.n	8003092 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800303e:	2b00      	cmp	r3, #0
 8003040:	d127      	bne.n	8003092 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800305a:	2b00      	cmp	r3, #0
 800305c:	d119      	bne.n	8003092 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0220 	bic.w	r2, r2, #32
 800306c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d105      	bne.n	8003092 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f043 0201 	orr.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe f9fc 	bl	8001490 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0212 	mvn.w	r2, #18
 80030a0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d057      	beq.n	8003168 <HAL_ADC_IRQHandler+0x190>
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d054      	beq.n	8003168 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d139      	bne.n	8003158 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d006      	beq.n	8003100 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d12b      	bne.n	8003158 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800310a:	2b00      	cmp	r3, #0
 800310c:	d124      	bne.n	8003158 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003118:	2b00      	cmp	r3, #0
 800311a:	d11d      	bne.n	8003158 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003120:	2b00      	cmp	r3, #0
 8003122:	d119      	bne.n	8003158 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003132:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	f043 0201 	orr.w	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fa8d 	bl	8003678 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f06f 020c 	mvn.w	r2, #12
 8003166:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003176:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d017      	beq.n	80031ae <HAL_ADC_IRQHandler+0x1d6>
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d014      	beq.n	80031ae <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b01      	cmp	r3, #1
 8003190:	d10d      	bne.n	80031ae <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f837 	bl	8003212 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0201 	mvn.w	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031bc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d015      	beq.n	80031f0 <HAL_ADC_IRQHandler+0x218>
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d012      	beq.n	80031f0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	f043 0202 	orr.w	r2, r3, #2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f06f 0220 	mvn.w	r2, #32
 80031de:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f820 	bl	8003226 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f06f 0220 	mvn.w	r2, #32
 80031ee:	601a      	str	r2, [r3, #0]
  }
}
 80031f0:	bf00      	nop
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x1c>
 8003254:	2302      	movs	r3, #2
 8003256:	e105      	b.n	8003464 <HAL_ADC_ConfigChannel+0x228>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b09      	cmp	r3, #9
 8003266:	d925      	bls.n	80032b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68d9      	ldr	r1, [r3, #12]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	4613      	mov	r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	4413      	add	r3, r2
 800327c:	3b1e      	subs	r3, #30
 800327e:	2207      	movs	r2, #7
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43da      	mvns	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	400a      	ands	r2, r1
 800328c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68d9      	ldr	r1, [r3, #12]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	4618      	mov	r0, r3
 80032a0:	4603      	mov	r3, r0
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4403      	add	r3, r0
 80032a6:	3b1e      	subs	r3, #30
 80032a8:	409a      	lsls	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	e022      	b.n	80032fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6919      	ldr	r1, [r3, #16]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	4613      	mov	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	4413      	add	r3, r2
 80032c8:	2207      	movs	r2, #7
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43da      	mvns	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	400a      	ands	r2, r1
 80032d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6919      	ldr	r1, [r3, #16]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	4618      	mov	r0, r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4403      	add	r3, r0
 80032f0:	409a      	lsls	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d824      	bhi.n	800334c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	3b05      	subs	r3, #5
 8003314:	221f      	movs	r2, #31
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43da      	mvns	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	400a      	ands	r2, r1
 8003322:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	4618      	mov	r0, r3
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	3b05      	subs	r3, #5
 800333e:	fa00 f203 	lsl.w	r2, r0, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	635a      	str	r2, [r3, #52]	; 0x34
 800334a:	e04c      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b0c      	cmp	r3, #12
 8003352:	d824      	bhi.n	800339e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	3b23      	subs	r3, #35	; 0x23
 8003366:	221f      	movs	r2, #31
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43da      	mvns	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	400a      	ands	r2, r1
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	b29b      	uxth	r3, r3
 8003382:	4618      	mov	r0, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	3b23      	subs	r3, #35	; 0x23
 8003390:	fa00 f203 	lsl.w	r2, r0, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
 800339c:	e023      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	3b41      	subs	r3, #65	; 0x41
 80033b0:	221f      	movs	r2, #31
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43da      	mvns	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	400a      	ands	r2, r1
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	4618      	mov	r0, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	3b41      	subs	r3, #65	; 0x41
 80033da:	fa00 f203 	lsl.w	r2, r0, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <HAL_ADC_ConfigChannel+0x234>)
 80033e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a21      	ldr	r2, [pc, #132]	; (8003474 <HAL_ADC_ConfigChannel+0x238>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d109      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1cc>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b12      	cmp	r3, #18
 80033fa:	d105      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a19      	ldr	r2, [pc, #100]	; (8003474 <HAL_ADC_ConfigChannel+0x238>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d123      	bne.n	800345a <HAL_ADC_ConfigChannel+0x21e>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b10      	cmp	r3, #16
 8003418:	d003      	beq.n	8003422 <HAL_ADC_ConfigChannel+0x1e6>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b11      	cmp	r3, #17
 8003420:	d11b      	bne.n	800345a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b10      	cmp	r3, #16
 8003434:	d111      	bne.n	800345a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <HAL_ADC_ConfigChannel+0x23c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a10      	ldr	r2, [pc, #64]	; (800347c <HAL_ADC_ConfigChannel+0x240>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	0c9a      	lsrs	r2, r3, #18
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800344c:	e002      	b.n	8003454 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	3b01      	subs	r3, #1
 8003452:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f9      	bne.n	800344e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40012300 	.word	0x40012300
 8003474:	40012000 	.word	0x40012000
 8003478:	20000014 	.word	0x20000014
 800347c:	431bde83 	.word	0x431bde83

08003480 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003488:	4b79      	ldr	r3, [pc, #484]	; (8003670 <ADC_Init+0x1f0>)
 800348a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	021a      	lsls	r2, r3, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6899      	ldr	r1, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	4a58      	ldr	r2, [pc, #352]	; (8003674 <ADC_Init+0x1f4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d022      	beq.n	800355e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003526:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6899      	ldr	r1, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003548:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6899      	ldr	r1, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	e00f      	b.n	800357e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800356c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800357c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0202 	bic.w	r2, r2, #2
 800358c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6899      	ldr	r1, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	7e1b      	ldrb	r3, [r3, #24]
 8003598:	005a      	lsls	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01b      	beq.n	80035e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6859      	ldr	r1, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	3b01      	subs	r3, #1
 80035d8:	035a      	lsls	r2, r3, #13
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	e007      	b.n	80035f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	3b01      	subs	r3, #1
 8003610:	051a      	lsls	r2, r3, #20
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6899      	ldr	r1, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003636:	025a      	lsls	r2, r3, #9
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6899      	ldr	r1, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	029a      	lsls	r2, r3, #10
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	609a      	str	r2, [r3, #8]
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40012300 	.word	0x40012300
 8003674:	0f000001 	.word	0x0f000001

08003678 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800369c:	4b0c      	ldr	r3, [pc, #48]	; (80036d0 <__NVIC_SetPriorityGrouping+0x44>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036a8:	4013      	ands	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036be:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <__NVIC_SetPriorityGrouping+0x44>)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	60d3      	str	r3, [r2, #12]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <__NVIC_GetPriorityGrouping+0x18>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	f003 0307 	and.w	r3, r3, #7
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	db0b      	blt.n	800371a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	f003 021f 	and.w	r2, r3, #31
 8003708:	4907      	ldr	r1, [pc, #28]	; (8003728 <__NVIC_EnableIRQ+0x38>)
 800370a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	2001      	movs	r0, #1
 8003712:	fa00 f202 	lsl.w	r2, r0, r2
 8003716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	e000e100 	.word	0xe000e100

0800372c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	6039      	str	r1, [r7, #0]
 8003736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373c:	2b00      	cmp	r3, #0
 800373e:	db0a      	blt.n	8003756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	490c      	ldr	r1, [pc, #48]	; (8003778 <__NVIC_SetPriority+0x4c>)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	0112      	lsls	r2, r2, #4
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	440b      	add	r3, r1
 8003750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003754:	e00a      	b.n	800376c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4908      	ldr	r1, [pc, #32]	; (800377c <__NVIC_SetPriority+0x50>)
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	3b04      	subs	r3, #4
 8003764:	0112      	lsls	r2, r2, #4
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	440b      	add	r3, r1
 800376a:	761a      	strb	r2, [r3, #24]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000e100 	.word	0xe000e100
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f1c3 0307 	rsb	r3, r3, #7
 800379a:	2b04      	cmp	r3, #4
 800379c:	bf28      	it	cs
 800379e:	2304      	movcs	r3, #4
 80037a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d902      	bls.n	80037b0 <NVIC_EncodePriority+0x30>
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3b03      	subs	r3, #3
 80037ae:	e000      	b.n	80037b2 <NVIC_EncodePriority+0x32>
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43da      	mvns	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	401a      	ands	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	43d9      	mvns	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	4313      	orrs	r3, r2
         );
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3724      	adds	r7, #36	; 0x24
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037f8:	d301      	bcc.n	80037fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037fa:	2301      	movs	r3, #1
 80037fc:	e00f      	b.n	800381e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037fe:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <SysTick_Config+0x40>)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3b01      	subs	r3, #1
 8003804:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003806:	210f      	movs	r1, #15
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	f7ff ff8e 	bl	800372c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <SysTick_Config+0x40>)
 8003812:	2200      	movs	r2, #0
 8003814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <SysTick_Config+0x40>)
 8003818:	2207      	movs	r2, #7
 800381a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	e000e010 	.word	0xe000e010

0800382c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ff29 	bl	800368c <__NVIC_SetPriorityGrouping>
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003842:	b580      	push	{r7, lr}
 8003844:	b086      	sub	sp, #24
 8003846:	af00      	add	r7, sp, #0
 8003848:	4603      	mov	r3, r0
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003854:	f7ff ff3e 	bl	80036d4 <__NVIC_GetPriorityGrouping>
 8003858:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68b9      	ldr	r1, [r7, #8]
 800385e:	6978      	ldr	r0, [r7, #20]
 8003860:	f7ff ff8e 	bl	8003780 <NVIC_EncodePriority>
 8003864:	4602      	mov	r2, r0
 8003866:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff ff5d 	bl	800372c <__NVIC_SetPriority>
}
 8003872:	bf00      	nop
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	4603      	mov	r3, r0
 8003882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff ff31 	bl	80036f0 <__NVIC_EnableIRQ>
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b082      	sub	sp, #8
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff ffa2 	bl	80037e8 <SysTick_Config>
 80038a4:	4603      	mov	r3, r0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b089      	sub	sp, #36	; 0x24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	e159      	b.n	8003b80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038cc:	2201      	movs	r2, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	f040 8148 	bne.w	8003b7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d005      	beq.n	8003902 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d130      	bne.n	8003964 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	2203      	movs	r2, #3
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4013      	ands	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003938:	2201      	movs	r2, #1
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43db      	mvns	r3, r3
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4013      	ands	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	091b      	lsrs	r3, r3, #4
 800394e:	f003 0201 	and.w	r2, r3, #1
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b03      	cmp	r3, #3
 800396e:	d017      	beq.n	80039a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d123      	bne.n	80039f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	08da      	lsrs	r2, r3, #3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3208      	adds	r2, #8
 80039b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	220f      	movs	r2, #15
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	691a      	ldr	r2, [r3, #16]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	08da      	lsrs	r2, r3, #3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3208      	adds	r2, #8
 80039ee:	69b9      	ldr	r1, [r7, #24]
 80039f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 0203 	and.w	r2, r3, #3
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80a2 	beq.w	8003b7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	4b57      	ldr	r3, [pc, #348]	; (8003b98 <HAL_GPIO_Init+0x2e8>)
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	4a56      	ldr	r2, [pc, #344]	; (8003b98 <HAL_GPIO_Init+0x2e8>)
 8003a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a44:	6453      	str	r3, [r2, #68]	; 0x44
 8003a46:	4b54      	ldr	r3, [pc, #336]	; (8003b98 <HAL_GPIO_Init+0x2e8>)
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a52:	4a52      	ldr	r2, [pc, #328]	; (8003b9c <HAL_GPIO_Init+0x2ec>)
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	089b      	lsrs	r3, r3, #2
 8003a58:	3302      	adds	r3, #2
 8003a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	220f      	movs	r2, #15
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4013      	ands	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a49      	ldr	r2, [pc, #292]	; (8003ba0 <HAL_GPIO_Init+0x2f0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d019      	beq.n	8003ab2 <HAL_GPIO_Init+0x202>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a48      	ldr	r2, [pc, #288]	; (8003ba4 <HAL_GPIO_Init+0x2f4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_GPIO_Init+0x1fe>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a47      	ldr	r2, [pc, #284]	; (8003ba8 <HAL_GPIO_Init+0x2f8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00d      	beq.n	8003aaa <HAL_GPIO_Init+0x1fa>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a46      	ldr	r2, [pc, #280]	; (8003bac <HAL_GPIO_Init+0x2fc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <HAL_GPIO_Init+0x1f6>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a45      	ldr	r2, [pc, #276]	; (8003bb0 <HAL_GPIO_Init+0x300>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_GPIO_Init+0x1f2>
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	e008      	b.n	8003ab4 <HAL_GPIO_Init+0x204>
 8003aa2:	2307      	movs	r3, #7
 8003aa4:	e006      	b.n	8003ab4 <HAL_GPIO_Init+0x204>
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e004      	b.n	8003ab4 <HAL_GPIO_Init+0x204>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e002      	b.n	8003ab4 <HAL_GPIO_Init+0x204>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_GPIO_Init+0x204>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	f002 0203 	and.w	r2, r2, #3
 8003aba:	0092      	lsls	r2, r2, #2
 8003abc:	4093      	lsls	r3, r2
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ac4:	4935      	ldr	r1, [pc, #212]	; (8003b9c <HAL_GPIO_Init+0x2ec>)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	3302      	adds	r3, #2
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ad2:	4b38      	ldr	r3, [pc, #224]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003af6:	4a2f      	ldr	r2, [pc, #188]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003afc:	4b2d      	ldr	r3, [pc, #180]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b20:	4a24      	ldr	r2, [pc, #144]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b26:	4b23      	ldr	r3, [pc, #140]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4013      	ands	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b4a:	4a1a      	ldr	r2, [pc, #104]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b50:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b74:	4a0f      	ldr	r2, [pc, #60]	; (8003bb4 <HAL_GPIO_Init+0x304>)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	f67f aea2 	bls.w	80038cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	3724      	adds	r7, #36	; 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40013800 	.word	0x40013800
 8003ba0:	40020000 	.word	0x40020000
 8003ba4:	40020400 	.word	0x40020400
 8003ba8:	40020800 	.word	0x40020800
 8003bac:	40020c00 	.word	0x40020c00
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40013c00 	.word	0x40013c00

08003bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	88fb      	ldrh	r3, [r7, #6]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d006      	beq.n	8003bdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bce:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd fbc2 	bl	8001360 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40013c00 	.word	0x40013c00

08003be8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e12b      	b.n	8003e52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fd fb5e 	bl	80012d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2224      	movs	r2, #36	; 0x24
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0201 	bic.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c4c:	f001 f898 	bl	8004d80 <HAL_RCC_GetPCLK1Freq>
 8003c50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4a81      	ldr	r2, [pc, #516]	; (8003e5c <HAL_I2C_Init+0x274>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d807      	bhi.n	8003c6c <HAL_I2C_Init+0x84>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4a80      	ldr	r2, [pc, #512]	; (8003e60 <HAL_I2C_Init+0x278>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	bf94      	ite	ls
 8003c64:	2301      	movls	r3, #1
 8003c66:	2300      	movhi	r3, #0
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	e006      	b.n	8003c7a <HAL_I2C_Init+0x92>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4a7d      	ldr	r2, [pc, #500]	; (8003e64 <HAL_I2C_Init+0x27c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	bf94      	ite	ls
 8003c74:	2301      	movls	r3, #1
 8003c76:	2300      	movhi	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e0e7      	b.n	8003e52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4a78      	ldr	r2, [pc, #480]	; (8003e68 <HAL_I2C_Init+0x280>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	0c9b      	lsrs	r3, r3, #18
 8003c8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4a6a      	ldr	r2, [pc, #424]	; (8003e5c <HAL_I2C_Init+0x274>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d802      	bhi.n	8003cbc <HAL_I2C_Init+0xd4>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	e009      	b.n	8003cd0 <HAL_I2C_Init+0xe8>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	4a69      	ldr	r2, [pc, #420]	; (8003e6c <HAL_I2C_Init+0x284>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	099b      	lsrs	r3, r3, #6
 8003cce:	3301      	adds	r3, #1
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ce2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	495c      	ldr	r1, [pc, #368]	; (8003e5c <HAL_I2C_Init+0x274>)
 8003cec:	428b      	cmp	r3, r1
 8003cee:	d819      	bhi.n	8003d24 <HAL_I2C_Init+0x13c>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1e59      	subs	r1, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cfe:	1c59      	adds	r1, r3, #1
 8003d00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d04:	400b      	ands	r3, r1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_I2C_Init+0x138>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1e59      	subs	r1, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d18:	3301      	adds	r3, #1
 8003d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1e:	e051      	b.n	8003dc4 <HAL_I2C_Init+0x1dc>
 8003d20:	2304      	movs	r3, #4
 8003d22:	e04f      	b.n	8003dc4 <HAL_I2C_Init+0x1dc>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d111      	bne.n	8003d50 <HAL_I2C_Init+0x168>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1e58      	subs	r0, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	440b      	add	r3, r1
 8003d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	e012      	b.n	8003d76 <HAL_I2C_Init+0x18e>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1e58      	subs	r0, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6859      	ldr	r1, [r3, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	0099      	lsls	r1, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d66:	3301      	adds	r3, #1
 8003d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_I2C_Init+0x196>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e022      	b.n	8003dc4 <HAL_I2C_Init+0x1dc>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10e      	bne.n	8003da4 <HAL_I2C_Init+0x1bc>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1e58      	subs	r0, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6859      	ldr	r1, [r3, #4]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	440b      	add	r3, r1
 8003d94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003da2:	e00f      	b.n	8003dc4 <HAL_I2C_Init+0x1dc>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	1e58      	subs	r0, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6859      	ldr	r1, [r3, #4]
 8003dac:	460b      	mov	r3, r1
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	0099      	lsls	r1, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dba:	3301      	adds	r3, #1
 8003dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	6809      	ldr	r1, [r1, #0]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69da      	ldr	r2, [r3, #28]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003df2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6911      	ldr	r1, [r2, #16]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	68d2      	ldr	r2, [r2, #12]
 8003dfe:	4311      	orrs	r1, r2
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	430b      	orrs	r3, r1
 8003e06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695a      	ldr	r2, [r3, #20]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	000186a0 	.word	0x000186a0
 8003e60:	001e847f 	.word	0x001e847f
 8003e64:	003d08ff 	.word	0x003d08ff
 8003e68:	431bde83 	.word	0x431bde83
 8003e6c:	10624dd3 	.word	0x10624dd3

08003e70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	4608      	mov	r0, r1
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	4603      	mov	r3, r0
 8003e80:	817b      	strh	r3, [r7, #10]
 8003e82:	460b      	mov	r3, r1
 8003e84:	813b      	strh	r3, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e8a:	f7fe ff73 	bl	8002d74 <HAL_GetTick>
 8003e8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	f040 80d9 	bne.w	8004050 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	2319      	movs	r3, #25
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	496d      	ldr	r1, [pc, #436]	; (800405c <HAL_I2C_Mem_Write+0x1ec>)
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f971 	bl	8004190 <I2C_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e0cc      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2C_Mem_Write+0x56>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e0c5      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d007      	beq.n	8003eec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003efa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2221      	movs	r2, #33	; 0x21
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2240      	movs	r2, #64	; 0x40
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a3a      	ldr	r2, [r7, #32]
 8003f16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a4d      	ldr	r2, [pc, #308]	; (8004060 <HAL_I2C_Mem_Write+0x1f0>)
 8003f2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f2e:	88f8      	ldrh	r0, [r7, #6]
 8003f30:	893a      	ldrh	r2, [r7, #8]
 8003f32:	8979      	ldrh	r1, [r7, #10]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f890 	bl	8004064 <I2C_RequestMemoryWrite>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d052      	beq.n	8003ff0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e081      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f9f2 	bl	800433c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00d      	beq.n	8003f7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d107      	bne.n	8003f76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e06b      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	781a      	ldrb	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d11b      	bne.n	8003ff0 <HAL_I2C_Mem_Write+0x180>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d017      	beq.n	8003ff0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1aa      	bne.n	8003f4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 f9de 	bl	80043be <I2C_WaitOnBTFFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	2b04      	cmp	r3, #4
 800400e:	d107      	bne.n	8004020 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e016      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	e000      	b.n	8004052 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	00100002 	.word	0x00100002
 8004060:	ffff0000 	.word	0xffff0000

08004064 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	461a      	mov	r2, r3
 8004072:	4603      	mov	r3, r0
 8004074:	817b      	strh	r3, [r7, #10]
 8004076:	460b      	mov	r3, r1
 8004078:	813b      	strh	r3, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800408c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	2200      	movs	r2, #0
 8004096:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 f878 	bl	8004190 <I2C_WaitOnFlagUntilTimeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00d      	beq.n	80040c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b4:	d103      	bne.n	80040be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e05f      	b.n	8004182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040c2:	897b      	ldrh	r3, [r7, #10]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	6a3a      	ldr	r2, [r7, #32]
 80040d6:	492d      	ldr	r1, [pc, #180]	; (800418c <I2C_RequestMemoryWrite+0x128>)
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f8b0 	bl	800423e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e04c      	b.n	8004182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004100:	6a39      	ldr	r1, [r7, #32]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f91a 	bl	800433c <I2C_WaitOnTXEFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	2b04      	cmp	r3, #4
 8004114:	d107      	bne.n	8004126 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004124:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e02b      	b.n	8004182 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d105      	bne.n	800413c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004130:	893b      	ldrh	r3, [r7, #8]
 8004132:	b2da      	uxtb	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	611a      	str	r2, [r3, #16]
 800413a:	e021      	b.n	8004180 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800413c:	893b      	ldrh	r3, [r7, #8]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	b29b      	uxth	r3, r3
 8004142:	b2da      	uxtb	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800414a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414c:	6a39      	ldr	r1, [r7, #32]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f8f4 	bl	800433c <I2C_WaitOnTXEFlagUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00d      	beq.n	8004176 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	2b04      	cmp	r3, #4
 8004160:	d107      	bne.n	8004172 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004170:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e005      	b.n	8004182 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004176:	893b      	ldrh	r3, [r7, #8]
 8004178:	b2da      	uxtb	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	00010002 	.word	0x00010002

08004190 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041a0:	e025      	b.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d021      	beq.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041aa:	f7fe fde3 	bl	8002d74 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d116      	bne.n	80041ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f043 0220 	orr.w	r2, r3, #32
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e023      	b.n	8004236 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d10d      	bne.n	8004214 <I2C_WaitOnFlagUntilTimeout+0x84>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	43da      	mvns	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4013      	ands	r3, r2
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	bf0c      	ite	eq
 800420a:	2301      	moveq	r3, #1
 800420c:	2300      	movne	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	461a      	mov	r2, r3
 8004212:	e00c      	b.n	800422e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	43da      	mvns	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4013      	ands	r3, r2
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	bf0c      	ite	eq
 8004226:	2301      	moveq	r3, #1
 8004228:	2300      	movne	r3, #0
 800422a:	b2db      	uxtb	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	429a      	cmp	r2, r3
 8004232:	d0b6      	beq.n	80041a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800424c:	e051      	b.n	80042f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425c:	d123      	bne.n	80042a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800426c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004276:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f043 0204 	orr.w	r2, r3, #4
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e046      	b.n	8004334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d021      	beq.n	80042f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ae:	f7fe fd61 	bl	8002d74 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d116      	bne.n	80042f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e020      	b.n	8004334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	0c1b      	lsrs	r3, r3, #16
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d10c      	bne.n	8004316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	43da      	mvns	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4013      	ands	r3, r2
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf14      	ite	ne
 800430e:	2301      	movne	r3, #1
 8004310:	2300      	moveq	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	e00b      	b.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	43da      	mvns	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4013      	ands	r3, r2
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d18d      	bne.n	800424e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004348:	e02d      	b.n	80043a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f878 	bl	8004440 <I2C_IsAcknowledgeFailed>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e02d      	b.n	80043b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004360:	d021      	beq.n	80043a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004362:	f7fe fd07 	bl	8002d74 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	429a      	cmp	r2, r3
 8004370:	d302      	bcc.n	8004378 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d116      	bne.n	80043a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f043 0220 	orr.w	r2, r3, #32
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e007      	b.n	80043b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b0:	2b80      	cmp	r3, #128	; 0x80
 80043b2:	d1ca      	bne.n	800434a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043ca:	e02d      	b.n	8004428 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f837 	bl	8004440 <I2C_IsAcknowledgeFailed>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e02d      	b.n	8004438 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e2:	d021      	beq.n	8004428 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e4:	f7fe fcc6 	bl	8002d74 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d302      	bcc.n	80043fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d116      	bne.n	8004428 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f043 0220 	orr.w	r2, r3, #32
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e007      	b.n	8004438 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f003 0304 	and.w	r3, r3, #4
 8004432:	2b04      	cmp	r3, #4
 8004434:	d1ca      	bne.n	80043cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004456:	d11b      	bne.n	8004490 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004460:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	f043 0204 	orr.w	r2, r3, #4
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e267      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d075      	beq.n	80045aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044be:	4b88      	ldr	r3, [pc, #544]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d00c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ca:	4b85      	ldr	r3, [pc, #532]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d112      	bne.n	80044fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d6:	4b82      	ldr	r3, [pc, #520]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e2:	d10b      	bne.n	80044fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e4:	4b7e      	ldr	r3, [pc, #504]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d05b      	beq.n	80045a8 <HAL_RCC_OscConfig+0x108>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d157      	bne.n	80045a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e242      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004504:	d106      	bne.n	8004514 <HAL_RCC_OscConfig+0x74>
 8004506:	4b76      	ldr	r3, [pc, #472]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a75      	ldr	r2, [pc, #468]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 800450c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	e01d      	b.n	8004550 <HAL_RCC_OscConfig+0xb0>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800451c:	d10c      	bne.n	8004538 <HAL_RCC_OscConfig+0x98>
 800451e:	4b70      	ldr	r3, [pc, #448]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a6f      	ldr	r2, [pc, #444]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4b6d      	ldr	r3, [pc, #436]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a6c      	ldr	r2, [pc, #432]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e00b      	b.n	8004550 <HAL_RCC_OscConfig+0xb0>
 8004538:	4b69      	ldr	r3, [pc, #420]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a68      	ldr	r2, [pc, #416]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 800453e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	4b66      	ldr	r3, [pc, #408]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a65      	ldr	r2, [pc, #404]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 800454a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800454e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d013      	beq.n	8004580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7fe fc0c 	bl	8002d74 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004560:	f7fe fc08 	bl	8002d74 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b64      	cmp	r3, #100	; 0x64
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e207      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004572:	4b5b      	ldr	r3, [pc, #364]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0xc0>
 800457e:	e014      	b.n	80045aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fe fbf8 	bl	8002d74 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004588:	f7fe fbf4 	bl	8002d74 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	; 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e1f3      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459a:	4b51      	ldr	r3, [pc, #324]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f0      	bne.n	8004588 <HAL_RCC_OscConfig+0xe8>
 80045a6:	e000      	b.n	80045aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d063      	beq.n	800467e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045b6:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c2:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d11c      	bne.n	8004608 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ce:	4b44      	ldr	r3, [pc, #272]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d116      	bne.n	8004608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045da:	4b41      	ldr	r3, [pc, #260]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_RCC_OscConfig+0x152>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d001      	beq.n	80045f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e1c7      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f2:	4b3b      	ldr	r3, [pc, #236]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4937      	ldr	r1, [pc, #220]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004602:	4313      	orrs	r3, r2
 8004604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004606:	e03a      	b.n	800467e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d020      	beq.n	8004652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004610:	4b34      	ldr	r3, [pc, #208]	; (80046e4 <HAL_RCC_OscConfig+0x244>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004616:	f7fe fbad 	bl	8002d74 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800461e:	f7fe fba9 	bl	8002d74 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e1a8      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004630:	4b2b      	ldr	r3, [pc, #172]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463c:	4b28      	ldr	r3, [pc, #160]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4925      	ldr	r1, [pc, #148]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 800464c:	4313      	orrs	r3, r2
 800464e:	600b      	str	r3, [r1, #0]
 8004650:	e015      	b.n	800467e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004652:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <HAL_RCC_OscConfig+0x244>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fe fb8c 	bl	8002d74 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004660:	f7fe fb88 	bl	8002d74 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e187      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004672:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d036      	beq.n	80046f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d016      	beq.n	80046c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004692:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <HAL_RCC_OscConfig+0x248>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004698:	f7fe fb6c 	bl	8002d74 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a0:	f7fe fb68 	bl	8002d74 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e167      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b2:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_OscConfig+0x240>)
 80046b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x200>
 80046be:	e01b      	b.n	80046f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <HAL_RCC_OscConfig+0x248>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c6:	f7fe fb55 	bl	8002d74 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046cc:	e00e      	b.n	80046ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ce:	f7fe fb51 	bl	8002d74 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d907      	bls.n	80046ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e150      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
 80046e0:	40023800 	.word	0x40023800
 80046e4:	42470000 	.word	0x42470000
 80046e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ec:	4b88      	ldr	r3, [pc, #544]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 80046ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1ea      	bne.n	80046ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8097 	beq.w	8004834 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004706:	2300      	movs	r3, #0
 8004708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470a:	4b81      	ldr	r3, [pc, #516]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10f      	bne.n	8004736 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	4b7d      	ldr	r3, [pc, #500]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	4a7c      	ldr	r2, [pc, #496]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 8004720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004724:	6413      	str	r3, [r2, #64]	; 0x40
 8004726:	4b7a      	ldr	r3, [pc, #488]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004736:	4b77      	ldr	r3, [pc, #476]	; (8004914 <HAL_RCC_OscConfig+0x474>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473e:	2b00      	cmp	r3, #0
 8004740:	d118      	bne.n	8004774 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004742:	4b74      	ldr	r3, [pc, #464]	; (8004914 <HAL_RCC_OscConfig+0x474>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a73      	ldr	r2, [pc, #460]	; (8004914 <HAL_RCC_OscConfig+0x474>)
 8004748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800474c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474e:	f7fe fb11 	bl	8002d74 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004756:	f7fe fb0d 	bl	8002d74 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e10c      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004768:	4b6a      	ldr	r3, [pc, #424]	; (8004914 <HAL_RCC_OscConfig+0x474>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0f0      	beq.n	8004756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d106      	bne.n	800478a <HAL_RCC_OscConfig+0x2ea>
 800477c:	4b64      	ldr	r3, [pc, #400]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	4a63      	ldr	r2, [pc, #396]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	6713      	str	r3, [r2, #112]	; 0x70
 8004788:	e01c      	b.n	80047c4 <HAL_RCC_OscConfig+0x324>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b05      	cmp	r3, #5
 8004790:	d10c      	bne.n	80047ac <HAL_RCC_OscConfig+0x30c>
 8004792:	4b5f      	ldr	r3, [pc, #380]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004796:	4a5e      	ldr	r2, [pc, #376]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 8004798:	f043 0304 	orr.w	r3, r3, #4
 800479c:	6713      	str	r3, [r2, #112]	; 0x70
 800479e:	4b5c      	ldr	r3, [pc, #368]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a2:	4a5b      	ldr	r2, [pc, #364]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	6713      	str	r3, [r2, #112]	; 0x70
 80047aa:	e00b      	b.n	80047c4 <HAL_RCC_OscConfig+0x324>
 80047ac:	4b58      	ldr	r3, [pc, #352]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b0:	4a57      	ldr	r2, [pc, #348]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 80047b2:	f023 0301 	bic.w	r3, r3, #1
 80047b6:	6713      	str	r3, [r2, #112]	; 0x70
 80047b8:	4b55      	ldr	r3, [pc, #340]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	4a54      	ldr	r2, [pc, #336]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 80047be:	f023 0304 	bic.w	r3, r3, #4
 80047c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d015      	beq.n	80047f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047cc:	f7fe fad2 	bl	8002d74 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7fe face 	bl	8002d74 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e0cb      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ea:	4b49      	ldr	r3, [pc, #292]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0ee      	beq.n	80047d4 <HAL_RCC_OscConfig+0x334>
 80047f6:	e014      	b.n	8004822 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f8:	f7fe fabc 	bl	8002d74 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004800:	f7fe fab8 	bl	8002d74 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	; 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e0b5      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004816:	4b3e      	ldr	r3, [pc, #248]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1ee      	bne.n	8004800 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004822:	7dfb      	ldrb	r3, [r7, #23]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d105      	bne.n	8004834 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004828:	4b39      	ldr	r3, [pc, #228]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	4a38      	ldr	r2, [pc, #224]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 800482e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004832:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80a1 	beq.w	8004980 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800483e:	4b34      	ldr	r3, [pc, #208]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b08      	cmp	r3, #8
 8004848:	d05c      	beq.n	8004904 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d141      	bne.n	80048d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004852:	4b31      	ldr	r3, [pc, #196]	; (8004918 <HAL_RCC_OscConfig+0x478>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004858:	f7fe fa8c 	bl	8002d74 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004860:	f7fe fa88 	bl	8002d74 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e087      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004872:	4b27      	ldr	r3, [pc, #156]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69da      	ldr	r2, [r3, #28]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	019b      	lsls	r3, r3, #6
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	3b01      	subs	r3, #1
 8004898:	041b      	lsls	r3, r3, #16
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	491b      	ldr	r1, [pc, #108]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a8:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <HAL_RCC_OscConfig+0x478>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ae:	f7fe fa61 	bl	8002d74 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b6:	f7fe fa5d 	bl	8002d74 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e05c      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCC_OscConfig+0x416>
 80048d4:	e054      	b.n	8004980 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <HAL_RCC_OscConfig+0x478>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048dc:	f7fe fa4a 	bl	8002d74 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fe fa46 	bl	8002d74 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e045      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCC_OscConfig+0x470>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x444>
 8004902:	e03d      	b.n	8004980 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d107      	bne.n	800491c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e038      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
 8004910:	40023800 	.word	0x40023800
 8004914:	40007000 	.word	0x40007000
 8004918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800491c:	4b1b      	ldr	r3, [pc, #108]	; (800498c <HAL_RCC_OscConfig+0x4ec>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d028      	beq.n	800497c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d121      	bne.n	800497c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d11a      	bne.n	800497c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800494c:	4013      	ands	r3, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004954:	4293      	cmp	r3, r2
 8004956:	d111      	bne.n	800497c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	085b      	lsrs	r3, r3, #1
 8004964:	3b01      	subs	r3, #1
 8004966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004968:	429a      	cmp	r2, r3
 800496a:	d107      	bne.n	800497c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004978:	429a      	cmp	r2, r3
 800497a:	d001      	beq.n	8004980 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800

08004990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0cc      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049a4:	4b68      	ldr	r3, [pc, #416]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d90c      	bls.n	80049cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b2:	4b65      	ldr	r3, [pc, #404]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b63      	ldr	r3, [pc, #396]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0b8      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d020      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e4:	4b59      	ldr	r3, [pc, #356]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	4a58      	ldr	r2, [pc, #352]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049fc:	4b53      	ldr	r3, [pc, #332]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	4a52      	ldr	r2, [pc, #328]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a08:	4b50      	ldr	r3, [pc, #320]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	494d      	ldr	r1, [pc, #308]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d044      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d107      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2e:	4b47      	ldr	r3, [pc, #284]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d119      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e07f      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d003      	beq.n	8004a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4e:	4b3f      	ldr	r3, [pc, #252]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e06f      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5e:	4b3b      	ldr	r3, [pc, #236]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e067      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a6e:	4b37      	ldr	r3, [pc, #220]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f023 0203 	bic.w	r2, r3, #3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4934      	ldr	r1, [pc, #208]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a80:	f7fe f978 	bl	8002d74 <HAL_GetTick>
 8004a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a86:	e00a      	b.n	8004a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a88:	f7fe f974 	bl	8002d74 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e04f      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9e:	4b2b      	ldr	r3, [pc, #172]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 020c 	and.w	r2, r3, #12
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d1eb      	bne.n	8004a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab0:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d20c      	bcs.n	8004ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004abe:	4b22      	ldr	r3, [pc, #136]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac6:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e032      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae4:	4b19      	ldr	r3, [pc, #100]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4916      	ldr	r1, [pc, #88]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b02:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	490e      	ldr	r1, [pc, #56]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b16:	f000 f821 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	490a      	ldr	r1, [pc, #40]	; (8004b50 <HAL_RCC_ClockConfig+0x1c0>)
 8004b28:	5ccb      	ldrb	r3, [r1, r3]
 8004b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2e:	4a09      	ldr	r2, [pc, #36]	; (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b32:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <HAL_RCC_ClockConfig+0x1c8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fe f8d8 	bl	8002cec <HAL_InitTick>

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40023c00 	.word	0x40023c00
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	0800b5f4 	.word	0x0800b5f4
 8004b54:	20000014 	.word	0x20000014
 8004b58:	20000018 	.word	0x20000018

08004b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b60:	b094      	sub	sp, #80	; 0x50
 8004b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	647b      	str	r3, [r7, #68]	; 0x44
 8004b68:	2300      	movs	r3, #0
 8004b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b74:	4b79      	ldr	r3, [pc, #484]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 030c 	and.w	r3, r3, #12
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d00d      	beq.n	8004b9c <HAL_RCC_GetSysClockFreq+0x40>
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	f200 80e1 	bhi.w	8004d48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0x34>
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d003      	beq.n	8004b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b8e:	e0db      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b90:	4b73      	ldr	r3, [pc, #460]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b94:	e0db      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b96:	4b73      	ldr	r3, [pc, #460]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b9a:	e0d8      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b9c:	4b6f      	ldr	r3, [pc, #444]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ba6:	4b6d      	ldr	r3, [pc, #436]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d063      	beq.n	8004c7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb2:	4b6a      	ldr	r3, [pc, #424]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	099b      	lsrs	r3, r3, #6
 8004bb8:	2200      	movs	r2, #0
 8004bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bce:	4622      	mov	r2, r4
 8004bd0:	462b      	mov	r3, r5
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f04f 0100 	mov.w	r1, #0
 8004bda:	0159      	lsls	r1, r3, #5
 8004bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be0:	0150      	lsls	r0, r2, #5
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4621      	mov	r1, r4
 8004be8:	1a51      	subs	r1, r2, r1
 8004bea:	6139      	str	r1, [r7, #16]
 8004bec:	4629      	mov	r1, r5
 8004bee:	eb63 0301 	sbc.w	r3, r3, r1
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c00:	4659      	mov	r1, fp
 8004c02:	018b      	lsls	r3, r1, #6
 8004c04:	4651      	mov	r1, sl
 8004c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	018a      	lsls	r2, r1, #6
 8004c0e:	4651      	mov	r1, sl
 8004c10:	ebb2 0801 	subs.w	r8, r2, r1
 8004c14:	4659      	mov	r1, fp
 8004c16:	eb63 0901 	sbc.w	r9, r3, r1
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c2e:	4690      	mov	r8, r2
 8004c30:	4699      	mov	r9, r3
 8004c32:	4623      	mov	r3, r4
 8004c34:	eb18 0303 	adds.w	r3, r8, r3
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	462b      	mov	r3, r5
 8004c3c:	eb49 0303 	adc.w	r3, r9, r3
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c4e:	4629      	mov	r1, r5
 8004c50:	024b      	lsls	r3, r1, #9
 8004c52:	4621      	mov	r1, r4
 8004c54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c58:	4621      	mov	r1, r4
 8004c5a:	024a      	lsls	r2, r1, #9
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c62:	2200      	movs	r2, #0
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c6c:	f7fc f814 	bl	8000c98 <__aeabi_uldivmod>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4613      	mov	r3, r2
 8004c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c78:	e058      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c7a:	4b38      	ldr	r3, [pc, #224]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	099b      	lsrs	r3, r3, #6
 8004c80:	2200      	movs	r2, #0
 8004c82:	4618      	mov	r0, r3
 8004c84:	4611      	mov	r1, r2
 8004c86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c8a:	623b      	str	r3, [r7, #32]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c94:	4642      	mov	r2, r8
 8004c96:	464b      	mov	r3, r9
 8004c98:	f04f 0000 	mov.w	r0, #0
 8004c9c:	f04f 0100 	mov.w	r1, #0
 8004ca0:	0159      	lsls	r1, r3, #5
 8004ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ca6:	0150      	lsls	r0, r2, #5
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4641      	mov	r1, r8
 8004cae:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ccc:	ebb2 040a 	subs.w	r4, r2, sl
 8004cd0:	eb63 050b 	sbc.w	r5, r3, fp
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	00eb      	lsls	r3, r5, #3
 8004cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ce2:	00e2      	lsls	r2, r4, #3
 8004ce4:	4614      	mov	r4, r2
 8004ce6:	461d      	mov	r5, r3
 8004ce8:	4643      	mov	r3, r8
 8004cea:	18e3      	adds	r3, r4, r3
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	464b      	mov	r3, r9
 8004cf0:	eb45 0303 	adc.w	r3, r5, r3
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d02:	4629      	mov	r1, r5
 8004d04:	028b      	lsls	r3, r1, #10
 8004d06:	4621      	mov	r1, r4
 8004d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	028a      	lsls	r2, r1, #10
 8004d10:	4610      	mov	r0, r2
 8004d12:	4619      	mov	r1, r3
 8004d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d16:	2200      	movs	r2, #0
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	61fa      	str	r2, [r7, #28]
 8004d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d20:	f7fb ffba 	bl	8000c98 <__aeabi_uldivmod>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4613      	mov	r3, r2
 8004d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d2c:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	0c1b      	lsrs	r3, r3, #16
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	3301      	adds	r3, #1
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d46:	e002      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3750      	adds	r7, #80	; 0x50
 8004d54:	46bd      	mov	sp, r7
 8004d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	00f42400 	.word	0x00f42400
 8004d64:	007a1200 	.word	0x007a1200

08004d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d6c:	4b03      	ldr	r3, [pc, #12]	; (8004d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	20000014 	.word	0x20000014

08004d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d84:	f7ff fff0 	bl	8004d68 <HAL_RCC_GetHCLKFreq>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	0a9b      	lsrs	r3, r3, #10
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	4903      	ldr	r1, [pc, #12]	; (8004da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d96:	5ccb      	ldrb	r3, [r1, r3]
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40023800 	.word	0x40023800
 8004da4:	0800b604 	.word	0x0800b604

08004da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e041      	b.n	8004e3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fd fedc 	bl	8002b8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3304      	adds	r3, #4
 8004de4:	4619      	mov	r1, r3
 8004de6:	4610      	mov	r0, r2
 8004de8:	f000 fb52 	bl	8005490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d001      	beq.n	8004e60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e03c      	b.n	8004eda <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a1e      	ldr	r2, [pc, #120]	; (8004ee8 <HAL_TIM_Base_Start+0xa0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d018      	beq.n	8004ea4 <HAL_TIM_Base_Start+0x5c>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7a:	d013      	beq.n	8004ea4 <HAL_TIM_Base_Start+0x5c>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a1a      	ldr	r2, [pc, #104]	; (8004eec <HAL_TIM_Base_Start+0xa4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00e      	beq.n	8004ea4 <HAL_TIM_Base_Start+0x5c>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <HAL_TIM_Base_Start+0xa8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d009      	beq.n	8004ea4 <HAL_TIM_Base_Start+0x5c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a17      	ldr	r2, [pc, #92]	; (8004ef4 <HAL_TIM_Base_Start+0xac>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <HAL_TIM_Base_Start+0x5c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a16      	ldr	r2, [pc, #88]	; (8004ef8 <HAL_TIM_Base_Start+0xb0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d111      	bne.n	8004ec8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b06      	cmp	r3, #6
 8004eb4:	d010      	beq.n	8004ed8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0201 	orr.w	r2, r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec6:	e007      	b.n	8004ed8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0201 	orr.w	r2, r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	40010000 	.word	0x40010000
 8004eec:	40000400 	.word	0x40000400
 8004ef0:	40000800 	.word	0x40000800
 8004ef4:	40000c00 	.word	0x40000c00
 8004ef8:	40014000 	.word	0x40014000

08004efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d001      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e044      	b.n	8004f9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1e      	ldr	r2, [pc, #120]	; (8004fac <HAL_TIM_Base_Start_IT+0xb0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d018      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0x6c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3e:	d013      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0x6c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a1a      	ldr	r2, [pc, #104]	; (8004fb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00e      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0x6c>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d009      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0x6c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a17      	ldr	r2, [pc, #92]	; (8004fb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d004      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0x6c>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a16      	ldr	r2, [pc, #88]	; (8004fbc <HAL_TIM_Base_Start_IT+0xc0>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d111      	bne.n	8004f8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b06      	cmp	r3, #6
 8004f78:	d010      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0201 	orr.w	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8a:	e007      	b.n	8004f9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40000800 	.word	0x40000800
 8004fb8:	40000c00 	.word	0x40000c00
 8004fbc:	40014000 	.word	0x40014000

08004fc0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0201 	bic.w	r2, r2, #1
 8004fd6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10f      	bne.n	8005008 <HAL_TIM_Base_Stop_IT+0x48>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6a1a      	ldr	r2, [r3, #32]
 8004fee:	f240 4344 	movw	r3, #1092	; 0x444
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d107      	bne.n	8005008 <HAL_TIM_Base_Stop_IT+0x48>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b082      	sub	sp, #8
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b02      	cmp	r3, #2
 8005032:	d122      	bne.n	800507a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b02      	cmp	r3, #2
 8005040:	d11b      	bne.n	800507a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f06f 0202 	mvn.w	r2, #2
 800504a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f9f7 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 8005066:	e005      	b.n	8005074 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f9e9 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f9fa 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b04      	cmp	r3, #4
 8005086:	d122      	bne.n	80050ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f003 0304 	and.w	r3, r3, #4
 8005092:	2b04      	cmp	r3, #4
 8005094:	d11b      	bne.n	80050ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f06f 0204 	mvn.w	r2, #4
 800509e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f9cd 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 80050ba:	e005      	b.n	80050c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f9bf 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f9d0 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d122      	bne.n	8005122 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d11b      	bne.n	8005122 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f06f 0208 	mvn.w	r2, #8
 80050f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2204      	movs	r2, #4
 80050f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d003      	beq.n	8005110 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f9a3 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 800510e:	e005      	b.n	800511c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f995 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f9a6 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f003 0310 	and.w	r3, r3, #16
 800512c:	2b10      	cmp	r3, #16
 800512e:	d122      	bne.n	8005176 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	2b10      	cmp	r3, #16
 800513c:	d11b      	bne.n	8005176 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f06f 0210 	mvn.w	r2, #16
 8005146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2208      	movs	r2, #8
 800514c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f979 	bl	8005454 <HAL_TIM_IC_CaptureCallback>
 8005162:	e005      	b.n	8005170 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f96b 	bl	8005440 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f97c 	bl	8005468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10e      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b01      	cmp	r3, #1
 8005190:	d107      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f06f 0201 	mvn.w	r2, #1
 800519a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7fc f9fb 	bl	8001598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ac:	2b80      	cmp	r3, #128	; 0x80
 80051ae:	d10e      	bne.n	80051ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ba:	2b80      	cmp	r3, #128	; 0x80
 80051bc:	d107      	bne.n	80051ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fb85 	bl	80058d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b40      	cmp	r3, #64	; 0x40
 80051da:	d10e      	bne.n	80051fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e6:	2b40      	cmp	r3, #64	; 0x40
 80051e8:	d107      	bne.n	80051fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f941 	bl	800547c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b20      	cmp	r3, #32
 8005206:	d10e      	bne.n	8005226 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0320 	and.w	r3, r3, #32
 8005212:	2b20      	cmp	r3, #32
 8005214:	d107      	bne.n	8005226 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f06f 0220 	mvn.w	r2, #32
 800521e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fb4f 	bl	80058c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <HAL_TIM_ConfigClockSource+0x1c>
 8005246:	2302      	movs	r3, #2
 8005248:	e0b4      	b.n	80053b4 <HAL_TIM_ConfigClockSource+0x186>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2202      	movs	r2, #2
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005268:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005270:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005282:	d03e      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0xd4>
 8005284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005288:	f200 8087 	bhi.w	800539a <HAL_TIM_ConfigClockSource+0x16c>
 800528c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005290:	f000 8086 	beq.w	80053a0 <HAL_TIM_ConfigClockSource+0x172>
 8005294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005298:	d87f      	bhi.n	800539a <HAL_TIM_ConfigClockSource+0x16c>
 800529a:	2b70      	cmp	r3, #112	; 0x70
 800529c:	d01a      	beq.n	80052d4 <HAL_TIM_ConfigClockSource+0xa6>
 800529e:	2b70      	cmp	r3, #112	; 0x70
 80052a0:	d87b      	bhi.n	800539a <HAL_TIM_ConfigClockSource+0x16c>
 80052a2:	2b60      	cmp	r3, #96	; 0x60
 80052a4:	d050      	beq.n	8005348 <HAL_TIM_ConfigClockSource+0x11a>
 80052a6:	2b60      	cmp	r3, #96	; 0x60
 80052a8:	d877      	bhi.n	800539a <HAL_TIM_ConfigClockSource+0x16c>
 80052aa:	2b50      	cmp	r3, #80	; 0x50
 80052ac:	d03c      	beq.n	8005328 <HAL_TIM_ConfigClockSource+0xfa>
 80052ae:	2b50      	cmp	r3, #80	; 0x50
 80052b0:	d873      	bhi.n	800539a <HAL_TIM_ConfigClockSource+0x16c>
 80052b2:	2b40      	cmp	r3, #64	; 0x40
 80052b4:	d058      	beq.n	8005368 <HAL_TIM_ConfigClockSource+0x13a>
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d86f      	bhi.n	800539a <HAL_TIM_ConfigClockSource+0x16c>
 80052ba:	2b30      	cmp	r3, #48	; 0x30
 80052bc:	d064      	beq.n	8005388 <HAL_TIM_ConfigClockSource+0x15a>
 80052be:	2b30      	cmp	r3, #48	; 0x30
 80052c0:	d86b      	bhi.n	800539a <HAL_TIM_ConfigClockSource+0x16c>
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d060      	beq.n	8005388 <HAL_TIM_ConfigClockSource+0x15a>
 80052c6:	2b20      	cmp	r3, #32
 80052c8:	d867      	bhi.n	800539a <HAL_TIM_ConfigClockSource+0x16c>
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d05c      	beq.n	8005388 <HAL_TIM_ConfigClockSource+0x15a>
 80052ce:	2b10      	cmp	r3, #16
 80052d0:	d05a      	beq.n	8005388 <HAL_TIM_ConfigClockSource+0x15a>
 80052d2:	e062      	b.n	800539a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6818      	ldr	r0, [r3, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	6899      	ldr	r1, [r3, #8]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f000 fa5f 	bl	80057a6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	609a      	str	r2, [r3, #8]
      break;
 8005300:	e04f      	b.n	80053a2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6899      	ldr	r1, [r3, #8]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f000 fa48 	bl	80057a6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005324:	609a      	str	r2, [r3, #8]
      break;
 8005326:	e03c      	b.n	80053a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	6859      	ldr	r1, [r3, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	461a      	mov	r2, r3
 8005336:	f000 f9bc 	bl	80056b2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2150      	movs	r1, #80	; 0x50
 8005340:	4618      	mov	r0, r3
 8005342:	f000 fa15 	bl	8005770 <TIM_ITRx_SetConfig>
      break;
 8005346:	e02c      	b.n	80053a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6818      	ldr	r0, [r3, #0]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	6859      	ldr	r1, [r3, #4]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	461a      	mov	r2, r3
 8005356:	f000 f9db 	bl	8005710 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2160      	movs	r1, #96	; 0x60
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fa05 	bl	8005770 <TIM_ITRx_SetConfig>
      break;
 8005366:	e01c      	b.n	80053a2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	6859      	ldr	r1, [r3, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	461a      	mov	r2, r3
 8005376:	f000 f99c 	bl	80056b2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2140      	movs	r1, #64	; 0x40
 8005380:	4618      	mov	r0, r3
 8005382:	f000 f9f5 	bl	8005770 <TIM_ITRx_SetConfig>
      break;
 8005386:	e00c      	b.n	80053a2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4619      	mov	r1, r3
 8005392:	4610      	mov	r0, r2
 8005394:	f000 f9ec 	bl	8005770 <TIM_ITRx_SetConfig>
      break;
 8005398:	e003      	b.n	80053a2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	73fb      	strb	r3, [r7, #15]
      break;
 800539e:	e000      	b.n	80053a2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e031      	b.n	8005438 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f8d2 	bl	8005590 <TIM_SlaveTimer_SetConfig>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e018      	b.n	8005438 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005414:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005424:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a34      	ldr	r2, [pc, #208]	; (8005574 <TIM_Base_SetConfig+0xe4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00f      	beq.n	80054c8 <TIM_Base_SetConfig+0x38>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ae:	d00b      	beq.n	80054c8 <TIM_Base_SetConfig+0x38>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a31      	ldr	r2, [pc, #196]	; (8005578 <TIM_Base_SetConfig+0xe8>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d007      	beq.n	80054c8 <TIM_Base_SetConfig+0x38>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a30      	ldr	r2, [pc, #192]	; (800557c <TIM_Base_SetConfig+0xec>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d003      	beq.n	80054c8 <TIM_Base_SetConfig+0x38>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a2f      	ldr	r2, [pc, #188]	; (8005580 <TIM_Base_SetConfig+0xf0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d108      	bne.n	80054da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a25      	ldr	r2, [pc, #148]	; (8005574 <TIM_Base_SetConfig+0xe4>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01b      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e8:	d017      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a22      	ldr	r2, [pc, #136]	; (8005578 <TIM_Base_SetConfig+0xe8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d013      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a21      	ldr	r2, [pc, #132]	; (800557c <TIM_Base_SetConfig+0xec>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00f      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a20      	ldr	r2, [pc, #128]	; (8005580 <TIM_Base_SetConfig+0xf0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00b      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a1f      	ldr	r2, [pc, #124]	; (8005584 <TIM_Base_SetConfig+0xf4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d007      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <TIM_Base_SetConfig+0xf8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d003      	beq.n	800551a <TIM_Base_SetConfig+0x8a>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a1d      	ldr	r2, [pc, #116]	; (800558c <TIM_Base_SetConfig+0xfc>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d108      	bne.n	800552c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a08      	ldr	r2, [pc, #32]	; (8005574 <TIM_Base_SetConfig+0xe4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d103      	bne.n	8005560 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	615a      	str	r2, [r3, #20]
}
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000
 8005578:	40000400 	.word	0x40000400
 800557c:	40000800 	.word	0x40000800
 8005580:	40000c00 	.word	0x40000c00
 8005584:	40014000 	.word	0x40014000
 8005588:	40014400 	.word	0x40014400
 800558c:	40014800 	.word	0x40014800

08005590 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f023 0307 	bic.w	r3, r3, #7
 80055be:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2b70      	cmp	r3, #112	; 0x70
 80055d8:	d01a      	beq.n	8005610 <TIM_SlaveTimer_SetConfig+0x80>
 80055da:	2b70      	cmp	r3, #112	; 0x70
 80055dc:	d860      	bhi.n	80056a0 <TIM_SlaveTimer_SetConfig+0x110>
 80055de:	2b60      	cmp	r3, #96	; 0x60
 80055e0:	d054      	beq.n	800568c <TIM_SlaveTimer_SetConfig+0xfc>
 80055e2:	2b60      	cmp	r3, #96	; 0x60
 80055e4:	d85c      	bhi.n	80056a0 <TIM_SlaveTimer_SetConfig+0x110>
 80055e6:	2b50      	cmp	r3, #80	; 0x50
 80055e8:	d046      	beq.n	8005678 <TIM_SlaveTimer_SetConfig+0xe8>
 80055ea:	2b50      	cmp	r3, #80	; 0x50
 80055ec:	d858      	bhi.n	80056a0 <TIM_SlaveTimer_SetConfig+0x110>
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d019      	beq.n	8005626 <TIM_SlaveTimer_SetConfig+0x96>
 80055f2:	2b40      	cmp	r3, #64	; 0x40
 80055f4:	d854      	bhi.n	80056a0 <TIM_SlaveTimer_SetConfig+0x110>
 80055f6:	2b30      	cmp	r3, #48	; 0x30
 80055f8:	d055      	beq.n	80056a6 <TIM_SlaveTimer_SetConfig+0x116>
 80055fa:	2b30      	cmp	r3, #48	; 0x30
 80055fc:	d850      	bhi.n	80056a0 <TIM_SlaveTimer_SetConfig+0x110>
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d051      	beq.n	80056a6 <TIM_SlaveTimer_SetConfig+0x116>
 8005602:	2b20      	cmp	r3, #32
 8005604:	d84c      	bhi.n	80056a0 <TIM_SlaveTimer_SetConfig+0x110>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d04d      	beq.n	80056a6 <TIM_SlaveTimer_SetConfig+0x116>
 800560a:	2b10      	cmp	r3, #16
 800560c:	d04b      	beq.n	80056a6 <TIM_SlaveTimer_SetConfig+0x116>
 800560e:	e047      	b.n	80056a0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	68d9      	ldr	r1, [r3, #12]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f000 f8c1 	bl	80057a6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005624:	e040      	b.n	80056a8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b05      	cmp	r3, #5
 800562c:	d101      	bne.n	8005632 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e03b      	b.n	80056aa <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6a1a      	ldr	r2, [r3, #32]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0201 	bic.w	r2, r2, #1
 8005648:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005658:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	4313      	orrs	r3, r2
 8005664:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	621a      	str	r2, [r3, #32]
      break;
 8005676:	e017      	b.n	80056a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	6899      	ldr	r1, [r3, #8]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	461a      	mov	r2, r3
 8005686:	f000 f814 	bl	80056b2 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800568a:	e00d      	b.n	80056a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6818      	ldr	r0, [r3, #0]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	6899      	ldr	r1, [r3, #8]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	461a      	mov	r2, r3
 800569a:	f000 f839 	bl	8005710 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800569e:	e003      	b.n	80056a8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	75fb      	strb	r3, [r7, #23]
      break;
 80056a4:	e000      	b.n	80056a8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80056a6:	bf00      	nop
  }

  return status;
 80056a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b087      	sub	sp, #28
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	f023 0201 	bic.w	r2, r3, #1
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 030a 	bic.w	r3, r3, #10
 80056ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	621a      	str	r2, [r3, #32]
}
 8005704:	bf00      	nop
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	f023 0210 	bic.w	r2, r3, #16
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800573a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	031b      	lsls	r3, r3, #12
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800574c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	621a      	str	r2, [r3, #32]
}
 8005764:	bf00      	nop
 8005766:	371c      	adds	r7, #28
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005786:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	f043 0307 	orr.w	r3, r3, #7
 8005792:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	609a      	str	r2, [r3, #8]
}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b087      	sub	sp, #28
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	60f8      	str	r0, [r7, #12]
 80057ae:	60b9      	str	r1, [r7, #8]
 80057b0:	607a      	str	r2, [r7, #4]
 80057b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	021a      	lsls	r2, r3, #8
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	431a      	orrs	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	609a      	str	r2, [r3, #8]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
	...

080057e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e050      	b.n	80058a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a1c      	ldr	r2, [pc, #112]	; (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d018      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584c:	d013      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a18      	ldr	r2, [pc, #96]	; (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00e      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a16      	ldr	r2, [pc, #88]	; (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d009      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a15      	ldr	r2, [pc, #84]	; (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d004      	beq.n	8005876 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a13      	ldr	r2, [pc, #76]	; (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d10c      	bne.n	8005890 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800587c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	4313      	orrs	r3, r2
 8005886:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40010000 	.word	0x40010000
 80058b4:	40000400 	.word	0x40000400
 80058b8:	40000800 	.word	0x40000800
 80058bc:	40000c00 	.word	0x40000c00
 80058c0:	40014000 	.word	0x40014000

080058c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <__cvt>:
 80058ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058f0:	ec55 4b10 	vmov	r4, r5, d0
 80058f4:	2d00      	cmp	r5, #0
 80058f6:	460e      	mov	r6, r1
 80058f8:	4619      	mov	r1, r3
 80058fa:	462b      	mov	r3, r5
 80058fc:	bfbb      	ittet	lt
 80058fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005902:	461d      	movlt	r5, r3
 8005904:	2300      	movge	r3, #0
 8005906:	232d      	movlt	r3, #45	; 0x2d
 8005908:	700b      	strb	r3, [r1, #0]
 800590a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800590c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005910:	4691      	mov	r9, r2
 8005912:	f023 0820 	bic.w	r8, r3, #32
 8005916:	bfbc      	itt	lt
 8005918:	4622      	movlt	r2, r4
 800591a:	4614      	movlt	r4, r2
 800591c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005920:	d005      	beq.n	800592e <__cvt+0x42>
 8005922:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005926:	d100      	bne.n	800592a <__cvt+0x3e>
 8005928:	3601      	adds	r6, #1
 800592a:	2102      	movs	r1, #2
 800592c:	e000      	b.n	8005930 <__cvt+0x44>
 800592e:	2103      	movs	r1, #3
 8005930:	ab03      	add	r3, sp, #12
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	ab02      	add	r3, sp, #8
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	ec45 4b10 	vmov	d0, r4, r5
 800593c:	4653      	mov	r3, sl
 800593e:	4632      	mov	r2, r6
 8005940:	f001 f8da 	bl	8006af8 <_dtoa_r>
 8005944:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005948:	4607      	mov	r7, r0
 800594a:	d102      	bne.n	8005952 <__cvt+0x66>
 800594c:	f019 0f01 	tst.w	r9, #1
 8005950:	d022      	beq.n	8005998 <__cvt+0xac>
 8005952:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005956:	eb07 0906 	add.w	r9, r7, r6
 800595a:	d110      	bne.n	800597e <__cvt+0x92>
 800595c:	783b      	ldrb	r3, [r7, #0]
 800595e:	2b30      	cmp	r3, #48	; 0x30
 8005960:	d10a      	bne.n	8005978 <__cvt+0x8c>
 8005962:	2200      	movs	r2, #0
 8005964:	2300      	movs	r3, #0
 8005966:	4620      	mov	r0, r4
 8005968:	4629      	mov	r1, r5
 800596a:	f7fb f8b5 	bl	8000ad8 <__aeabi_dcmpeq>
 800596e:	b918      	cbnz	r0, 8005978 <__cvt+0x8c>
 8005970:	f1c6 0601 	rsb	r6, r6, #1
 8005974:	f8ca 6000 	str.w	r6, [sl]
 8005978:	f8da 3000 	ldr.w	r3, [sl]
 800597c:	4499      	add	r9, r3
 800597e:	2200      	movs	r2, #0
 8005980:	2300      	movs	r3, #0
 8005982:	4620      	mov	r0, r4
 8005984:	4629      	mov	r1, r5
 8005986:	f7fb f8a7 	bl	8000ad8 <__aeabi_dcmpeq>
 800598a:	b108      	cbz	r0, 8005990 <__cvt+0xa4>
 800598c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005990:	2230      	movs	r2, #48	; 0x30
 8005992:	9b03      	ldr	r3, [sp, #12]
 8005994:	454b      	cmp	r3, r9
 8005996:	d307      	bcc.n	80059a8 <__cvt+0xbc>
 8005998:	9b03      	ldr	r3, [sp, #12]
 800599a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800599c:	1bdb      	subs	r3, r3, r7
 800599e:	4638      	mov	r0, r7
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	b004      	add	sp, #16
 80059a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a8:	1c59      	adds	r1, r3, #1
 80059aa:	9103      	str	r1, [sp, #12]
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	e7f0      	b.n	8005992 <__cvt+0xa6>

080059b0 <__exponent>:
 80059b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059b2:	4603      	mov	r3, r0
 80059b4:	2900      	cmp	r1, #0
 80059b6:	bfb8      	it	lt
 80059b8:	4249      	neglt	r1, r1
 80059ba:	f803 2b02 	strb.w	r2, [r3], #2
 80059be:	bfb4      	ite	lt
 80059c0:	222d      	movlt	r2, #45	; 0x2d
 80059c2:	222b      	movge	r2, #43	; 0x2b
 80059c4:	2909      	cmp	r1, #9
 80059c6:	7042      	strb	r2, [r0, #1]
 80059c8:	dd2a      	ble.n	8005a20 <__exponent+0x70>
 80059ca:	f10d 0207 	add.w	r2, sp, #7
 80059ce:	4617      	mov	r7, r2
 80059d0:	260a      	movs	r6, #10
 80059d2:	4694      	mov	ip, r2
 80059d4:	fb91 f5f6 	sdiv	r5, r1, r6
 80059d8:	fb06 1415 	mls	r4, r6, r5, r1
 80059dc:	3430      	adds	r4, #48	; 0x30
 80059de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80059e2:	460c      	mov	r4, r1
 80059e4:	2c63      	cmp	r4, #99	; 0x63
 80059e6:	f102 32ff 	add.w	r2, r2, #4294967295
 80059ea:	4629      	mov	r1, r5
 80059ec:	dcf1      	bgt.n	80059d2 <__exponent+0x22>
 80059ee:	3130      	adds	r1, #48	; 0x30
 80059f0:	f1ac 0402 	sub.w	r4, ip, #2
 80059f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80059f8:	1c41      	adds	r1, r0, #1
 80059fa:	4622      	mov	r2, r4
 80059fc:	42ba      	cmp	r2, r7
 80059fe:	d30a      	bcc.n	8005a16 <__exponent+0x66>
 8005a00:	f10d 0209 	add.w	r2, sp, #9
 8005a04:	eba2 020c 	sub.w	r2, r2, ip
 8005a08:	42bc      	cmp	r4, r7
 8005a0a:	bf88      	it	hi
 8005a0c:	2200      	movhi	r2, #0
 8005a0e:	4413      	add	r3, r2
 8005a10:	1a18      	subs	r0, r3, r0
 8005a12:	b003      	add	sp, #12
 8005a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a16:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005a1a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005a1e:	e7ed      	b.n	80059fc <__exponent+0x4c>
 8005a20:	2330      	movs	r3, #48	; 0x30
 8005a22:	3130      	adds	r1, #48	; 0x30
 8005a24:	7083      	strb	r3, [r0, #2]
 8005a26:	70c1      	strb	r1, [r0, #3]
 8005a28:	1d03      	adds	r3, r0, #4
 8005a2a:	e7f1      	b.n	8005a10 <__exponent+0x60>

08005a2c <_printf_float>:
 8005a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a30:	ed2d 8b02 	vpush	{d8}
 8005a34:	b08d      	sub	sp, #52	; 0x34
 8005a36:	460c      	mov	r4, r1
 8005a38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a3c:	4616      	mov	r6, r2
 8005a3e:	461f      	mov	r7, r3
 8005a40:	4605      	mov	r5, r0
 8005a42:	f000 ff45 	bl	80068d0 <_localeconv_r>
 8005a46:	f8d0 a000 	ldr.w	sl, [r0]
 8005a4a:	4650      	mov	r0, sl
 8005a4c:	f7fa fc18 	bl	8000280 <strlen>
 8005a50:	2300      	movs	r3, #0
 8005a52:	930a      	str	r3, [sp, #40]	; 0x28
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	9305      	str	r3, [sp, #20]
 8005a58:	f8d8 3000 	ldr.w	r3, [r8]
 8005a5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a60:	3307      	adds	r3, #7
 8005a62:	f023 0307 	bic.w	r3, r3, #7
 8005a66:	f103 0208 	add.w	r2, r3, #8
 8005a6a:	f8c8 2000 	str.w	r2, [r8]
 8005a6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a76:	9307      	str	r3, [sp, #28]
 8005a78:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a7c:	ee08 0a10 	vmov	s16, r0
 8005a80:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005a84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a88:	4b9e      	ldr	r3, [pc, #632]	; (8005d04 <_printf_float+0x2d8>)
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	f7fb f855 	bl	8000b3c <__aeabi_dcmpun>
 8005a92:	bb88      	cbnz	r0, 8005af8 <_printf_float+0xcc>
 8005a94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a98:	4b9a      	ldr	r3, [pc, #616]	; (8005d04 <_printf_float+0x2d8>)
 8005a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9e:	f7fb f82f 	bl	8000b00 <__aeabi_dcmple>
 8005aa2:	bb48      	cbnz	r0, 8005af8 <_printf_float+0xcc>
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	4640      	mov	r0, r8
 8005aaa:	4649      	mov	r1, r9
 8005aac:	f7fb f81e 	bl	8000aec <__aeabi_dcmplt>
 8005ab0:	b110      	cbz	r0, 8005ab8 <_printf_float+0x8c>
 8005ab2:	232d      	movs	r3, #45	; 0x2d
 8005ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ab8:	4a93      	ldr	r2, [pc, #588]	; (8005d08 <_printf_float+0x2dc>)
 8005aba:	4b94      	ldr	r3, [pc, #592]	; (8005d0c <_printf_float+0x2e0>)
 8005abc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ac0:	bf94      	ite	ls
 8005ac2:	4690      	movls	r8, r2
 8005ac4:	4698      	movhi	r8, r3
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	6123      	str	r3, [r4, #16]
 8005aca:	9b05      	ldr	r3, [sp, #20]
 8005acc:	f023 0304 	bic.w	r3, r3, #4
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	f04f 0900 	mov.w	r9, #0
 8005ad6:	9700      	str	r7, [sp, #0]
 8005ad8:	4633      	mov	r3, r6
 8005ada:	aa0b      	add	r2, sp, #44	; 0x2c
 8005adc:	4621      	mov	r1, r4
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 f9da 	bl	8005e98 <_printf_common>
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	f040 8090 	bne.w	8005c0a <_printf_float+0x1de>
 8005aea:	f04f 30ff 	mov.w	r0, #4294967295
 8005aee:	b00d      	add	sp, #52	; 0x34
 8005af0:	ecbd 8b02 	vpop	{d8}
 8005af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af8:	4642      	mov	r2, r8
 8005afa:	464b      	mov	r3, r9
 8005afc:	4640      	mov	r0, r8
 8005afe:	4649      	mov	r1, r9
 8005b00:	f7fb f81c 	bl	8000b3c <__aeabi_dcmpun>
 8005b04:	b140      	cbz	r0, 8005b18 <_printf_float+0xec>
 8005b06:	464b      	mov	r3, r9
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bfbc      	itt	lt
 8005b0c:	232d      	movlt	r3, #45	; 0x2d
 8005b0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b12:	4a7f      	ldr	r2, [pc, #508]	; (8005d10 <_printf_float+0x2e4>)
 8005b14:	4b7f      	ldr	r3, [pc, #508]	; (8005d14 <_printf_float+0x2e8>)
 8005b16:	e7d1      	b.n	8005abc <_printf_float+0x90>
 8005b18:	6863      	ldr	r3, [r4, #4]
 8005b1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b1e:	9206      	str	r2, [sp, #24]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	d13f      	bne.n	8005ba4 <_printf_float+0x178>
 8005b24:	2306      	movs	r3, #6
 8005b26:	6063      	str	r3, [r4, #4]
 8005b28:	9b05      	ldr	r3, [sp, #20]
 8005b2a:	6861      	ldr	r1, [r4, #4]
 8005b2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b30:	2300      	movs	r3, #0
 8005b32:	9303      	str	r3, [sp, #12]
 8005b34:	ab0a      	add	r3, sp, #40	; 0x28
 8005b36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b3a:	ab09      	add	r3, sp, #36	; 0x24
 8005b3c:	ec49 8b10 	vmov	d0, r8, r9
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	6022      	str	r2, [r4, #0]
 8005b44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f7ff fecf 	bl	80058ec <__cvt>
 8005b4e:	9b06      	ldr	r3, [sp, #24]
 8005b50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b52:	2b47      	cmp	r3, #71	; 0x47
 8005b54:	4680      	mov	r8, r0
 8005b56:	d108      	bne.n	8005b6a <_printf_float+0x13e>
 8005b58:	1cc8      	adds	r0, r1, #3
 8005b5a:	db02      	blt.n	8005b62 <_printf_float+0x136>
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	4299      	cmp	r1, r3
 8005b60:	dd41      	ble.n	8005be6 <_printf_float+0x1ba>
 8005b62:	f1ab 0302 	sub.w	r3, fp, #2
 8005b66:	fa5f fb83 	uxtb.w	fp, r3
 8005b6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b6e:	d820      	bhi.n	8005bb2 <_printf_float+0x186>
 8005b70:	3901      	subs	r1, #1
 8005b72:	465a      	mov	r2, fp
 8005b74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b78:	9109      	str	r1, [sp, #36]	; 0x24
 8005b7a:	f7ff ff19 	bl	80059b0 <__exponent>
 8005b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b80:	1813      	adds	r3, r2, r0
 8005b82:	2a01      	cmp	r2, #1
 8005b84:	4681      	mov	r9, r0
 8005b86:	6123      	str	r3, [r4, #16]
 8005b88:	dc02      	bgt.n	8005b90 <_printf_float+0x164>
 8005b8a:	6822      	ldr	r2, [r4, #0]
 8005b8c:	07d2      	lsls	r2, r2, #31
 8005b8e:	d501      	bpl.n	8005b94 <_printf_float+0x168>
 8005b90:	3301      	adds	r3, #1
 8005b92:	6123      	str	r3, [r4, #16]
 8005b94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d09c      	beq.n	8005ad6 <_printf_float+0xaa>
 8005b9c:	232d      	movs	r3, #45	; 0x2d
 8005b9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba2:	e798      	b.n	8005ad6 <_printf_float+0xaa>
 8005ba4:	9a06      	ldr	r2, [sp, #24]
 8005ba6:	2a47      	cmp	r2, #71	; 0x47
 8005ba8:	d1be      	bne.n	8005b28 <_printf_float+0xfc>
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1bc      	bne.n	8005b28 <_printf_float+0xfc>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e7b9      	b.n	8005b26 <_printf_float+0xfa>
 8005bb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005bb6:	d118      	bne.n	8005bea <_printf_float+0x1be>
 8005bb8:	2900      	cmp	r1, #0
 8005bba:	6863      	ldr	r3, [r4, #4]
 8005bbc:	dd0b      	ble.n	8005bd6 <_printf_float+0x1aa>
 8005bbe:	6121      	str	r1, [r4, #16]
 8005bc0:	b913      	cbnz	r3, 8005bc8 <_printf_float+0x19c>
 8005bc2:	6822      	ldr	r2, [r4, #0]
 8005bc4:	07d0      	lsls	r0, r2, #31
 8005bc6:	d502      	bpl.n	8005bce <_printf_float+0x1a2>
 8005bc8:	3301      	adds	r3, #1
 8005bca:	440b      	add	r3, r1
 8005bcc:	6123      	str	r3, [r4, #16]
 8005bce:	65a1      	str	r1, [r4, #88]	; 0x58
 8005bd0:	f04f 0900 	mov.w	r9, #0
 8005bd4:	e7de      	b.n	8005b94 <_printf_float+0x168>
 8005bd6:	b913      	cbnz	r3, 8005bde <_printf_float+0x1b2>
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	07d2      	lsls	r2, r2, #31
 8005bdc:	d501      	bpl.n	8005be2 <_printf_float+0x1b6>
 8005bde:	3302      	adds	r3, #2
 8005be0:	e7f4      	b.n	8005bcc <_printf_float+0x1a0>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e7f2      	b.n	8005bcc <_printf_float+0x1a0>
 8005be6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bec:	4299      	cmp	r1, r3
 8005bee:	db05      	blt.n	8005bfc <_printf_float+0x1d0>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	6121      	str	r1, [r4, #16]
 8005bf4:	07d8      	lsls	r0, r3, #31
 8005bf6:	d5ea      	bpl.n	8005bce <_printf_float+0x1a2>
 8005bf8:	1c4b      	adds	r3, r1, #1
 8005bfa:	e7e7      	b.n	8005bcc <_printf_float+0x1a0>
 8005bfc:	2900      	cmp	r1, #0
 8005bfe:	bfd4      	ite	le
 8005c00:	f1c1 0202 	rsble	r2, r1, #2
 8005c04:	2201      	movgt	r2, #1
 8005c06:	4413      	add	r3, r2
 8005c08:	e7e0      	b.n	8005bcc <_printf_float+0x1a0>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	055a      	lsls	r2, r3, #21
 8005c0e:	d407      	bmi.n	8005c20 <_printf_float+0x1f4>
 8005c10:	6923      	ldr	r3, [r4, #16]
 8005c12:	4642      	mov	r2, r8
 8005c14:	4631      	mov	r1, r6
 8005c16:	4628      	mov	r0, r5
 8005c18:	47b8      	blx	r7
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d12c      	bne.n	8005c78 <_printf_float+0x24c>
 8005c1e:	e764      	b.n	8005aea <_printf_float+0xbe>
 8005c20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c24:	f240 80e0 	bls.w	8005de8 <_printf_float+0x3bc>
 8005c28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f7fa ff52 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d034      	beq.n	8005ca2 <_printf_float+0x276>
 8005c38:	4a37      	ldr	r2, [pc, #220]	; (8005d18 <_printf_float+0x2ec>)
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4628      	mov	r0, r5
 8005c40:	47b8      	blx	r7
 8005c42:	3001      	adds	r0, #1
 8005c44:	f43f af51 	beq.w	8005aea <_printf_float+0xbe>
 8005c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	db02      	blt.n	8005c56 <_printf_float+0x22a>
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	07d8      	lsls	r0, r3, #31
 8005c54:	d510      	bpl.n	8005c78 <_printf_float+0x24c>
 8005c56:	ee18 3a10 	vmov	r3, s16
 8005c5a:	4652      	mov	r2, sl
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	4628      	mov	r0, r5
 8005c60:	47b8      	blx	r7
 8005c62:	3001      	adds	r0, #1
 8005c64:	f43f af41 	beq.w	8005aea <_printf_float+0xbe>
 8005c68:	f04f 0800 	mov.w	r8, #0
 8005c6c:	f104 091a 	add.w	r9, r4, #26
 8005c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c72:	3b01      	subs	r3, #1
 8005c74:	4543      	cmp	r3, r8
 8005c76:	dc09      	bgt.n	8005c8c <_printf_float+0x260>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	079b      	lsls	r3, r3, #30
 8005c7c:	f100 8107 	bmi.w	8005e8e <_printf_float+0x462>
 8005c80:	68e0      	ldr	r0, [r4, #12]
 8005c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c84:	4298      	cmp	r0, r3
 8005c86:	bfb8      	it	lt
 8005c88:	4618      	movlt	r0, r3
 8005c8a:	e730      	b.n	8005aee <_printf_float+0xc2>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	464a      	mov	r2, r9
 8005c90:	4631      	mov	r1, r6
 8005c92:	4628      	mov	r0, r5
 8005c94:	47b8      	blx	r7
 8005c96:	3001      	adds	r0, #1
 8005c98:	f43f af27 	beq.w	8005aea <_printf_float+0xbe>
 8005c9c:	f108 0801 	add.w	r8, r8, #1
 8005ca0:	e7e6      	b.n	8005c70 <_printf_float+0x244>
 8005ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	dc39      	bgt.n	8005d1c <_printf_float+0x2f0>
 8005ca8:	4a1b      	ldr	r2, [pc, #108]	; (8005d18 <_printf_float+0x2ec>)
 8005caa:	2301      	movs	r3, #1
 8005cac:	4631      	mov	r1, r6
 8005cae:	4628      	mov	r0, r5
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	f43f af19 	beq.w	8005aea <_printf_float+0xbe>
 8005cb8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	d102      	bne.n	8005cc6 <_printf_float+0x29a>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	07d9      	lsls	r1, r3, #31
 8005cc4:	d5d8      	bpl.n	8005c78 <_printf_float+0x24c>
 8005cc6:	ee18 3a10 	vmov	r3, s16
 8005cca:	4652      	mov	r2, sl
 8005ccc:	4631      	mov	r1, r6
 8005cce:	4628      	mov	r0, r5
 8005cd0:	47b8      	blx	r7
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	f43f af09 	beq.w	8005aea <_printf_float+0xbe>
 8005cd8:	f04f 0900 	mov.w	r9, #0
 8005cdc:	f104 0a1a 	add.w	sl, r4, #26
 8005ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce2:	425b      	negs	r3, r3
 8005ce4:	454b      	cmp	r3, r9
 8005ce6:	dc01      	bgt.n	8005cec <_printf_float+0x2c0>
 8005ce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cea:	e792      	b.n	8005c12 <_printf_float+0x1e6>
 8005cec:	2301      	movs	r3, #1
 8005cee:	4652      	mov	r2, sl
 8005cf0:	4631      	mov	r1, r6
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	47b8      	blx	r7
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	f43f aef7 	beq.w	8005aea <_printf_float+0xbe>
 8005cfc:	f109 0901 	add.w	r9, r9, #1
 8005d00:	e7ee      	b.n	8005ce0 <_printf_float+0x2b4>
 8005d02:	bf00      	nop
 8005d04:	7fefffff 	.word	0x7fefffff
 8005d08:	0800b60c 	.word	0x0800b60c
 8005d0c:	0800b610 	.word	0x0800b610
 8005d10:	0800b614 	.word	0x0800b614
 8005d14:	0800b618 	.word	0x0800b618
 8005d18:	0800b61c 	.word	0x0800b61c
 8005d1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d20:	429a      	cmp	r2, r3
 8005d22:	bfa8      	it	ge
 8005d24:	461a      	movge	r2, r3
 8005d26:	2a00      	cmp	r2, #0
 8005d28:	4691      	mov	r9, r2
 8005d2a:	dc37      	bgt.n	8005d9c <_printf_float+0x370>
 8005d2c:	f04f 0b00 	mov.w	fp, #0
 8005d30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d34:	f104 021a 	add.w	r2, r4, #26
 8005d38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d3a:	9305      	str	r3, [sp, #20]
 8005d3c:	eba3 0309 	sub.w	r3, r3, r9
 8005d40:	455b      	cmp	r3, fp
 8005d42:	dc33      	bgt.n	8005dac <_printf_float+0x380>
 8005d44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	db3b      	blt.n	8005dc4 <_printf_float+0x398>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	07da      	lsls	r2, r3, #31
 8005d50:	d438      	bmi.n	8005dc4 <_printf_float+0x398>
 8005d52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005d56:	eba2 0903 	sub.w	r9, r2, r3
 8005d5a:	9b05      	ldr	r3, [sp, #20]
 8005d5c:	1ad2      	subs	r2, r2, r3
 8005d5e:	4591      	cmp	r9, r2
 8005d60:	bfa8      	it	ge
 8005d62:	4691      	movge	r9, r2
 8005d64:	f1b9 0f00 	cmp.w	r9, #0
 8005d68:	dc35      	bgt.n	8005dd6 <_printf_float+0x3aa>
 8005d6a:	f04f 0800 	mov.w	r8, #0
 8005d6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d72:	f104 0a1a 	add.w	sl, r4, #26
 8005d76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	eba3 0309 	sub.w	r3, r3, r9
 8005d80:	4543      	cmp	r3, r8
 8005d82:	f77f af79 	ble.w	8005c78 <_printf_float+0x24c>
 8005d86:	2301      	movs	r3, #1
 8005d88:	4652      	mov	r2, sl
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	47b8      	blx	r7
 8005d90:	3001      	adds	r0, #1
 8005d92:	f43f aeaa 	beq.w	8005aea <_printf_float+0xbe>
 8005d96:	f108 0801 	add.w	r8, r8, #1
 8005d9a:	e7ec      	b.n	8005d76 <_printf_float+0x34a>
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4642      	mov	r2, r8
 8005da2:	4628      	mov	r0, r5
 8005da4:	47b8      	blx	r7
 8005da6:	3001      	adds	r0, #1
 8005da8:	d1c0      	bne.n	8005d2c <_printf_float+0x300>
 8005daa:	e69e      	b.n	8005aea <_printf_float+0xbe>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	9205      	str	r2, [sp, #20]
 8005db4:	47b8      	blx	r7
 8005db6:	3001      	adds	r0, #1
 8005db8:	f43f ae97 	beq.w	8005aea <_printf_float+0xbe>
 8005dbc:	9a05      	ldr	r2, [sp, #20]
 8005dbe:	f10b 0b01 	add.w	fp, fp, #1
 8005dc2:	e7b9      	b.n	8005d38 <_printf_float+0x30c>
 8005dc4:	ee18 3a10 	vmov	r3, s16
 8005dc8:	4652      	mov	r2, sl
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4628      	mov	r0, r5
 8005dce:	47b8      	blx	r7
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d1be      	bne.n	8005d52 <_printf_float+0x326>
 8005dd4:	e689      	b.n	8005aea <_printf_float+0xbe>
 8005dd6:	9a05      	ldr	r2, [sp, #20]
 8005dd8:	464b      	mov	r3, r9
 8005dda:	4442      	add	r2, r8
 8005ddc:	4631      	mov	r1, r6
 8005dde:	4628      	mov	r0, r5
 8005de0:	47b8      	blx	r7
 8005de2:	3001      	adds	r0, #1
 8005de4:	d1c1      	bne.n	8005d6a <_printf_float+0x33e>
 8005de6:	e680      	b.n	8005aea <_printf_float+0xbe>
 8005de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dea:	2a01      	cmp	r2, #1
 8005dec:	dc01      	bgt.n	8005df2 <_printf_float+0x3c6>
 8005dee:	07db      	lsls	r3, r3, #31
 8005df0:	d53a      	bpl.n	8005e68 <_printf_float+0x43c>
 8005df2:	2301      	movs	r3, #1
 8005df4:	4642      	mov	r2, r8
 8005df6:	4631      	mov	r1, r6
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b8      	blx	r7
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	f43f ae74 	beq.w	8005aea <_printf_float+0xbe>
 8005e02:	ee18 3a10 	vmov	r3, s16
 8005e06:	4652      	mov	r2, sl
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f43f ae6b 	beq.w	8005aea <_printf_float+0xbe>
 8005e14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005e20:	f7fa fe5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e24:	b9d8      	cbnz	r0, 8005e5e <_printf_float+0x432>
 8005e26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005e2a:	f108 0201 	add.w	r2, r8, #1
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b8      	blx	r7
 8005e34:	3001      	adds	r0, #1
 8005e36:	d10e      	bne.n	8005e56 <_printf_float+0x42a>
 8005e38:	e657      	b.n	8005aea <_printf_float+0xbe>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	4652      	mov	r2, sl
 8005e3e:	4631      	mov	r1, r6
 8005e40:	4628      	mov	r0, r5
 8005e42:	47b8      	blx	r7
 8005e44:	3001      	adds	r0, #1
 8005e46:	f43f ae50 	beq.w	8005aea <_printf_float+0xbe>
 8005e4a:	f108 0801 	add.w	r8, r8, #1
 8005e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e50:	3b01      	subs	r3, #1
 8005e52:	4543      	cmp	r3, r8
 8005e54:	dcf1      	bgt.n	8005e3a <_printf_float+0x40e>
 8005e56:	464b      	mov	r3, r9
 8005e58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e5c:	e6da      	b.n	8005c14 <_printf_float+0x1e8>
 8005e5e:	f04f 0800 	mov.w	r8, #0
 8005e62:	f104 0a1a 	add.w	sl, r4, #26
 8005e66:	e7f2      	b.n	8005e4e <_printf_float+0x422>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4642      	mov	r2, r8
 8005e6c:	e7df      	b.n	8005e2e <_printf_float+0x402>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	464a      	mov	r2, r9
 8005e72:	4631      	mov	r1, r6
 8005e74:	4628      	mov	r0, r5
 8005e76:	47b8      	blx	r7
 8005e78:	3001      	adds	r0, #1
 8005e7a:	f43f ae36 	beq.w	8005aea <_printf_float+0xbe>
 8005e7e:	f108 0801 	add.w	r8, r8, #1
 8005e82:	68e3      	ldr	r3, [r4, #12]
 8005e84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e86:	1a5b      	subs	r3, r3, r1
 8005e88:	4543      	cmp	r3, r8
 8005e8a:	dcf0      	bgt.n	8005e6e <_printf_float+0x442>
 8005e8c:	e6f8      	b.n	8005c80 <_printf_float+0x254>
 8005e8e:	f04f 0800 	mov.w	r8, #0
 8005e92:	f104 0919 	add.w	r9, r4, #25
 8005e96:	e7f4      	b.n	8005e82 <_printf_float+0x456>

08005e98 <_printf_common>:
 8005e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9c:	4616      	mov	r6, r2
 8005e9e:	4699      	mov	r9, r3
 8005ea0:	688a      	ldr	r2, [r1, #8]
 8005ea2:	690b      	ldr	r3, [r1, #16]
 8005ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	bfb8      	it	lt
 8005eac:	4613      	movlt	r3, r2
 8005eae:	6033      	str	r3, [r6, #0]
 8005eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eb4:	4607      	mov	r7, r0
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	b10a      	cbz	r2, 8005ebe <_printf_common+0x26>
 8005eba:	3301      	adds	r3, #1
 8005ebc:	6033      	str	r3, [r6, #0]
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	0699      	lsls	r1, r3, #26
 8005ec2:	bf42      	ittt	mi
 8005ec4:	6833      	ldrmi	r3, [r6, #0]
 8005ec6:	3302      	addmi	r3, #2
 8005ec8:	6033      	strmi	r3, [r6, #0]
 8005eca:	6825      	ldr	r5, [r4, #0]
 8005ecc:	f015 0506 	ands.w	r5, r5, #6
 8005ed0:	d106      	bne.n	8005ee0 <_printf_common+0x48>
 8005ed2:	f104 0a19 	add.w	sl, r4, #25
 8005ed6:	68e3      	ldr	r3, [r4, #12]
 8005ed8:	6832      	ldr	r2, [r6, #0]
 8005eda:	1a9b      	subs	r3, r3, r2
 8005edc:	42ab      	cmp	r3, r5
 8005ede:	dc26      	bgt.n	8005f2e <_printf_common+0x96>
 8005ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ee4:	1e13      	subs	r3, r2, #0
 8005ee6:	6822      	ldr	r2, [r4, #0]
 8005ee8:	bf18      	it	ne
 8005eea:	2301      	movne	r3, #1
 8005eec:	0692      	lsls	r2, r2, #26
 8005eee:	d42b      	bmi.n	8005f48 <_printf_common+0xb0>
 8005ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	47c0      	blx	r8
 8005efa:	3001      	adds	r0, #1
 8005efc:	d01e      	beq.n	8005f3c <_printf_common+0xa4>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	6922      	ldr	r2, [r4, #16]
 8005f02:	f003 0306 	and.w	r3, r3, #6
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	bf02      	ittt	eq
 8005f0a:	68e5      	ldreq	r5, [r4, #12]
 8005f0c:	6833      	ldreq	r3, [r6, #0]
 8005f0e:	1aed      	subeq	r5, r5, r3
 8005f10:	68a3      	ldr	r3, [r4, #8]
 8005f12:	bf0c      	ite	eq
 8005f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f18:	2500      	movne	r5, #0
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	bfc4      	itt	gt
 8005f1e:	1a9b      	subgt	r3, r3, r2
 8005f20:	18ed      	addgt	r5, r5, r3
 8005f22:	2600      	movs	r6, #0
 8005f24:	341a      	adds	r4, #26
 8005f26:	42b5      	cmp	r5, r6
 8005f28:	d11a      	bne.n	8005f60 <_printf_common+0xc8>
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	e008      	b.n	8005f40 <_printf_common+0xa8>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4652      	mov	r2, sl
 8005f32:	4649      	mov	r1, r9
 8005f34:	4638      	mov	r0, r7
 8005f36:	47c0      	blx	r8
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d103      	bne.n	8005f44 <_printf_common+0xac>
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f44:	3501      	adds	r5, #1
 8005f46:	e7c6      	b.n	8005ed6 <_printf_common+0x3e>
 8005f48:	18e1      	adds	r1, r4, r3
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	2030      	movs	r0, #48	; 0x30
 8005f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f52:	4422      	add	r2, r4
 8005f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f5c:	3302      	adds	r3, #2
 8005f5e:	e7c7      	b.n	8005ef0 <_printf_common+0x58>
 8005f60:	2301      	movs	r3, #1
 8005f62:	4622      	mov	r2, r4
 8005f64:	4649      	mov	r1, r9
 8005f66:	4638      	mov	r0, r7
 8005f68:	47c0      	blx	r8
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	d0e6      	beq.n	8005f3c <_printf_common+0xa4>
 8005f6e:	3601      	adds	r6, #1
 8005f70:	e7d9      	b.n	8005f26 <_printf_common+0x8e>
	...

08005f74 <_printf_i>:
 8005f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f78:	7e0f      	ldrb	r7, [r1, #24]
 8005f7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f7c:	2f78      	cmp	r7, #120	; 0x78
 8005f7e:	4691      	mov	r9, r2
 8005f80:	4680      	mov	r8, r0
 8005f82:	460c      	mov	r4, r1
 8005f84:	469a      	mov	sl, r3
 8005f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f8a:	d807      	bhi.n	8005f9c <_printf_i+0x28>
 8005f8c:	2f62      	cmp	r7, #98	; 0x62
 8005f8e:	d80a      	bhi.n	8005fa6 <_printf_i+0x32>
 8005f90:	2f00      	cmp	r7, #0
 8005f92:	f000 80d4 	beq.w	800613e <_printf_i+0x1ca>
 8005f96:	2f58      	cmp	r7, #88	; 0x58
 8005f98:	f000 80c0 	beq.w	800611c <_printf_i+0x1a8>
 8005f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fa4:	e03a      	b.n	800601c <_printf_i+0xa8>
 8005fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005faa:	2b15      	cmp	r3, #21
 8005fac:	d8f6      	bhi.n	8005f9c <_printf_i+0x28>
 8005fae:	a101      	add	r1, pc, #4	; (adr r1, 8005fb4 <_printf_i+0x40>)
 8005fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fb4:	0800600d 	.word	0x0800600d
 8005fb8:	08006021 	.word	0x08006021
 8005fbc:	08005f9d 	.word	0x08005f9d
 8005fc0:	08005f9d 	.word	0x08005f9d
 8005fc4:	08005f9d 	.word	0x08005f9d
 8005fc8:	08005f9d 	.word	0x08005f9d
 8005fcc:	08006021 	.word	0x08006021
 8005fd0:	08005f9d 	.word	0x08005f9d
 8005fd4:	08005f9d 	.word	0x08005f9d
 8005fd8:	08005f9d 	.word	0x08005f9d
 8005fdc:	08005f9d 	.word	0x08005f9d
 8005fe0:	08006125 	.word	0x08006125
 8005fe4:	0800604d 	.word	0x0800604d
 8005fe8:	080060df 	.word	0x080060df
 8005fec:	08005f9d 	.word	0x08005f9d
 8005ff0:	08005f9d 	.word	0x08005f9d
 8005ff4:	08006147 	.word	0x08006147
 8005ff8:	08005f9d 	.word	0x08005f9d
 8005ffc:	0800604d 	.word	0x0800604d
 8006000:	08005f9d 	.word	0x08005f9d
 8006004:	08005f9d 	.word	0x08005f9d
 8006008:	080060e7 	.word	0x080060e7
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	1d1a      	adds	r2, r3, #4
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	602a      	str	r2, [r5, #0]
 8006014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800601c:	2301      	movs	r3, #1
 800601e:	e09f      	b.n	8006160 <_printf_i+0x1ec>
 8006020:	6820      	ldr	r0, [r4, #0]
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	0607      	lsls	r7, r0, #24
 8006026:	f103 0104 	add.w	r1, r3, #4
 800602a:	6029      	str	r1, [r5, #0]
 800602c:	d501      	bpl.n	8006032 <_printf_i+0xbe>
 800602e:	681e      	ldr	r6, [r3, #0]
 8006030:	e003      	b.n	800603a <_printf_i+0xc6>
 8006032:	0646      	lsls	r6, r0, #25
 8006034:	d5fb      	bpl.n	800602e <_printf_i+0xba>
 8006036:	f9b3 6000 	ldrsh.w	r6, [r3]
 800603a:	2e00      	cmp	r6, #0
 800603c:	da03      	bge.n	8006046 <_printf_i+0xd2>
 800603e:	232d      	movs	r3, #45	; 0x2d
 8006040:	4276      	negs	r6, r6
 8006042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006046:	485a      	ldr	r0, [pc, #360]	; (80061b0 <_printf_i+0x23c>)
 8006048:	230a      	movs	r3, #10
 800604a:	e012      	b.n	8006072 <_printf_i+0xfe>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	6820      	ldr	r0, [r4, #0]
 8006050:	1d19      	adds	r1, r3, #4
 8006052:	6029      	str	r1, [r5, #0]
 8006054:	0605      	lsls	r5, r0, #24
 8006056:	d501      	bpl.n	800605c <_printf_i+0xe8>
 8006058:	681e      	ldr	r6, [r3, #0]
 800605a:	e002      	b.n	8006062 <_printf_i+0xee>
 800605c:	0641      	lsls	r1, r0, #25
 800605e:	d5fb      	bpl.n	8006058 <_printf_i+0xe4>
 8006060:	881e      	ldrh	r6, [r3, #0]
 8006062:	4853      	ldr	r0, [pc, #332]	; (80061b0 <_printf_i+0x23c>)
 8006064:	2f6f      	cmp	r7, #111	; 0x6f
 8006066:	bf0c      	ite	eq
 8006068:	2308      	moveq	r3, #8
 800606a:	230a      	movne	r3, #10
 800606c:	2100      	movs	r1, #0
 800606e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006072:	6865      	ldr	r5, [r4, #4]
 8006074:	60a5      	str	r5, [r4, #8]
 8006076:	2d00      	cmp	r5, #0
 8006078:	bfa2      	ittt	ge
 800607a:	6821      	ldrge	r1, [r4, #0]
 800607c:	f021 0104 	bicge.w	r1, r1, #4
 8006080:	6021      	strge	r1, [r4, #0]
 8006082:	b90e      	cbnz	r6, 8006088 <_printf_i+0x114>
 8006084:	2d00      	cmp	r5, #0
 8006086:	d04b      	beq.n	8006120 <_printf_i+0x1ac>
 8006088:	4615      	mov	r5, r2
 800608a:	fbb6 f1f3 	udiv	r1, r6, r3
 800608e:	fb03 6711 	mls	r7, r3, r1, r6
 8006092:	5dc7      	ldrb	r7, [r0, r7]
 8006094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006098:	4637      	mov	r7, r6
 800609a:	42bb      	cmp	r3, r7
 800609c:	460e      	mov	r6, r1
 800609e:	d9f4      	bls.n	800608a <_printf_i+0x116>
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d10b      	bne.n	80060bc <_printf_i+0x148>
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	07de      	lsls	r6, r3, #31
 80060a8:	d508      	bpl.n	80060bc <_printf_i+0x148>
 80060aa:	6923      	ldr	r3, [r4, #16]
 80060ac:	6861      	ldr	r1, [r4, #4]
 80060ae:	4299      	cmp	r1, r3
 80060b0:	bfde      	ittt	le
 80060b2:	2330      	movle	r3, #48	; 0x30
 80060b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060bc:	1b52      	subs	r2, r2, r5
 80060be:	6122      	str	r2, [r4, #16]
 80060c0:	f8cd a000 	str.w	sl, [sp]
 80060c4:	464b      	mov	r3, r9
 80060c6:	aa03      	add	r2, sp, #12
 80060c8:	4621      	mov	r1, r4
 80060ca:	4640      	mov	r0, r8
 80060cc:	f7ff fee4 	bl	8005e98 <_printf_common>
 80060d0:	3001      	adds	r0, #1
 80060d2:	d14a      	bne.n	800616a <_printf_i+0x1f6>
 80060d4:	f04f 30ff 	mov.w	r0, #4294967295
 80060d8:	b004      	add	sp, #16
 80060da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	f043 0320 	orr.w	r3, r3, #32
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	4833      	ldr	r0, [pc, #204]	; (80061b4 <_printf_i+0x240>)
 80060e8:	2778      	movs	r7, #120	; 0x78
 80060ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	6829      	ldr	r1, [r5, #0]
 80060f2:	061f      	lsls	r7, r3, #24
 80060f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80060f8:	d402      	bmi.n	8006100 <_printf_i+0x18c>
 80060fa:	065f      	lsls	r7, r3, #25
 80060fc:	bf48      	it	mi
 80060fe:	b2b6      	uxthmi	r6, r6
 8006100:	07df      	lsls	r7, r3, #31
 8006102:	bf48      	it	mi
 8006104:	f043 0320 	orrmi.w	r3, r3, #32
 8006108:	6029      	str	r1, [r5, #0]
 800610a:	bf48      	it	mi
 800610c:	6023      	strmi	r3, [r4, #0]
 800610e:	b91e      	cbnz	r6, 8006118 <_printf_i+0x1a4>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	f023 0320 	bic.w	r3, r3, #32
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	2310      	movs	r3, #16
 800611a:	e7a7      	b.n	800606c <_printf_i+0xf8>
 800611c:	4824      	ldr	r0, [pc, #144]	; (80061b0 <_printf_i+0x23c>)
 800611e:	e7e4      	b.n	80060ea <_printf_i+0x176>
 8006120:	4615      	mov	r5, r2
 8006122:	e7bd      	b.n	80060a0 <_printf_i+0x12c>
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	6826      	ldr	r6, [r4, #0]
 8006128:	6961      	ldr	r1, [r4, #20]
 800612a:	1d18      	adds	r0, r3, #4
 800612c:	6028      	str	r0, [r5, #0]
 800612e:	0635      	lsls	r5, r6, #24
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	d501      	bpl.n	8006138 <_printf_i+0x1c4>
 8006134:	6019      	str	r1, [r3, #0]
 8006136:	e002      	b.n	800613e <_printf_i+0x1ca>
 8006138:	0670      	lsls	r0, r6, #25
 800613a:	d5fb      	bpl.n	8006134 <_printf_i+0x1c0>
 800613c:	8019      	strh	r1, [r3, #0]
 800613e:	2300      	movs	r3, #0
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	4615      	mov	r5, r2
 8006144:	e7bc      	b.n	80060c0 <_printf_i+0x14c>
 8006146:	682b      	ldr	r3, [r5, #0]
 8006148:	1d1a      	adds	r2, r3, #4
 800614a:	602a      	str	r2, [r5, #0]
 800614c:	681d      	ldr	r5, [r3, #0]
 800614e:	6862      	ldr	r2, [r4, #4]
 8006150:	2100      	movs	r1, #0
 8006152:	4628      	mov	r0, r5
 8006154:	f7fa f844 	bl	80001e0 <memchr>
 8006158:	b108      	cbz	r0, 800615e <_printf_i+0x1ea>
 800615a:	1b40      	subs	r0, r0, r5
 800615c:	6060      	str	r0, [r4, #4]
 800615e:	6863      	ldr	r3, [r4, #4]
 8006160:	6123      	str	r3, [r4, #16]
 8006162:	2300      	movs	r3, #0
 8006164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006168:	e7aa      	b.n	80060c0 <_printf_i+0x14c>
 800616a:	6923      	ldr	r3, [r4, #16]
 800616c:	462a      	mov	r2, r5
 800616e:	4649      	mov	r1, r9
 8006170:	4640      	mov	r0, r8
 8006172:	47d0      	blx	sl
 8006174:	3001      	adds	r0, #1
 8006176:	d0ad      	beq.n	80060d4 <_printf_i+0x160>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	079b      	lsls	r3, r3, #30
 800617c:	d413      	bmi.n	80061a6 <_printf_i+0x232>
 800617e:	68e0      	ldr	r0, [r4, #12]
 8006180:	9b03      	ldr	r3, [sp, #12]
 8006182:	4298      	cmp	r0, r3
 8006184:	bfb8      	it	lt
 8006186:	4618      	movlt	r0, r3
 8006188:	e7a6      	b.n	80060d8 <_printf_i+0x164>
 800618a:	2301      	movs	r3, #1
 800618c:	4632      	mov	r2, r6
 800618e:	4649      	mov	r1, r9
 8006190:	4640      	mov	r0, r8
 8006192:	47d0      	blx	sl
 8006194:	3001      	adds	r0, #1
 8006196:	d09d      	beq.n	80060d4 <_printf_i+0x160>
 8006198:	3501      	adds	r5, #1
 800619a:	68e3      	ldr	r3, [r4, #12]
 800619c:	9903      	ldr	r1, [sp, #12]
 800619e:	1a5b      	subs	r3, r3, r1
 80061a0:	42ab      	cmp	r3, r5
 80061a2:	dcf2      	bgt.n	800618a <_printf_i+0x216>
 80061a4:	e7eb      	b.n	800617e <_printf_i+0x20a>
 80061a6:	2500      	movs	r5, #0
 80061a8:	f104 0619 	add.w	r6, r4, #25
 80061ac:	e7f5      	b.n	800619a <_printf_i+0x226>
 80061ae:	bf00      	nop
 80061b0:	0800b61e 	.word	0x0800b61e
 80061b4:	0800b62f 	.word	0x0800b62f

080061b8 <_scanf_float>:
 80061b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061bc:	b087      	sub	sp, #28
 80061be:	4617      	mov	r7, r2
 80061c0:	9303      	str	r3, [sp, #12]
 80061c2:	688b      	ldr	r3, [r1, #8]
 80061c4:	1e5a      	subs	r2, r3, #1
 80061c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80061ca:	bf83      	ittte	hi
 80061cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80061d0:	195b      	addhi	r3, r3, r5
 80061d2:	9302      	strhi	r3, [sp, #8]
 80061d4:	2300      	movls	r3, #0
 80061d6:	bf86      	itte	hi
 80061d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80061dc:	608b      	strhi	r3, [r1, #8]
 80061de:	9302      	strls	r3, [sp, #8]
 80061e0:	680b      	ldr	r3, [r1, #0]
 80061e2:	468b      	mov	fp, r1
 80061e4:	2500      	movs	r5, #0
 80061e6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80061ea:	f84b 3b1c 	str.w	r3, [fp], #28
 80061ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80061f2:	4680      	mov	r8, r0
 80061f4:	460c      	mov	r4, r1
 80061f6:	465e      	mov	r6, fp
 80061f8:	46aa      	mov	sl, r5
 80061fa:	46a9      	mov	r9, r5
 80061fc:	9501      	str	r5, [sp, #4]
 80061fe:	68a2      	ldr	r2, [r4, #8]
 8006200:	b152      	cbz	r2, 8006218 <_scanf_float+0x60>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	2b4e      	cmp	r3, #78	; 0x4e
 8006208:	d864      	bhi.n	80062d4 <_scanf_float+0x11c>
 800620a:	2b40      	cmp	r3, #64	; 0x40
 800620c:	d83c      	bhi.n	8006288 <_scanf_float+0xd0>
 800620e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006212:	b2c8      	uxtb	r0, r1
 8006214:	280e      	cmp	r0, #14
 8006216:	d93a      	bls.n	800628e <_scanf_float+0xd6>
 8006218:	f1b9 0f00 	cmp.w	r9, #0
 800621c:	d003      	beq.n	8006226 <_scanf_float+0x6e>
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	f10a 3aff 	add.w	sl, sl, #4294967295
 800622a:	f1ba 0f01 	cmp.w	sl, #1
 800622e:	f200 8113 	bhi.w	8006458 <_scanf_float+0x2a0>
 8006232:	455e      	cmp	r6, fp
 8006234:	f200 8105 	bhi.w	8006442 <_scanf_float+0x28a>
 8006238:	2501      	movs	r5, #1
 800623a:	4628      	mov	r0, r5
 800623c:	b007      	add	sp, #28
 800623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006242:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006246:	2a0d      	cmp	r2, #13
 8006248:	d8e6      	bhi.n	8006218 <_scanf_float+0x60>
 800624a:	a101      	add	r1, pc, #4	; (adr r1, 8006250 <_scanf_float+0x98>)
 800624c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006250:	0800638f 	.word	0x0800638f
 8006254:	08006219 	.word	0x08006219
 8006258:	08006219 	.word	0x08006219
 800625c:	08006219 	.word	0x08006219
 8006260:	080063ef 	.word	0x080063ef
 8006264:	080063c7 	.word	0x080063c7
 8006268:	08006219 	.word	0x08006219
 800626c:	08006219 	.word	0x08006219
 8006270:	0800639d 	.word	0x0800639d
 8006274:	08006219 	.word	0x08006219
 8006278:	08006219 	.word	0x08006219
 800627c:	08006219 	.word	0x08006219
 8006280:	08006219 	.word	0x08006219
 8006284:	08006355 	.word	0x08006355
 8006288:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800628c:	e7db      	b.n	8006246 <_scanf_float+0x8e>
 800628e:	290e      	cmp	r1, #14
 8006290:	d8c2      	bhi.n	8006218 <_scanf_float+0x60>
 8006292:	a001      	add	r0, pc, #4	; (adr r0, 8006298 <_scanf_float+0xe0>)
 8006294:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006298:	08006347 	.word	0x08006347
 800629c:	08006219 	.word	0x08006219
 80062a0:	08006347 	.word	0x08006347
 80062a4:	080063db 	.word	0x080063db
 80062a8:	08006219 	.word	0x08006219
 80062ac:	080062f5 	.word	0x080062f5
 80062b0:	08006331 	.word	0x08006331
 80062b4:	08006331 	.word	0x08006331
 80062b8:	08006331 	.word	0x08006331
 80062bc:	08006331 	.word	0x08006331
 80062c0:	08006331 	.word	0x08006331
 80062c4:	08006331 	.word	0x08006331
 80062c8:	08006331 	.word	0x08006331
 80062cc:	08006331 	.word	0x08006331
 80062d0:	08006331 	.word	0x08006331
 80062d4:	2b6e      	cmp	r3, #110	; 0x6e
 80062d6:	d809      	bhi.n	80062ec <_scanf_float+0x134>
 80062d8:	2b60      	cmp	r3, #96	; 0x60
 80062da:	d8b2      	bhi.n	8006242 <_scanf_float+0x8a>
 80062dc:	2b54      	cmp	r3, #84	; 0x54
 80062de:	d077      	beq.n	80063d0 <_scanf_float+0x218>
 80062e0:	2b59      	cmp	r3, #89	; 0x59
 80062e2:	d199      	bne.n	8006218 <_scanf_float+0x60>
 80062e4:	2d07      	cmp	r5, #7
 80062e6:	d197      	bne.n	8006218 <_scanf_float+0x60>
 80062e8:	2508      	movs	r5, #8
 80062ea:	e029      	b.n	8006340 <_scanf_float+0x188>
 80062ec:	2b74      	cmp	r3, #116	; 0x74
 80062ee:	d06f      	beq.n	80063d0 <_scanf_float+0x218>
 80062f0:	2b79      	cmp	r3, #121	; 0x79
 80062f2:	e7f6      	b.n	80062e2 <_scanf_float+0x12a>
 80062f4:	6821      	ldr	r1, [r4, #0]
 80062f6:	05c8      	lsls	r0, r1, #23
 80062f8:	d51a      	bpl.n	8006330 <_scanf_float+0x178>
 80062fa:	9b02      	ldr	r3, [sp, #8]
 80062fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006300:	6021      	str	r1, [r4, #0]
 8006302:	f109 0901 	add.w	r9, r9, #1
 8006306:	b11b      	cbz	r3, 8006310 <_scanf_float+0x158>
 8006308:	3b01      	subs	r3, #1
 800630a:	3201      	adds	r2, #1
 800630c:	9302      	str	r3, [sp, #8]
 800630e:	60a2      	str	r2, [r4, #8]
 8006310:	68a3      	ldr	r3, [r4, #8]
 8006312:	3b01      	subs	r3, #1
 8006314:	60a3      	str	r3, [r4, #8]
 8006316:	6923      	ldr	r3, [r4, #16]
 8006318:	3301      	adds	r3, #1
 800631a:	6123      	str	r3, [r4, #16]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3b01      	subs	r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	607b      	str	r3, [r7, #4]
 8006324:	f340 8084 	ble.w	8006430 <_scanf_float+0x278>
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	3301      	adds	r3, #1
 800632c:	603b      	str	r3, [r7, #0]
 800632e:	e766      	b.n	80061fe <_scanf_float+0x46>
 8006330:	eb1a 0f05 	cmn.w	sl, r5
 8006334:	f47f af70 	bne.w	8006218 <_scanf_float+0x60>
 8006338:	6822      	ldr	r2, [r4, #0]
 800633a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800633e:	6022      	str	r2, [r4, #0]
 8006340:	f806 3b01 	strb.w	r3, [r6], #1
 8006344:	e7e4      	b.n	8006310 <_scanf_float+0x158>
 8006346:	6822      	ldr	r2, [r4, #0]
 8006348:	0610      	lsls	r0, r2, #24
 800634a:	f57f af65 	bpl.w	8006218 <_scanf_float+0x60>
 800634e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006352:	e7f4      	b.n	800633e <_scanf_float+0x186>
 8006354:	f1ba 0f00 	cmp.w	sl, #0
 8006358:	d10e      	bne.n	8006378 <_scanf_float+0x1c0>
 800635a:	f1b9 0f00 	cmp.w	r9, #0
 800635e:	d10e      	bne.n	800637e <_scanf_float+0x1c6>
 8006360:	6822      	ldr	r2, [r4, #0]
 8006362:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006366:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800636a:	d108      	bne.n	800637e <_scanf_float+0x1c6>
 800636c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006370:	6022      	str	r2, [r4, #0]
 8006372:	f04f 0a01 	mov.w	sl, #1
 8006376:	e7e3      	b.n	8006340 <_scanf_float+0x188>
 8006378:	f1ba 0f02 	cmp.w	sl, #2
 800637c:	d055      	beq.n	800642a <_scanf_float+0x272>
 800637e:	2d01      	cmp	r5, #1
 8006380:	d002      	beq.n	8006388 <_scanf_float+0x1d0>
 8006382:	2d04      	cmp	r5, #4
 8006384:	f47f af48 	bne.w	8006218 <_scanf_float+0x60>
 8006388:	3501      	adds	r5, #1
 800638a:	b2ed      	uxtb	r5, r5
 800638c:	e7d8      	b.n	8006340 <_scanf_float+0x188>
 800638e:	f1ba 0f01 	cmp.w	sl, #1
 8006392:	f47f af41 	bne.w	8006218 <_scanf_float+0x60>
 8006396:	f04f 0a02 	mov.w	sl, #2
 800639a:	e7d1      	b.n	8006340 <_scanf_float+0x188>
 800639c:	b97d      	cbnz	r5, 80063be <_scanf_float+0x206>
 800639e:	f1b9 0f00 	cmp.w	r9, #0
 80063a2:	f47f af3c 	bne.w	800621e <_scanf_float+0x66>
 80063a6:	6822      	ldr	r2, [r4, #0]
 80063a8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80063ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80063b0:	f47f af39 	bne.w	8006226 <_scanf_float+0x6e>
 80063b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80063b8:	6022      	str	r2, [r4, #0]
 80063ba:	2501      	movs	r5, #1
 80063bc:	e7c0      	b.n	8006340 <_scanf_float+0x188>
 80063be:	2d03      	cmp	r5, #3
 80063c0:	d0e2      	beq.n	8006388 <_scanf_float+0x1d0>
 80063c2:	2d05      	cmp	r5, #5
 80063c4:	e7de      	b.n	8006384 <_scanf_float+0x1cc>
 80063c6:	2d02      	cmp	r5, #2
 80063c8:	f47f af26 	bne.w	8006218 <_scanf_float+0x60>
 80063cc:	2503      	movs	r5, #3
 80063ce:	e7b7      	b.n	8006340 <_scanf_float+0x188>
 80063d0:	2d06      	cmp	r5, #6
 80063d2:	f47f af21 	bne.w	8006218 <_scanf_float+0x60>
 80063d6:	2507      	movs	r5, #7
 80063d8:	e7b2      	b.n	8006340 <_scanf_float+0x188>
 80063da:	6822      	ldr	r2, [r4, #0]
 80063dc:	0591      	lsls	r1, r2, #22
 80063de:	f57f af1b 	bpl.w	8006218 <_scanf_float+0x60>
 80063e2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80063e6:	6022      	str	r2, [r4, #0]
 80063e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80063ec:	e7a8      	b.n	8006340 <_scanf_float+0x188>
 80063ee:	6822      	ldr	r2, [r4, #0]
 80063f0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80063f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80063f8:	d006      	beq.n	8006408 <_scanf_float+0x250>
 80063fa:	0550      	lsls	r0, r2, #21
 80063fc:	f57f af0c 	bpl.w	8006218 <_scanf_float+0x60>
 8006400:	f1b9 0f00 	cmp.w	r9, #0
 8006404:	f43f af0f 	beq.w	8006226 <_scanf_float+0x6e>
 8006408:	0591      	lsls	r1, r2, #22
 800640a:	bf58      	it	pl
 800640c:	9901      	ldrpl	r1, [sp, #4]
 800640e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006412:	bf58      	it	pl
 8006414:	eba9 0101 	subpl.w	r1, r9, r1
 8006418:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800641c:	bf58      	it	pl
 800641e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006422:	6022      	str	r2, [r4, #0]
 8006424:	f04f 0900 	mov.w	r9, #0
 8006428:	e78a      	b.n	8006340 <_scanf_float+0x188>
 800642a:	f04f 0a03 	mov.w	sl, #3
 800642e:	e787      	b.n	8006340 <_scanf_float+0x188>
 8006430:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006434:	4639      	mov	r1, r7
 8006436:	4640      	mov	r0, r8
 8006438:	4798      	blx	r3
 800643a:	2800      	cmp	r0, #0
 800643c:	f43f aedf 	beq.w	80061fe <_scanf_float+0x46>
 8006440:	e6ea      	b.n	8006218 <_scanf_float+0x60>
 8006442:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006446:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800644a:	463a      	mov	r2, r7
 800644c:	4640      	mov	r0, r8
 800644e:	4798      	blx	r3
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	3b01      	subs	r3, #1
 8006454:	6123      	str	r3, [r4, #16]
 8006456:	e6ec      	b.n	8006232 <_scanf_float+0x7a>
 8006458:	1e6b      	subs	r3, r5, #1
 800645a:	2b06      	cmp	r3, #6
 800645c:	d825      	bhi.n	80064aa <_scanf_float+0x2f2>
 800645e:	2d02      	cmp	r5, #2
 8006460:	d836      	bhi.n	80064d0 <_scanf_float+0x318>
 8006462:	455e      	cmp	r6, fp
 8006464:	f67f aee8 	bls.w	8006238 <_scanf_float+0x80>
 8006468:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800646c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006470:	463a      	mov	r2, r7
 8006472:	4640      	mov	r0, r8
 8006474:	4798      	blx	r3
 8006476:	6923      	ldr	r3, [r4, #16]
 8006478:	3b01      	subs	r3, #1
 800647a:	6123      	str	r3, [r4, #16]
 800647c:	e7f1      	b.n	8006462 <_scanf_float+0x2aa>
 800647e:	9802      	ldr	r0, [sp, #8]
 8006480:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006484:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006488:	9002      	str	r0, [sp, #8]
 800648a:	463a      	mov	r2, r7
 800648c:	4640      	mov	r0, r8
 800648e:	4798      	blx	r3
 8006490:	6923      	ldr	r3, [r4, #16]
 8006492:	3b01      	subs	r3, #1
 8006494:	6123      	str	r3, [r4, #16]
 8006496:	f10a 3aff 	add.w	sl, sl, #4294967295
 800649a:	fa5f fa8a 	uxtb.w	sl, sl
 800649e:	f1ba 0f02 	cmp.w	sl, #2
 80064a2:	d1ec      	bne.n	800647e <_scanf_float+0x2c6>
 80064a4:	3d03      	subs	r5, #3
 80064a6:	b2ed      	uxtb	r5, r5
 80064a8:	1b76      	subs	r6, r6, r5
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	05da      	lsls	r2, r3, #23
 80064ae:	d52f      	bpl.n	8006510 <_scanf_float+0x358>
 80064b0:	055b      	lsls	r3, r3, #21
 80064b2:	d510      	bpl.n	80064d6 <_scanf_float+0x31e>
 80064b4:	455e      	cmp	r6, fp
 80064b6:	f67f aebf 	bls.w	8006238 <_scanf_float+0x80>
 80064ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80064c2:	463a      	mov	r2, r7
 80064c4:	4640      	mov	r0, r8
 80064c6:	4798      	blx	r3
 80064c8:	6923      	ldr	r3, [r4, #16]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	6123      	str	r3, [r4, #16]
 80064ce:	e7f1      	b.n	80064b4 <_scanf_float+0x2fc>
 80064d0:	46aa      	mov	sl, r5
 80064d2:	9602      	str	r6, [sp, #8]
 80064d4:	e7df      	b.n	8006496 <_scanf_float+0x2de>
 80064d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80064da:	6923      	ldr	r3, [r4, #16]
 80064dc:	2965      	cmp	r1, #101	; 0x65
 80064de:	f103 33ff 	add.w	r3, r3, #4294967295
 80064e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80064e6:	6123      	str	r3, [r4, #16]
 80064e8:	d00c      	beq.n	8006504 <_scanf_float+0x34c>
 80064ea:	2945      	cmp	r1, #69	; 0x45
 80064ec:	d00a      	beq.n	8006504 <_scanf_float+0x34c>
 80064ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80064f2:	463a      	mov	r2, r7
 80064f4:	4640      	mov	r0, r8
 80064f6:	4798      	blx	r3
 80064f8:	6923      	ldr	r3, [r4, #16]
 80064fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80064fe:	3b01      	subs	r3, #1
 8006500:	1eb5      	subs	r5, r6, #2
 8006502:	6123      	str	r3, [r4, #16]
 8006504:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006508:	463a      	mov	r2, r7
 800650a:	4640      	mov	r0, r8
 800650c:	4798      	blx	r3
 800650e:	462e      	mov	r6, r5
 8006510:	6825      	ldr	r5, [r4, #0]
 8006512:	f015 0510 	ands.w	r5, r5, #16
 8006516:	d158      	bne.n	80065ca <_scanf_float+0x412>
 8006518:	7035      	strb	r5, [r6, #0]
 800651a:	6823      	ldr	r3, [r4, #0]
 800651c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006524:	d11c      	bne.n	8006560 <_scanf_float+0x3a8>
 8006526:	9b01      	ldr	r3, [sp, #4]
 8006528:	454b      	cmp	r3, r9
 800652a:	eba3 0209 	sub.w	r2, r3, r9
 800652e:	d124      	bne.n	800657a <_scanf_float+0x3c2>
 8006530:	2200      	movs	r2, #0
 8006532:	4659      	mov	r1, fp
 8006534:	4640      	mov	r0, r8
 8006536:	f002 fc8b 	bl	8008e50 <_strtod_r>
 800653a:	9b03      	ldr	r3, [sp, #12]
 800653c:	6821      	ldr	r1, [r4, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f011 0f02 	tst.w	r1, #2
 8006544:	ec57 6b10 	vmov	r6, r7, d0
 8006548:	f103 0204 	add.w	r2, r3, #4
 800654c:	d020      	beq.n	8006590 <_scanf_float+0x3d8>
 800654e:	9903      	ldr	r1, [sp, #12]
 8006550:	600a      	str	r2, [r1, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	e9c3 6700 	strd	r6, r7, [r3]
 8006558:	68e3      	ldr	r3, [r4, #12]
 800655a:	3301      	adds	r3, #1
 800655c:	60e3      	str	r3, [r4, #12]
 800655e:	e66c      	b.n	800623a <_scanf_float+0x82>
 8006560:	9b04      	ldr	r3, [sp, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0e4      	beq.n	8006530 <_scanf_float+0x378>
 8006566:	9905      	ldr	r1, [sp, #20]
 8006568:	230a      	movs	r3, #10
 800656a:	462a      	mov	r2, r5
 800656c:	3101      	adds	r1, #1
 800656e:	4640      	mov	r0, r8
 8006570:	f002 fcf6 	bl	8008f60 <_strtol_r>
 8006574:	9b04      	ldr	r3, [sp, #16]
 8006576:	9e05      	ldr	r6, [sp, #20]
 8006578:	1ac2      	subs	r2, r0, r3
 800657a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800657e:	429e      	cmp	r6, r3
 8006580:	bf28      	it	cs
 8006582:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006586:	4912      	ldr	r1, [pc, #72]	; (80065d0 <_scanf_float+0x418>)
 8006588:	4630      	mov	r0, r6
 800658a:	f000 f91b 	bl	80067c4 <siprintf>
 800658e:	e7cf      	b.n	8006530 <_scanf_float+0x378>
 8006590:	f011 0f04 	tst.w	r1, #4
 8006594:	9903      	ldr	r1, [sp, #12]
 8006596:	600a      	str	r2, [r1, #0]
 8006598:	d1db      	bne.n	8006552 <_scanf_float+0x39a>
 800659a:	f8d3 8000 	ldr.w	r8, [r3]
 800659e:	ee10 2a10 	vmov	r2, s0
 80065a2:	ee10 0a10 	vmov	r0, s0
 80065a6:	463b      	mov	r3, r7
 80065a8:	4639      	mov	r1, r7
 80065aa:	f7fa fac7 	bl	8000b3c <__aeabi_dcmpun>
 80065ae:	b128      	cbz	r0, 80065bc <_scanf_float+0x404>
 80065b0:	4808      	ldr	r0, [pc, #32]	; (80065d4 <_scanf_float+0x41c>)
 80065b2:	f000 fa13 	bl	80069dc <nanf>
 80065b6:	ed88 0a00 	vstr	s0, [r8]
 80065ba:	e7cd      	b.n	8006558 <_scanf_float+0x3a0>
 80065bc:	4630      	mov	r0, r6
 80065be:	4639      	mov	r1, r7
 80065c0:	f7fa fb1a 	bl	8000bf8 <__aeabi_d2f>
 80065c4:	f8c8 0000 	str.w	r0, [r8]
 80065c8:	e7c6      	b.n	8006558 <_scanf_float+0x3a0>
 80065ca:	2500      	movs	r5, #0
 80065cc:	e635      	b.n	800623a <_scanf_float+0x82>
 80065ce:	bf00      	nop
 80065d0:	0800b640 	.word	0x0800b640
 80065d4:	0800b9d5 	.word	0x0800b9d5

080065d8 <std>:
 80065d8:	2300      	movs	r3, #0
 80065da:	b510      	push	{r4, lr}
 80065dc:	4604      	mov	r4, r0
 80065de:	e9c0 3300 	strd	r3, r3, [r0]
 80065e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065e6:	6083      	str	r3, [r0, #8]
 80065e8:	8181      	strh	r1, [r0, #12]
 80065ea:	6643      	str	r3, [r0, #100]	; 0x64
 80065ec:	81c2      	strh	r2, [r0, #14]
 80065ee:	6183      	str	r3, [r0, #24]
 80065f0:	4619      	mov	r1, r3
 80065f2:	2208      	movs	r2, #8
 80065f4:	305c      	adds	r0, #92	; 0x5c
 80065f6:	f000 f962 	bl	80068be <memset>
 80065fa:	4b0d      	ldr	r3, [pc, #52]	; (8006630 <std+0x58>)
 80065fc:	6263      	str	r3, [r4, #36]	; 0x24
 80065fe:	4b0d      	ldr	r3, [pc, #52]	; (8006634 <std+0x5c>)
 8006600:	62a3      	str	r3, [r4, #40]	; 0x28
 8006602:	4b0d      	ldr	r3, [pc, #52]	; (8006638 <std+0x60>)
 8006604:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006606:	4b0d      	ldr	r3, [pc, #52]	; (800663c <std+0x64>)
 8006608:	6323      	str	r3, [r4, #48]	; 0x30
 800660a:	4b0d      	ldr	r3, [pc, #52]	; (8006640 <std+0x68>)
 800660c:	6224      	str	r4, [r4, #32]
 800660e:	429c      	cmp	r4, r3
 8006610:	d006      	beq.n	8006620 <std+0x48>
 8006612:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006616:	4294      	cmp	r4, r2
 8006618:	d002      	beq.n	8006620 <std+0x48>
 800661a:	33d0      	adds	r3, #208	; 0xd0
 800661c:	429c      	cmp	r4, r3
 800661e:	d105      	bne.n	800662c <std+0x54>
 8006620:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006628:	f000 b9c6 	b.w	80069b8 <__retarget_lock_init_recursive>
 800662c:	bd10      	pop	{r4, pc}
 800662e:	bf00      	nop
 8006630:	08006805 	.word	0x08006805
 8006634:	08006827 	.word	0x08006827
 8006638:	0800685f 	.word	0x0800685f
 800663c:	08006883 	.word	0x08006883
 8006640:	20000a88 	.word	0x20000a88

08006644 <stdio_exit_handler>:
 8006644:	4a02      	ldr	r2, [pc, #8]	; (8006650 <stdio_exit_handler+0xc>)
 8006646:	4903      	ldr	r1, [pc, #12]	; (8006654 <stdio_exit_handler+0x10>)
 8006648:	4803      	ldr	r0, [pc, #12]	; (8006658 <stdio_exit_handler+0x14>)
 800664a:	f000 b869 	b.w	8006720 <_fwalk_sglue>
 800664e:	bf00      	nop
 8006650:	20000020 	.word	0x20000020
 8006654:	08009321 	.word	0x08009321
 8006658:	2000002c 	.word	0x2000002c

0800665c <cleanup_stdio>:
 800665c:	6841      	ldr	r1, [r0, #4]
 800665e:	4b0c      	ldr	r3, [pc, #48]	; (8006690 <cleanup_stdio+0x34>)
 8006660:	4299      	cmp	r1, r3
 8006662:	b510      	push	{r4, lr}
 8006664:	4604      	mov	r4, r0
 8006666:	d001      	beq.n	800666c <cleanup_stdio+0x10>
 8006668:	f002 fe5a 	bl	8009320 <_fflush_r>
 800666c:	68a1      	ldr	r1, [r4, #8]
 800666e:	4b09      	ldr	r3, [pc, #36]	; (8006694 <cleanup_stdio+0x38>)
 8006670:	4299      	cmp	r1, r3
 8006672:	d002      	beq.n	800667a <cleanup_stdio+0x1e>
 8006674:	4620      	mov	r0, r4
 8006676:	f002 fe53 	bl	8009320 <_fflush_r>
 800667a:	68e1      	ldr	r1, [r4, #12]
 800667c:	4b06      	ldr	r3, [pc, #24]	; (8006698 <cleanup_stdio+0x3c>)
 800667e:	4299      	cmp	r1, r3
 8006680:	d004      	beq.n	800668c <cleanup_stdio+0x30>
 8006682:	4620      	mov	r0, r4
 8006684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006688:	f002 be4a 	b.w	8009320 <_fflush_r>
 800668c:	bd10      	pop	{r4, pc}
 800668e:	bf00      	nop
 8006690:	20000a88 	.word	0x20000a88
 8006694:	20000af0 	.word	0x20000af0
 8006698:	20000b58 	.word	0x20000b58

0800669c <global_stdio_init.part.0>:
 800669c:	b510      	push	{r4, lr}
 800669e:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <global_stdio_init.part.0+0x30>)
 80066a0:	4c0b      	ldr	r4, [pc, #44]	; (80066d0 <global_stdio_init.part.0+0x34>)
 80066a2:	4a0c      	ldr	r2, [pc, #48]	; (80066d4 <global_stdio_init.part.0+0x38>)
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	4620      	mov	r0, r4
 80066a8:	2200      	movs	r2, #0
 80066aa:	2104      	movs	r1, #4
 80066ac:	f7ff ff94 	bl	80065d8 <std>
 80066b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80066b4:	2201      	movs	r2, #1
 80066b6:	2109      	movs	r1, #9
 80066b8:	f7ff ff8e 	bl	80065d8 <std>
 80066bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80066c0:	2202      	movs	r2, #2
 80066c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066c6:	2112      	movs	r1, #18
 80066c8:	f7ff bf86 	b.w	80065d8 <std>
 80066cc:	20000bc0 	.word	0x20000bc0
 80066d0:	20000a88 	.word	0x20000a88
 80066d4:	08006645 	.word	0x08006645

080066d8 <__sfp_lock_acquire>:
 80066d8:	4801      	ldr	r0, [pc, #4]	; (80066e0 <__sfp_lock_acquire+0x8>)
 80066da:	f000 b96e 	b.w	80069ba <__retarget_lock_acquire_recursive>
 80066de:	bf00      	nop
 80066e0:	20000bc9 	.word	0x20000bc9

080066e4 <__sfp_lock_release>:
 80066e4:	4801      	ldr	r0, [pc, #4]	; (80066ec <__sfp_lock_release+0x8>)
 80066e6:	f000 b969 	b.w	80069bc <__retarget_lock_release_recursive>
 80066ea:	bf00      	nop
 80066ec:	20000bc9 	.word	0x20000bc9

080066f0 <__sinit>:
 80066f0:	b510      	push	{r4, lr}
 80066f2:	4604      	mov	r4, r0
 80066f4:	f7ff fff0 	bl	80066d8 <__sfp_lock_acquire>
 80066f8:	6a23      	ldr	r3, [r4, #32]
 80066fa:	b11b      	cbz	r3, 8006704 <__sinit+0x14>
 80066fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006700:	f7ff bff0 	b.w	80066e4 <__sfp_lock_release>
 8006704:	4b04      	ldr	r3, [pc, #16]	; (8006718 <__sinit+0x28>)
 8006706:	6223      	str	r3, [r4, #32]
 8006708:	4b04      	ldr	r3, [pc, #16]	; (800671c <__sinit+0x2c>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1f5      	bne.n	80066fc <__sinit+0xc>
 8006710:	f7ff ffc4 	bl	800669c <global_stdio_init.part.0>
 8006714:	e7f2      	b.n	80066fc <__sinit+0xc>
 8006716:	bf00      	nop
 8006718:	0800665d 	.word	0x0800665d
 800671c:	20000bc0 	.word	0x20000bc0

08006720 <_fwalk_sglue>:
 8006720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006724:	4607      	mov	r7, r0
 8006726:	4688      	mov	r8, r1
 8006728:	4614      	mov	r4, r2
 800672a:	2600      	movs	r6, #0
 800672c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006730:	f1b9 0901 	subs.w	r9, r9, #1
 8006734:	d505      	bpl.n	8006742 <_fwalk_sglue+0x22>
 8006736:	6824      	ldr	r4, [r4, #0]
 8006738:	2c00      	cmp	r4, #0
 800673a:	d1f7      	bne.n	800672c <_fwalk_sglue+0xc>
 800673c:	4630      	mov	r0, r6
 800673e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006742:	89ab      	ldrh	r3, [r5, #12]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d907      	bls.n	8006758 <_fwalk_sglue+0x38>
 8006748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800674c:	3301      	adds	r3, #1
 800674e:	d003      	beq.n	8006758 <_fwalk_sglue+0x38>
 8006750:	4629      	mov	r1, r5
 8006752:	4638      	mov	r0, r7
 8006754:	47c0      	blx	r8
 8006756:	4306      	orrs	r6, r0
 8006758:	3568      	adds	r5, #104	; 0x68
 800675a:	e7e9      	b.n	8006730 <_fwalk_sglue+0x10>

0800675c <sniprintf>:
 800675c:	b40c      	push	{r2, r3}
 800675e:	b530      	push	{r4, r5, lr}
 8006760:	4b17      	ldr	r3, [pc, #92]	; (80067c0 <sniprintf+0x64>)
 8006762:	1e0c      	subs	r4, r1, #0
 8006764:	681d      	ldr	r5, [r3, #0]
 8006766:	b09d      	sub	sp, #116	; 0x74
 8006768:	da08      	bge.n	800677c <sniprintf+0x20>
 800676a:	238b      	movs	r3, #139	; 0x8b
 800676c:	602b      	str	r3, [r5, #0]
 800676e:	f04f 30ff 	mov.w	r0, #4294967295
 8006772:	b01d      	add	sp, #116	; 0x74
 8006774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006778:	b002      	add	sp, #8
 800677a:	4770      	bx	lr
 800677c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006780:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006784:	bf14      	ite	ne
 8006786:	f104 33ff 	addne.w	r3, r4, #4294967295
 800678a:	4623      	moveq	r3, r4
 800678c:	9304      	str	r3, [sp, #16]
 800678e:	9307      	str	r3, [sp, #28]
 8006790:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006794:	9002      	str	r0, [sp, #8]
 8006796:	9006      	str	r0, [sp, #24]
 8006798:	f8ad 3016 	strh.w	r3, [sp, #22]
 800679c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800679e:	ab21      	add	r3, sp, #132	; 0x84
 80067a0:	a902      	add	r1, sp, #8
 80067a2:	4628      	mov	r0, r5
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	f002 fc37 	bl	8009018 <_svfiprintf_r>
 80067aa:	1c43      	adds	r3, r0, #1
 80067ac:	bfbc      	itt	lt
 80067ae:	238b      	movlt	r3, #139	; 0x8b
 80067b0:	602b      	strlt	r3, [r5, #0]
 80067b2:	2c00      	cmp	r4, #0
 80067b4:	d0dd      	beq.n	8006772 <sniprintf+0x16>
 80067b6:	9b02      	ldr	r3, [sp, #8]
 80067b8:	2200      	movs	r2, #0
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	e7d9      	b.n	8006772 <sniprintf+0x16>
 80067be:	bf00      	nop
 80067c0:	20000078 	.word	0x20000078

080067c4 <siprintf>:
 80067c4:	b40e      	push	{r1, r2, r3}
 80067c6:	b500      	push	{lr}
 80067c8:	b09c      	sub	sp, #112	; 0x70
 80067ca:	ab1d      	add	r3, sp, #116	; 0x74
 80067cc:	9002      	str	r0, [sp, #8]
 80067ce:	9006      	str	r0, [sp, #24]
 80067d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067d4:	4809      	ldr	r0, [pc, #36]	; (80067fc <siprintf+0x38>)
 80067d6:	9107      	str	r1, [sp, #28]
 80067d8:	9104      	str	r1, [sp, #16]
 80067da:	4909      	ldr	r1, [pc, #36]	; (8006800 <siprintf+0x3c>)
 80067dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e0:	9105      	str	r1, [sp, #20]
 80067e2:	6800      	ldr	r0, [r0, #0]
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	a902      	add	r1, sp, #8
 80067e8:	f002 fc16 	bl	8009018 <_svfiprintf_r>
 80067ec:	9b02      	ldr	r3, [sp, #8]
 80067ee:	2200      	movs	r2, #0
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	b01c      	add	sp, #112	; 0x70
 80067f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80067f8:	b003      	add	sp, #12
 80067fa:	4770      	bx	lr
 80067fc:	20000078 	.word	0x20000078
 8006800:	ffff0208 	.word	0xffff0208

08006804 <__sread>:
 8006804:	b510      	push	{r4, lr}
 8006806:	460c      	mov	r4, r1
 8006808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680c:	f000 f886 	bl	800691c <_read_r>
 8006810:	2800      	cmp	r0, #0
 8006812:	bfab      	itete	ge
 8006814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006816:	89a3      	ldrhlt	r3, [r4, #12]
 8006818:	181b      	addge	r3, r3, r0
 800681a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800681e:	bfac      	ite	ge
 8006820:	6563      	strge	r3, [r4, #84]	; 0x54
 8006822:	81a3      	strhlt	r3, [r4, #12]
 8006824:	bd10      	pop	{r4, pc}

08006826 <__swrite>:
 8006826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800682a:	461f      	mov	r7, r3
 800682c:	898b      	ldrh	r3, [r1, #12]
 800682e:	05db      	lsls	r3, r3, #23
 8006830:	4605      	mov	r5, r0
 8006832:	460c      	mov	r4, r1
 8006834:	4616      	mov	r6, r2
 8006836:	d505      	bpl.n	8006844 <__swrite+0x1e>
 8006838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683c:	2302      	movs	r3, #2
 800683e:	2200      	movs	r2, #0
 8006840:	f000 f85a 	bl	80068f8 <_lseek_r>
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800684a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800684e:	81a3      	strh	r3, [r4, #12]
 8006850:	4632      	mov	r2, r6
 8006852:	463b      	mov	r3, r7
 8006854:	4628      	mov	r0, r5
 8006856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800685a:	f000 b871 	b.w	8006940 <_write_r>

0800685e <__sseek>:
 800685e:	b510      	push	{r4, lr}
 8006860:	460c      	mov	r4, r1
 8006862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006866:	f000 f847 	bl	80068f8 <_lseek_r>
 800686a:	1c43      	adds	r3, r0, #1
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	bf15      	itete	ne
 8006870:	6560      	strne	r0, [r4, #84]	; 0x54
 8006872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800687a:	81a3      	strheq	r3, [r4, #12]
 800687c:	bf18      	it	ne
 800687e:	81a3      	strhne	r3, [r4, #12]
 8006880:	bd10      	pop	{r4, pc}

08006882 <__sclose>:
 8006882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006886:	f000 b827 	b.w	80068d8 <_close_r>

0800688a <memmove>:
 800688a:	4288      	cmp	r0, r1
 800688c:	b510      	push	{r4, lr}
 800688e:	eb01 0402 	add.w	r4, r1, r2
 8006892:	d902      	bls.n	800689a <memmove+0x10>
 8006894:	4284      	cmp	r4, r0
 8006896:	4623      	mov	r3, r4
 8006898:	d807      	bhi.n	80068aa <memmove+0x20>
 800689a:	1e43      	subs	r3, r0, #1
 800689c:	42a1      	cmp	r1, r4
 800689e:	d008      	beq.n	80068b2 <memmove+0x28>
 80068a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068a8:	e7f8      	b.n	800689c <memmove+0x12>
 80068aa:	4402      	add	r2, r0
 80068ac:	4601      	mov	r1, r0
 80068ae:	428a      	cmp	r2, r1
 80068b0:	d100      	bne.n	80068b4 <memmove+0x2a>
 80068b2:	bd10      	pop	{r4, pc}
 80068b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068bc:	e7f7      	b.n	80068ae <memmove+0x24>

080068be <memset>:
 80068be:	4402      	add	r2, r0
 80068c0:	4603      	mov	r3, r0
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d100      	bne.n	80068c8 <memset+0xa>
 80068c6:	4770      	bx	lr
 80068c8:	f803 1b01 	strb.w	r1, [r3], #1
 80068cc:	e7f9      	b.n	80068c2 <memset+0x4>
	...

080068d0 <_localeconv_r>:
 80068d0:	4800      	ldr	r0, [pc, #0]	; (80068d4 <_localeconv_r+0x4>)
 80068d2:	4770      	bx	lr
 80068d4:	2000016c 	.word	0x2000016c

080068d8 <_close_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	4d06      	ldr	r5, [pc, #24]	; (80068f4 <_close_r+0x1c>)
 80068dc:	2300      	movs	r3, #0
 80068de:	4604      	mov	r4, r0
 80068e0:	4608      	mov	r0, r1
 80068e2:	602b      	str	r3, [r5, #0]
 80068e4:	f7fc f819 	bl	800291a <_close>
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d102      	bne.n	80068f2 <_close_r+0x1a>
 80068ec:	682b      	ldr	r3, [r5, #0]
 80068ee:	b103      	cbz	r3, 80068f2 <_close_r+0x1a>
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	20000bc4 	.word	0x20000bc4

080068f8 <_lseek_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4d07      	ldr	r5, [pc, #28]	; (8006918 <_lseek_r+0x20>)
 80068fc:	4604      	mov	r4, r0
 80068fe:	4608      	mov	r0, r1
 8006900:	4611      	mov	r1, r2
 8006902:	2200      	movs	r2, #0
 8006904:	602a      	str	r2, [r5, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	f7fc f82e 	bl	8002968 <_lseek>
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	d102      	bne.n	8006916 <_lseek_r+0x1e>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	b103      	cbz	r3, 8006916 <_lseek_r+0x1e>
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	bd38      	pop	{r3, r4, r5, pc}
 8006918:	20000bc4 	.word	0x20000bc4

0800691c <_read_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4d07      	ldr	r5, [pc, #28]	; (800693c <_read_r+0x20>)
 8006920:	4604      	mov	r4, r0
 8006922:	4608      	mov	r0, r1
 8006924:	4611      	mov	r1, r2
 8006926:	2200      	movs	r2, #0
 8006928:	602a      	str	r2, [r5, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	f7fb ffbc 	bl	80028a8 <_read>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d102      	bne.n	800693a <_read_r+0x1e>
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	b103      	cbz	r3, 800693a <_read_r+0x1e>
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	bd38      	pop	{r3, r4, r5, pc}
 800693c:	20000bc4 	.word	0x20000bc4

08006940 <_write_r>:
 8006940:	b538      	push	{r3, r4, r5, lr}
 8006942:	4d07      	ldr	r5, [pc, #28]	; (8006960 <_write_r+0x20>)
 8006944:	4604      	mov	r4, r0
 8006946:	4608      	mov	r0, r1
 8006948:	4611      	mov	r1, r2
 800694a:	2200      	movs	r2, #0
 800694c:	602a      	str	r2, [r5, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	f7fb ffc7 	bl	80028e2 <_write>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d102      	bne.n	800695e <_write_r+0x1e>
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	b103      	cbz	r3, 800695e <_write_r+0x1e>
 800695c:	6023      	str	r3, [r4, #0]
 800695e:	bd38      	pop	{r3, r4, r5, pc}
 8006960:	20000bc4 	.word	0x20000bc4

08006964 <__errno>:
 8006964:	4b01      	ldr	r3, [pc, #4]	; (800696c <__errno+0x8>)
 8006966:	6818      	ldr	r0, [r3, #0]
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	20000078 	.word	0x20000078

08006970 <__libc_init_array>:
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	4d0d      	ldr	r5, [pc, #52]	; (80069a8 <__libc_init_array+0x38>)
 8006974:	4c0d      	ldr	r4, [pc, #52]	; (80069ac <__libc_init_array+0x3c>)
 8006976:	1b64      	subs	r4, r4, r5
 8006978:	10a4      	asrs	r4, r4, #2
 800697a:	2600      	movs	r6, #0
 800697c:	42a6      	cmp	r6, r4
 800697e:	d109      	bne.n	8006994 <__libc_init_array+0x24>
 8006980:	4d0b      	ldr	r5, [pc, #44]	; (80069b0 <__libc_init_array+0x40>)
 8006982:	4c0c      	ldr	r4, [pc, #48]	; (80069b4 <__libc_init_array+0x44>)
 8006984:	f003 fbbc 	bl	800a100 <_init>
 8006988:	1b64      	subs	r4, r4, r5
 800698a:	10a4      	asrs	r4, r4, #2
 800698c:	2600      	movs	r6, #0
 800698e:	42a6      	cmp	r6, r4
 8006990:	d105      	bne.n	800699e <__libc_init_array+0x2e>
 8006992:	bd70      	pop	{r4, r5, r6, pc}
 8006994:	f855 3b04 	ldr.w	r3, [r5], #4
 8006998:	4798      	blx	r3
 800699a:	3601      	adds	r6, #1
 800699c:	e7ee      	b.n	800697c <__libc_init_array+0xc>
 800699e:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a2:	4798      	blx	r3
 80069a4:	3601      	adds	r6, #1
 80069a6:	e7f2      	b.n	800698e <__libc_init_array+0x1e>
 80069a8:	0800ba40 	.word	0x0800ba40
 80069ac:	0800ba40 	.word	0x0800ba40
 80069b0:	0800ba40 	.word	0x0800ba40
 80069b4:	0800ba44 	.word	0x0800ba44

080069b8 <__retarget_lock_init_recursive>:
 80069b8:	4770      	bx	lr

080069ba <__retarget_lock_acquire_recursive>:
 80069ba:	4770      	bx	lr

080069bc <__retarget_lock_release_recursive>:
 80069bc:	4770      	bx	lr

080069be <memcpy>:
 80069be:	440a      	add	r2, r1
 80069c0:	4291      	cmp	r1, r2
 80069c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80069c6:	d100      	bne.n	80069ca <memcpy+0xc>
 80069c8:	4770      	bx	lr
 80069ca:	b510      	push	{r4, lr}
 80069cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069d4:	4291      	cmp	r1, r2
 80069d6:	d1f9      	bne.n	80069cc <memcpy+0xe>
 80069d8:	bd10      	pop	{r4, pc}
	...

080069dc <nanf>:
 80069dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80069e4 <nanf+0x8>
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	7fc00000 	.word	0x7fc00000

080069e8 <quorem>:
 80069e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ec:	6903      	ldr	r3, [r0, #16]
 80069ee:	690c      	ldr	r4, [r1, #16]
 80069f0:	42a3      	cmp	r3, r4
 80069f2:	4607      	mov	r7, r0
 80069f4:	db7e      	blt.n	8006af4 <quorem+0x10c>
 80069f6:	3c01      	subs	r4, #1
 80069f8:	f101 0814 	add.w	r8, r1, #20
 80069fc:	f100 0514 	add.w	r5, r0, #20
 8006a00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	429a      	cmp	r2, r3
 8006a12:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a1e:	d331      	bcc.n	8006a84 <quorem+0x9c>
 8006a20:	f04f 0e00 	mov.w	lr, #0
 8006a24:	4640      	mov	r0, r8
 8006a26:	46ac      	mov	ip, r5
 8006a28:	46f2      	mov	sl, lr
 8006a2a:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a2e:	b293      	uxth	r3, r2
 8006a30:	fb06 e303 	mla	r3, r6, r3, lr
 8006a34:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a38:	0c1a      	lsrs	r2, r3, #16
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	ebaa 0303 	sub.w	r3, sl, r3
 8006a40:	f8dc a000 	ldr.w	sl, [ip]
 8006a44:	fa13 f38a 	uxtah	r3, r3, sl
 8006a48:	fb06 220e 	mla	r2, r6, lr, r2
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	9b00      	ldr	r3, [sp, #0]
 8006a50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006a54:	b292      	uxth	r2, r2
 8006a56:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006a5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a5e:	f8bd 3000 	ldrh.w	r3, [sp]
 8006a62:	4581      	cmp	r9, r0
 8006a64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a68:	f84c 3b04 	str.w	r3, [ip], #4
 8006a6c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006a70:	d2db      	bcs.n	8006a2a <quorem+0x42>
 8006a72:	f855 300b 	ldr.w	r3, [r5, fp]
 8006a76:	b92b      	cbnz	r3, 8006a84 <quorem+0x9c>
 8006a78:	9b01      	ldr	r3, [sp, #4]
 8006a7a:	3b04      	subs	r3, #4
 8006a7c:	429d      	cmp	r5, r3
 8006a7e:	461a      	mov	r2, r3
 8006a80:	d32c      	bcc.n	8006adc <quorem+0xf4>
 8006a82:	613c      	str	r4, [r7, #16]
 8006a84:	4638      	mov	r0, r7
 8006a86:	f001 f9ef 	bl	8007e68 <__mcmp>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	db22      	blt.n	8006ad4 <quorem+0xec>
 8006a8e:	3601      	adds	r6, #1
 8006a90:	4629      	mov	r1, r5
 8006a92:	2000      	movs	r0, #0
 8006a94:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a98:	f8d1 c000 	ldr.w	ip, [r1]
 8006a9c:	b293      	uxth	r3, r2
 8006a9e:	1ac3      	subs	r3, r0, r3
 8006aa0:	0c12      	lsrs	r2, r2, #16
 8006aa2:	fa13 f38c 	uxtah	r3, r3, ip
 8006aa6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006aaa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ab4:	45c1      	cmp	r9, r8
 8006ab6:	f841 3b04 	str.w	r3, [r1], #4
 8006aba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006abe:	d2e9      	bcs.n	8006a94 <quorem+0xac>
 8006ac0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ac4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ac8:	b922      	cbnz	r2, 8006ad4 <quorem+0xec>
 8006aca:	3b04      	subs	r3, #4
 8006acc:	429d      	cmp	r5, r3
 8006ace:	461a      	mov	r2, r3
 8006ad0:	d30a      	bcc.n	8006ae8 <quorem+0x100>
 8006ad2:	613c      	str	r4, [r7, #16]
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	b003      	add	sp, #12
 8006ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006adc:	6812      	ldr	r2, [r2, #0]
 8006ade:	3b04      	subs	r3, #4
 8006ae0:	2a00      	cmp	r2, #0
 8006ae2:	d1ce      	bne.n	8006a82 <quorem+0x9a>
 8006ae4:	3c01      	subs	r4, #1
 8006ae6:	e7c9      	b.n	8006a7c <quorem+0x94>
 8006ae8:	6812      	ldr	r2, [r2, #0]
 8006aea:	3b04      	subs	r3, #4
 8006aec:	2a00      	cmp	r2, #0
 8006aee:	d1f0      	bne.n	8006ad2 <quorem+0xea>
 8006af0:	3c01      	subs	r4, #1
 8006af2:	e7eb      	b.n	8006acc <quorem+0xe4>
 8006af4:	2000      	movs	r0, #0
 8006af6:	e7ee      	b.n	8006ad6 <quorem+0xee>

08006af8 <_dtoa_r>:
 8006af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afc:	ed2d 8b04 	vpush	{d8-d9}
 8006b00:	69c5      	ldr	r5, [r0, #28]
 8006b02:	b093      	sub	sp, #76	; 0x4c
 8006b04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006b08:	ec57 6b10 	vmov	r6, r7, d0
 8006b0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b10:	9107      	str	r1, [sp, #28]
 8006b12:	4604      	mov	r4, r0
 8006b14:	920a      	str	r2, [sp, #40]	; 0x28
 8006b16:	930d      	str	r3, [sp, #52]	; 0x34
 8006b18:	b975      	cbnz	r5, 8006b38 <_dtoa_r+0x40>
 8006b1a:	2010      	movs	r0, #16
 8006b1c:	f000 fe2a 	bl	8007774 <malloc>
 8006b20:	4602      	mov	r2, r0
 8006b22:	61e0      	str	r0, [r4, #28]
 8006b24:	b920      	cbnz	r0, 8006b30 <_dtoa_r+0x38>
 8006b26:	4bae      	ldr	r3, [pc, #696]	; (8006de0 <_dtoa_r+0x2e8>)
 8006b28:	21ef      	movs	r1, #239	; 0xef
 8006b2a:	48ae      	ldr	r0, [pc, #696]	; (8006de4 <_dtoa_r+0x2ec>)
 8006b2c:	f002 fc4c 	bl	80093c8 <__assert_func>
 8006b30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b34:	6005      	str	r5, [r0, #0]
 8006b36:	60c5      	str	r5, [r0, #12]
 8006b38:	69e3      	ldr	r3, [r4, #28]
 8006b3a:	6819      	ldr	r1, [r3, #0]
 8006b3c:	b151      	cbz	r1, 8006b54 <_dtoa_r+0x5c>
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	604a      	str	r2, [r1, #4]
 8006b42:	2301      	movs	r3, #1
 8006b44:	4093      	lsls	r3, r2
 8006b46:	608b      	str	r3, [r1, #8]
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f000 ff07 	bl	800795c <_Bfree>
 8006b4e:	69e3      	ldr	r3, [r4, #28]
 8006b50:	2200      	movs	r2, #0
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	1e3b      	subs	r3, r7, #0
 8006b56:	bfbb      	ittet	lt
 8006b58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b5c:	9303      	strlt	r3, [sp, #12]
 8006b5e:	2300      	movge	r3, #0
 8006b60:	2201      	movlt	r2, #1
 8006b62:	bfac      	ite	ge
 8006b64:	f8c8 3000 	strge.w	r3, [r8]
 8006b68:	f8c8 2000 	strlt.w	r2, [r8]
 8006b6c:	4b9e      	ldr	r3, [pc, #632]	; (8006de8 <_dtoa_r+0x2f0>)
 8006b6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006b72:	ea33 0308 	bics.w	r3, r3, r8
 8006b76:	d11b      	bne.n	8006bb0 <_dtoa_r+0xb8>
 8006b78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006b84:	4333      	orrs	r3, r6
 8006b86:	f000 8593 	beq.w	80076b0 <_dtoa_r+0xbb8>
 8006b8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b8c:	b963      	cbnz	r3, 8006ba8 <_dtoa_r+0xb0>
 8006b8e:	4b97      	ldr	r3, [pc, #604]	; (8006dec <_dtoa_r+0x2f4>)
 8006b90:	e027      	b.n	8006be2 <_dtoa_r+0xea>
 8006b92:	4b97      	ldr	r3, [pc, #604]	; (8006df0 <_dtoa_r+0x2f8>)
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	3308      	adds	r3, #8
 8006b98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	9800      	ldr	r0, [sp, #0]
 8006b9e:	b013      	add	sp, #76	; 0x4c
 8006ba0:	ecbd 8b04 	vpop	{d8-d9}
 8006ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba8:	4b90      	ldr	r3, [pc, #576]	; (8006dec <_dtoa_r+0x2f4>)
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	3303      	adds	r3, #3
 8006bae:	e7f3      	b.n	8006b98 <_dtoa_r+0xa0>
 8006bb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	ec51 0b17 	vmov	r0, r1, d7
 8006bba:	eeb0 8a47 	vmov.f32	s16, s14
 8006bbe:	eef0 8a67 	vmov.f32	s17, s15
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f7f9 ff88 	bl	8000ad8 <__aeabi_dcmpeq>
 8006bc8:	4681      	mov	r9, r0
 8006bca:	b160      	cbz	r0, 8006be6 <_dtoa_r+0xee>
 8006bcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bce:	2301      	movs	r3, #1
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8568 	beq.w	80076aa <_dtoa_r+0xbb2>
 8006bda:	4b86      	ldr	r3, [pc, #536]	; (8006df4 <_dtoa_r+0x2fc>)
 8006bdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	e7da      	b.n	8006b9c <_dtoa_r+0xa4>
 8006be6:	aa10      	add	r2, sp, #64	; 0x40
 8006be8:	a911      	add	r1, sp, #68	; 0x44
 8006bea:	4620      	mov	r0, r4
 8006bec:	eeb0 0a48 	vmov.f32	s0, s16
 8006bf0:	eef0 0a68 	vmov.f32	s1, s17
 8006bf4:	f001 fa4e 	bl	8008094 <__d2b>
 8006bf8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006bfc:	4682      	mov	sl, r0
 8006bfe:	2d00      	cmp	r5, #0
 8006c00:	d07f      	beq.n	8006d02 <_dtoa_r+0x20a>
 8006c02:	ee18 3a90 	vmov	r3, s17
 8006c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006c0e:	ec51 0b18 	vmov	r0, r1, d8
 8006c12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006c16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006c1e:	4619      	mov	r1, r3
 8006c20:	2200      	movs	r2, #0
 8006c22:	4b75      	ldr	r3, [pc, #468]	; (8006df8 <_dtoa_r+0x300>)
 8006c24:	f7f9 fb38 	bl	8000298 <__aeabi_dsub>
 8006c28:	a367      	add	r3, pc, #412	; (adr r3, 8006dc8 <_dtoa_r+0x2d0>)
 8006c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2e:	f7f9 fceb 	bl	8000608 <__aeabi_dmul>
 8006c32:	a367      	add	r3, pc, #412	; (adr r3, 8006dd0 <_dtoa_r+0x2d8>)
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f7f9 fb30 	bl	800029c <__adddf3>
 8006c3c:	4606      	mov	r6, r0
 8006c3e:	4628      	mov	r0, r5
 8006c40:	460f      	mov	r7, r1
 8006c42:	f7f9 fc77 	bl	8000534 <__aeabi_i2d>
 8006c46:	a364      	add	r3, pc, #400	; (adr r3, 8006dd8 <_dtoa_r+0x2e0>)
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f7f9 fcdc 	bl	8000608 <__aeabi_dmul>
 8006c50:	4602      	mov	r2, r0
 8006c52:	460b      	mov	r3, r1
 8006c54:	4630      	mov	r0, r6
 8006c56:	4639      	mov	r1, r7
 8006c58:	f7f9 fb20 	bl	800029c <__adddf3>
 8006c5c:	4606      	mov	r6, r0
 8006c5e:	460f      	mov	r7, r1
 8006c60:	f7f9 ff82 	bl	8000b68 <__aeabi_d2iz>
 8006c64:	2200      	movs	r2, #0
 8006c66:	4683      	mov	fp, r0
 8006c68:	2300      	movs	r3, #0
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	4639      	mov	r1, r7
 8006c6e:	f7f9 ff3d 	bl	8000aec <__aeabi_dcmplt>
 8006c72:	b148      	cbz	r0, 8006c88 <_dtoa_r+0x190>
 8006c74:	4658      	mov	r0, fp
 8006c76:	f7f9 fc5d 	bl	8000534 <__aeabi_i2d>
 8006c7a:	4632      	mov	r2, r6
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	f7f9 ff2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c82:	b908      	cbnz	r0, 8006c88 <_dtoa_r+0x190>
 8006c84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c88:	f1bb 0f16 	cmp.w	fp, #22
 8006c8c:	d857      	bhi.n	8006d3e <_dtoa_r+0x246>
 8006c8e:	4b5b      	ldr	r3, [pc, #364]	; (8006dfc <_dtoa_r+0x304>)
 8006c90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	ec51 0b18 	vmov	r0, r1, d8
 8006c9c:	f7f9 ff26 	bl	8000aec <__aeabi_dcmplt>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d04e      	beq.n	8006d42 <_dtoa_r+0x24a>
 8006ca4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ca8:	2300      	movs	r3, #0
 8006caa:	930c      	str	r3, [sp, #48]	; 0x30
 8006cac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cae:	1b5b      	subs	r3, r3, r5
 8006cb0:	1e5a      	subs	r2, r3, #1
 8006cb2:	bf45      	ittet	mi
 8006cb4:	f1c3 0301 	rsbmi	r3, r3, #1
 8006cb8:	9305      	strmi	r3, [sp, #20]
 8006cba:	2300      	movpl	r3, #0
 8006cbc:	2300      	movmi	r3, #0
 8006cbe:	9206      	str	r2, [sp, #24]
 8006cc0:	bf54      	ite	pl
 8006cc2:	9305      	strpl	r3, [sp, #20]
 8006cc4:	9306      	strmi	r3, [sp, #24]
 8006cc6:	f1bb 0f00 	cmp.w	fp, #0
 8006cca:	db3c      	blt.n	8006d46 <_dtoa_r+0x24e>
 8006ccc:	9b06      	ldr	r3, [sp, #24]
 8006cce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006cd2:	445b      	add	r3, fp
 8006cd4:	9306      	str	r3, [sp, #24]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	9308      	str	r3, [sp, #32]
 8006cda:	9b07      	ldr	r3, [sp, #28]
 8006cdc:	2b09      	cmp	r3, #9
 8006cde:	d868      	bhi.n	8006db2 <_dtoa_r+0x2ba>
 8006ce0:	2b05      	cmp	r3, #5
 8006ce2:	bfc4      	itt	gt
 8006ce4:	3b04      	subgt	r3, #4
 8006ce6:	9307      	strgt	r3, [sp, #28]
 8006ce8:	9b07      	ldr	r3, [sp, #28]
 8006cea:	f1a3 0302 	sub.w	r3, r3, #2
 8006cee:	bfcc      	ite	gt
 8006cf0:	2500      	movgt	r5, #0
 8006cf2:	2501      	movle	r5, #1
 8006cf4:	2b03      	cmp	r3, #3
 8006cf6:	f200 8085 	bhi.w	8006e04 <_dtoa_r+0x30c>
 8006cfa:	e8df f003 	tbb	[pc, r3]
 8006cfe:	3b2e      	.short	0x3b2e
 8006d00:	5839      	.short	0x5839
 8006d02:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d06:	441d      	add	r5, r3
 8006d08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d0c:	2b20      	cmp	r3, #32
 8006d0e:	bfc1      	itttt	gt
 8006d10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d14:	fa08 f803 	lslgt.w	r8, r8, r3
 8006d18:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006d1c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006d20:	bfd6      	itet	le
 8006d22:	f1c3 0320 	rsble	r3, r3, #32
 8006d26:	ea48 0003 	orrgt.w	r0, r8, r3
 8006d2a:	fa06 f003 	lslle.w	r0, r6, r3
 8006d2e:	f7f9 fbf1 	bl	8000514 <__aeabi_ui2d>
 8006d32:	2201      	movs	r2, #1
 8006d34:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006d38:	3d01      	subs	r5, #1
 8006d3a:	920e      	str	r2, [sp, #56]	; 0x38
 8006d3c:	e76f      	b.n	8006c1e <_dtoa_r+0x126>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e7b3      	b.n	8006caa <_dtoa_r+0x1b2>
 8006d42:	900c      	str	r0, [sp, #48]	; 0x30
 8006d44:	e7b2      	b.n	8006cac <_dtoa_r+0x1b4>
 8006d46:	9b05      	ldr	r3, [sp, #20]
 8006d48:	eba3 030b 	sub.w	r3, r3, fp
 8006d4c:	9305      	str	r3, [sp, #20]
 8006d4e:	f1cb 0300 	rsb	r3, fp, #0
 8006d52:	9308      	str	r3, [sp, #32]
 8006d54:	2300      	movs	r3, #0
 8006d56:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d58:	e7bf      	b.n	8006cda <_dtoa_r+0x1e2>
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	dc52      	bgt.n	8006e0a <_dtoa_r+0x312>
 8006d64:	2301      	movs	r3, #1
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	9304      	str	r3, [sp, #16]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	920a      	str	r2, [sp, #40]	; 0x28
 8006d6e:	e00b      	b.n	8006d88 <_dtoa_r+0x290>
 8006d70:	2301      	movs	r3, #1
 8006d72:	e7f3      	b.n	8006d5c <_dtoa_r+0x264>
 8006d74:	2300      	movs	r3, #0
 8006d76:	9309      	str	r3, [sp, #36]	; 0x24
 8006d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d7a:	445b      	add	r3, fp
 8006d7c:	9301      	str	r3, [sp, #4]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	9304      	str	r3, [sp, #16]
 8006d84:	bfb8      	it	lt
 8006d86:	2301      	movlt	r3, #1
 8006d88:	69e0      	ldr	r0, [r4, #28]
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	2204      	movs	r2, #4
 8006d8e:	f102 0614 	add.w	r6, r2, #20
 8006d92:	429e      	cmp	r6, r3
 8006d94:	d93d      	bls.n	8006e12 <_dtoa_r+0x31a>
 8006d96:	6041      	str	r1, [r0, #4]
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f000 fd9f 	bl	80078dc <_Balloc>
 8006d9e:	9000      	str	r0, [sp, #0]
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d139      	bne.n	8006e18 <_dtoa_r+0x320>
 8006da4:	4b16      	ldr	r3, [pc, #88]	; (8006e00 <_dtoa_r+0x308>)
 8006da6:	4602      	mov	r2, r0
 8006da8:	f240 11af 	movw	r1, #431	; 0x1af
 8006dac:	e6bd      	b.n	8006b2a <_dtoa_r+0x32>
 8006dae:	2301      	movs	r3, #1
 8006db0:	e7e1      	b.n	8006d76 <_dtoa_r+0x27e>
 8006db2:	2501      	movs	r5, #1
 8006db4:	2300      	movs	r3, #0
 8006db6:	9307      	str	r3, [sp, #28]
 8006db8:	9509      	str	r5, [sp, #36]	; 0x24
 8006dba:	f04f 33ff 	mov.w	r3, #4294967295
 8006dbe:	9301      	str	r3, [sp, #4]
 8006dc0:	9304      	str	r3, [sp, #16]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2312      	movs	r3, #18
 8006dc6:	e7d1      	b.n	8006d6c <_dtoa_r+0x274>
 8006dc8:	636f4361 	.word	0x636f4361
 8006dcc:	3fd287a7 	.word	0x3fd287a7
 8006dd0:	8b60c8b3 	.word	0x8b60c8b3
 8006dd4:	3fc68a28 	.word	0x3fc68a28
 8006dd8:	509f79fb 	.word	0x509f79fb
 8006ddc:	3fd34413 	.word	0x3fd34413
 8006de0:	0800b652 	.word	0x0800b652
 8006de4:	0800b669 	.word	0x0800b669
 8006de8:	7ff00000 	.word	0x7ff00000
 8006dec:	0800b64e 	.word	0x0800b64e
 8006df0:	0800b645 	.word	0x0800b645
 8006df4:	0800b61d 	.word	0x0800b61d
 8006df8:	3ff80000 	.word	0x3ff80000
 8006dfc:	0800b758 	.word	0x0800b758
 8006e00:	0800b6c1 	.word	0x0800b6c1
 8006e04:	2301      	movs	r3, #1
 8006e06:	9309      	str	r3, [sp, #36]	; 0x24
 8006e08:	e7d7      	b.n	8006dba <_dtoa_r+0x2c2>
 8006e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	9304      	str	r3, [sp, #16]
 8006e10:	e7ba      	b.n	8006d88 <_dtoa_r+0x290>
 8006e12:	3101      	adds	r1, #1
 8006e14:	0052      	lsls	r2, r2, #1
 8006e16:	e7ba      	b.n	8006d8e <_dtoa_r+0x296>
 8006e18:	69e3      	ldr	r3, [r4, #28]
 8006e1a:	9a00      	ldr	r2, [sp, #0]
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	9b04      	ldr	r3, [sp, #16]
 8006e20:	2b0e      	cmp	r3, #14
 8006e22:	f200 80a8 	bhi.w	8006f76 <_dtoa_r+0x47e>
 8006e26:	2d00      	cmp	r5, #0
 8006e28:	f000 80a5 	beq.w	8006f76 <_dtoa_r+0x47e>
 8006e2c:	f1bb 0f00 	cmp.w	fp, #0
 8006e30:	dd38      	ble.n	8006ea4 <_dtoa_r+0x3ac>
 8006e32:	4bc0      	ldr	r3, [pc, #768]	; (8007134 <_dtoa_r+0x63c>)
 8006e34:	f00b 020f 	and.w	r2, fp, #15
 8006e38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006e40:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006e44:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006e48:	d019      	beq.n	8006e7e <_dtoa_r+0x386>
 8006e4a:	4bbb      	ldr	r3, [pc, #748]	; (8007138 <_dtoa_r+0x640>)
 8006e4c:	ec51 0b18 	vmov	r0, r1, d8
 8006e50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e54:	f7f9 fd02 	bl	800085c <__aeabi_ddiv>
 8006e58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e5c:	f008 080f 	and.w	r8, r8, #15
 8006e60:	2503      	movs	r5, #3
 8006e62:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007138 <_dtoa_r+0x640>
 8006e66:	f1b8 0f00 	cmp.w	r8, #0
 8006e6a:	d10a      	bne.n	8006e82 <_dtoa_r+0x38a>
 8006e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e70:	4632      	mov	r2, r6
 8006e72:	463b      	mov	r3, r7
 8006e74:	f7f9 fcf2 	bl	800085c <__aeabi_ddiv>
 8006e78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e7c:	e02b      	b.n	8006ed6 <_dtoa_r+0x3de>
 8006e7e:	2502      	movs	r5, #2
 8006e80:	e7ef      	b.n	8006e62 <_dtoa_r+0x36a>
 8006e82:	f018 0f01 	tst.w	r8, #1
 8006e86:	d008      	beq.n	8006e9a <_dtoa_r+0x3a2>
 8006e88:	4630      	mov	r0, r6
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006e90:	f7f9 fbba 	bl	8000608 <__aeabi_dmul>
 8006e94:	3501      	adds	r5, #1
 8006e96:	4606      	mov	r6, r0
 8006e98:	460f      	mov	r7, r1
 8006e9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006e9e:	f109 0908 	add.w	r9, r9, #8
 8006ea2:	e7e0      	b.n	8006e66 <_dtoa_r+0x36e>
 8006ea4:	f000 809f 	beq.w	8006fe6 <_dtoa_r+0x4ee>
 8006ea8:	f1cb 0600 	rsb	r6, fp, #0
 8006eac:	4ba1      	ldr	r3, [pc, #644]	; (8007134 <_dtoa_r+0x63c>)
 8006eae:	4fa2      	ldr	r7, [pc, #648]	; (8007138 <_dtoa_r+0x640>)
 8006eb0:	f006 020f 	and.w	r2, r6, #15
 8006eb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	ec51 0b18 	vmov	r0, r1, d8
 8006ec0:	f7f9 fba2 	bl	8000608 <__aeabi_dmul>
 8006ec4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ec8:	1136      	asrs	r6, r6, #4
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2502      	movs	r5, #2
 8006ece:	2e00      	cmp	r6, #0
 8006ed0:	d17e      	bne.n	8006fd0 <_dtoa_r+0x4d8>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1d0      	bne.n	8006e78 <_dtoa_r+0x380>
 8006ed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ed8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8084 	beq.w	8006fea <_dtoa_r+0x4f2>
 8006ee2:	4b96      	ldr	r3, [pc, #600]	; (800713c <_dtoa_r+0x644>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	4640      	mov	r0, r8
 8006ee8:	4649      	mov	r1, r9
 8006eea:	f7f9 fdff 	bl	8000aec <__aeabi_dcmplt>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d07b      	beq.n	8006fea <_dtoa_r+0x4f2>
 8006ef2:	9b04      	ldr	r3, [sp, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d078      	beq.n	8006fea <_dtoa_r+0x4f2>
 8006ef8:	9b01      	ldr	r3, [sp, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	dd39      	ble.n	8006f72 <_dtoa_r+0x47a>
 8006efe:	4b90      	ldr	r3, [pc, #576]	; (8007140 <_dtoa_r+0x648>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	4640      	mov	r0, r8
 8006f04:	4649      	mov	r1, r9
 8006f06:	f7f9 fb7f 	bl	8000608 <__aeabi_dmul>
 8006f0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f0e:	9e01      	ldr	r6, [sp, #4]
 8006f10:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006f14:	3501      	adds	r5, #1
 8006f16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f7f9 fb0a 	bl	8000534 <__aeabi_i2d>
 8006f20:	4642      	mov	r2, r8
 8006f22:	464b      	mov	r3, r9
 8006f24:	f7f9 fb70 	bl	8000608 <__aeabi_dmul>
 8006f28:	4b86      	ldr	r3, [pc, #536]	; (8007144 <_dtoa_r+0x64c>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f7f9 f9b6 	bl	800029c <__adddf3>
 8006f30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f38:	9303      	str	r3, [sp, #12]
 8006f3a:	2e00      	cmp	r6, #0
 8006f3c:	d158      	bne.n	8006ff0 <_dtoa_r+0x4f8>
 8006f3e:	4b82      	ldr	r3, [pc, #520]	; (8007148 <_dtoa_r+0x650>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	4640      	mov	r0, r8
 8006f44:	4649      	mov	r1, r9
 8006f46:	f7f9 f9a7 	bl	8000298 <__aeabi_dsub>
 8006f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f4e:	4680      	mov	r8, r0
 8006f50:	4689      	mov	r9, r1
 8006f52:	f7f9 fde9 	bl	8000b28 <__aeabi_dcmpgt>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f040 8296 	bne.w	8007488 <_dtoa_r+0x990>
 8006f5c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006f60:	4640      	mov	r0, r8
 8006f62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f66:	4649      	mov	r1, r9
 8006f68:	f7f9 fdc0 	bl	8000aec <__aeabi_dcmplt>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	f040 8289 	bne.w	8007484 <_dtoa_r+0x98c>
 8006f72:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006f76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f2c0 814e 	blt.w	800721a <_dtoa_r+0x722>
 8006f7e:	f1bb 0f0e 	cmp.w	fp, #14
 8006f82:	f300 814a 	bgt.w	800721a <_dtoa_r+0x722>
 8006f86:	4b6b      	ldr	r3, [pc, #428]	; (8007134 <_dtoa_r+0x63c>)
 8006f88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f280 80dc 	bge.w	8007150 <_dtoa_r+0x658>
 8006f98:	9b04      	ldr	r3, [sp, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f300 80d8 	bgt.w	8007150 <_dtoa_r+0x658>
 8006fa0:	f040 826f 	bne.w	8007482 <_dtoa_r+0x98a>
 8006fa4:	4b68      	ldr	r3, [pc, #416]	; (8007148 <_dtoa_r+0x650>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	4640      	mov	r0, r8
 8006faa:	4649      	mov	r1, r9
 8006fac:	f7f9 fb2c 	bl	8000608 <__aeabi_dmul>
 8006fb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fb4:	f7f9 fdae 	bl	8000b14 <__aeabi_dcmpge>
 8006fb8:	9e04      	ldr	r6, [sp, #16]
 8006fba:	4637      	mov	r7, r6
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	f040 8245 	bne.w	800744c <_dtoa_r+0x954>
 8006fc2:	9d00      	ldr	r5, [sp, #0]
 8006fc4:	2331      	movs	r3, #49	; 0x31
 8006fc6:	f805 3b01 	strb.w	r3, [r5], #1
 8006fca:	f10b 0b01 	add.w	fp, fp, #1
 8006fce:	e241      	b.n	8007454 <_dtoa_r+0x95c>
 8006fd0:	07f2      	lsls	r2, r6, #31
 8006fd2:	d505      	bpl.n	8006fe0 <_dtoa_r+0x4e8>
 8006fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fd8:	f7f9 fb16 	bl	8000608 <__aeabi_dmul>
 8006fdc:	3501      	adds	r5, #1
 8006fde:	2301      	movs	r3, #1
 8006fe0:	1076      	asrs	r6, r6, #1
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	e773      	b.n	8006ece <_dtoa_r+0x3d6>
 8006fe6:	2502      	movs	r5, #2
 8006fe8:	e775      	b.n	8006ed6 <_dtoa_r+0x3de>
 8006fea:	9e04      	ldr	r6, [sp, #16]
 8006fec:	465f      	mov	r7, fp
 8006fee:	e792      	b.n	8006f16 <_dtoa_r+0x41e>
 8006ff0:	9900      	ldr	r1, [sp, #0]
 8006ff2:	4b50      	ldr	r3, [pc, #320]	; (8007134 <_dtoa_r+0x63c>)
 8006ff4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ff8:	4431      	add	r1, r6
 8006ffa:	9102      	str	r1, [sp, #8]
 8006ffc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ffe:	eeb0 9a47 	vmov.f32	s18, s14
 8007002:	eef0 9a67 	vmov.f32	s19, s15
 8007006:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800700a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800700e:	2900      	cmp	r1, #0
 8007010:	d044      	beq.n	800709c <_dtoa_r+0x5a4>
 8007012:	494e      	ldr	r1, [pc, #312]	; (800714c <_dtoa_r+0x654>)
 8007014:	2000      	movs	r0, #0
 8007016:	f7f9 fc21 	bl	800085c <__aeabi_ddiv>
 800701a:	ec53 2b19 	vmov	r2, r3, d9
 800701e:	f7f9 f93b 	bl	8000298 <__aeabi_dsub>
 8007022:	9d00      	ldr	r5, [sp, #0]
 8007024:	ec41 0b19 	vmov	d9, r0, r1
 8007028:	4649      	mov	r1, r9
 800702a:	4640      	mov	r0, r8
 800702c:	f7f9 fd9c 	bl	8000b68 <__aeabi_d2iz>
 8007030:	4606      	mov	r6, r0
 8007032:	f7f9 fa7f 	bl	8000534 <__aeabi_i2d>
 8007036:	4602      	mov	r2, r0
 8007038:	460b      	mov	r3, r1
 800703a:	4640      	mov	r0, r8
 800703c:	4649      	mov	r1, r9
 800703e:	f7f9 f92b 	bl	8000298 <__aeabi_dsub>
 8007042:	3630      	adds	r6, #48	; 0x30
 8007044:	f805 6b01 	strb.w	r6, [r5], #1
 8007048:	ec53 2b19 	vmov	r2, r3, d9
 800704c:	4680      	mov	r8, r0
 800704e:	4689      	mov	r9, r1
 8007050:	f7f9 fd4c 	bl	8000aec <__aeabi_dcmplt>
 8007054:	2800      	cmp	r0, #0
 8007056:	d164      	bne.n	8007122 <_dtoa_r+0x62a>
 8007058:	4642      	mov	r2, r8
 800705a:	464b      	mov	r3, r9
 800705c:	4937      	ldr	r1, [pc, #220]	; (800713c <_dtoa_r+0x644>)
 800705e:	2000      	movs	r0, #0
 8007060:	f7f9 f91a 	bl	8000298 <__aeabi_dsub>
 8007064:	ec53 2b19 	vmov	r2, r3, d9
 8007068:	f7f9 fd40 	bl	8000aec <__aeabi_dcmplt>
 800706c:	2800      	cmp	r0, #0
 800706e:	f040 80b6 	bne.w	80071de <_dtoa_r+0x6e6>
 8007072:	9b02      	ldr	r3, [sp, #8]
 8007074:	429d      	cmp	r5, r3
 8007076:	f43f af7c 	beq.w	8006f72 <_dtoa_r+0x47a>
 800707a:	4b31      	ldr	r3, [pc, #196]	; (8007140 <_dtoa_r+0x648>)
 800707c:	ec51 0b19 	vmov	r0, r1, d9
 8007080:	2200      	movs	r2, #0
 8007082:	f7f9 fac1 	bl	8000608 <__aeabi_dmul>
 8007086:	4b2e      	ldr	r3, [pc, #184]	; (8007140 <_dtoa_r+0x648>)
 8007088:	ec41 0b19 	vmov	d9, r0, r1
 800708c:	2200      	movs	r2, #0
 800708e:	4640      	mov	r0, r8
 8007090:	4649      	mov	r1, r9
 8007092:	f7f9 fab9 	bl	8000608 <__aeabi_dmul>
 8007096:	4680      	mov	r8, r0
 8007098:	4689      	mov	r9, r1
 800709a:	e7c5      	b.n	8007028 <_dtoa_r+0x530>
 800709c:	ec51 0b17 	vmov	r0, r1, d7
 80070a0:	f7f9 fab2 	bl	8000608 <__aeabi_dmul>
 80070a4:	9b02      	ldr	r3, [sp, #8]
 80070a6:	9d00      	ldr	r5, [sp, #0]
 80070a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80070aa:	ec41 0b19 	vmov	d9, r0, r1
 80070ae:	4649      	mov	r1, r9
 80070b0:	4640      	mov	r0, r8
 80070b2:	f7f9 fd59 	bl	8000b68 <__aeabi_d2iz>
 80070b6:	4606      	mov	r6, r0
 80070b8:	f7f9 fa3c 	bl	8000534 <__aeabi_i2d>
 80070bc:	3630      	adds	r6, #48	; 0x30
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4640      	mov	r0, r8
 80070c4:	4649      	mov	r1, r9
 80070c6:	f7f9 f8e7 	bl	8000298 <__aeabi_dsub>
 80070ca:	f805 6b01 	strb.w	r6, [r5], #1
 80070ce:	9b02      	ldr	r3, [sp, #8]
 80070d0:	429d      	cmp	r5, r3
 80070d2:	4680      	mov	r8, r0
 80070d4:	4689      	mov	r9, r1
 80070d6:	f04f 0200 	mov.w	r2, #0
 80070da:	d124      	bne.n	8007126 <_dtoa_r+0x62e>
 80070dc:	4b1b      	ldr	r3, [pc, #108]	; (800714c <_dtoa_r+0x654>)
 80070de:	ec51 0b19 	vmov	r0, r1, d9
 80070e2:	f7f9 f8db 	bl	800029c <__adddf3>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	4640      	mov	r0, r8
 80070ec:	4649      	mov	r1, r9
 80070ee:	f7f9 fd1b 	bl	8000b28 <__aeabi_dcmpgt>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d173      	bne.n	80071de <_dtoa_r+0x6e6>
 80070f6:	ec53 2b19 	vmov	r2, r3, d9
 80070fa:	4914      	ldr	r1, [pc, #80]	; (800714c <_dtoa_r+0x654>)
 80070fc:	2000      	movs	r0, #0
 80070fe:	f7f9 f8cb 	bl	8000298 <__aeabi_dsub>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	4640      	mov	r0, r8
 8007108:	4649      	mov	r1, r9
 800710a:	f7f9 fcef 	bl	8000aec <__aeabi_dcmplt>
 800710e:	2800      	cmp	r0, #0
 8007110:	f43f af2f 	beq.w	8006f72 <_dtoa_r+0x47a>
 8007114:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007116:	1e6b      	subs	r3, r5, #1
 8007118:	930f      	str	r3, [sp, #60]	; 0x3c
 800711a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800711e:	2b30      	cmp	r3, #48	; 0x30
 8007120:	d0f8      	beq.n	8007114 <_dtoa_r+0x61c>
 8007122:	46bb      	mov	fp, r7
 8007124:	e04a      	b.n	80071bc <_dtoa_r+0x6c4>
 8007126:	4b06      	ldr	r3, [pc, #24]	; (8007140 <_dtoa_r+0x648>)
 8007128:	f7f9 fa6e 	bl	8000608 <__aeabi_dmul>
 800712c:	4680      	mov	r8, r0
 800712e:	4689      	mov	r9, r1
 8007130:	e7bd      	b.n	80070ae <_dtoa_r+0x5b6>
 8007132:	bf00      	nop
 8007134:	0800b758 	.word	0x0800b758
 8007138:	0800b730 	.word	0x0800b730
 800713c:	3ff00000 	.word	0x3ff00000
 8007140:	40240000 	.word	0x40240000
 8007144:	401c0000 	.word	0x401c0000
 8007148:	40140000 	.word	0x40140000
 800714c:	3fe00000 	.word	0x3fe00000
 8007150:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007154:	9d00      	ldr	r5, [sp, #0]
 8007156:	4642      	mov	r2, r8
 8007158:	464b      	mov	r3, r9
 800715a:	4630      	mov	r0, r6
 800715c:	4639      	mov	r1, r7
 800715e:	f7f9 fb7d 	bl	800085c <__aeabi_ddiv>
 8007162:	f7f9 fd01 	bl	8000b68 <__aeabi_d2iz>
 8007166:	9001      	str	r0, [sp, #4]
 8007168:	f7f9 f9e4 	bl	8000534 <__aeabi_i2d>
 800716c:	4642      	mov	r2, r8
 800716e:	464b      	mov	r3, r9
 8007170:	f7f9 fa4a 	bl	8000608 <__aeabi_dmul>
 8007174:	4602      	mov	r2, r0
 8007176:	460b      	mov	r3, r1
 8007178:	4630      	mov	r0, r6
 800717a:	4639      	mov	r1, r7
 800717c:	f7f9 f88c 	bl	8000298 <__aeabi_dsub>
 8007180:	9e01      	ldr	r6, [sp, #4]
 8007182:	9f04      	ldr	r7, [sp, #16]
 8007184:	3630      	adds	r6, #48	; 0x30
 8007186:	f805 6b01 	strb.w	r6, [r5], #1
 800718a:	9e00      	ldr	r6, [sp, #0]
 800718c:	1bae      	subs	r6, r5, r6
 800718e:	42b7      	cmp	r7, r6
 8007190:	4602      	mov	r2, r0
 8007192:	460b      	mov	r3, r1
 8007194:	d134      	bne.n	8007200 <_dtoa_r+0x708>
 8007196:	f7f9 f881 	bl	800029c <__adddf3>
 800719a:	4642      	mov	r2, r8
 800719c:	464b      	mov	r3, r9
 800719e:	4606      	mov	r6, r0
 80071a0:	460f      	mov	r7, r1
 80071a2:	f7f9 fcc1 	bl	8000b28 <__aeabi_dcmpgt>
 80071a6:	b9c8      	cbnz	r0, 80071dc <_dtoa_r+0x6e4>
 80071a8:	4642      	mov	r2, r8
 80071aa:	464b      	mov	r3, r9
 80071ac:	4630      	mov	r0, r6
 80071ae:	4639      	mov	r1, r7
 80071b0:	f7f9 fc92 	bl	8000ad8 <__aeabi_dcmpeq>
 80071b4:	b110      	cbz	r0, 80071bc <_dtoa_r+0x6c4>
 80071b6:	9b01      	ldr	r3, [sp, #4]
 80071b8:	07db      	lsls	r3, r3, #31
 80071ba:	d40f      	bmi.n	80071dc <_dtoa_r+0x6e4>
 80071bc:	4651      	mov	r1, sl
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 fbcc 	bl	800795c <_Bfree>
 80071c4:	2300      	movs	r3, #0
 80071c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071c8:	702b      	strb	r3, [r5, #0]
 80071ca:	f10b 0301 	add.w	r3, fp, #1
 80071ce:	6013      	str	r3, [r2, #0]
 80071d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f43f ace2 	beq.w	8006b9c <_dtoa_r+0xa4>
 80071d8:	601d      	str	r5, [r3, #0]
 80071da:	e4df      	b.n	8006b9c <_dtoa_r+0xa4>
 80071dc:	465f      	mov	r7, fp
 80071de:	462b      	mov	r3, r5
 80071e0:	461d      	mov	r5, r3
 80071e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071e6:	2a39      	cmp	r2, #57	; 0x39
 80071e8:	d106      	bne.n	80071f8 <_dtoa_r+0x700>
 80071ea:	9a00      	ldr	r2, [sp, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d1f7      	bne.n	80071e0 <_dtoa_r+0x6e8>
 80071f0:	9900      	ldr	r1, [sp, #0]
 80071f2:	2230      	movs	r2, #48	; 0x30
 80071f4:	3701      	adds	r7, #1
 80071f6:	700a      	strb	r2, [r1, #0]
 80071f8:	781a      	ldrb	r2, [r3, #0]
 80071fa:	3201      	adds	r2, #1
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	e790      	b.n	8007122 <_dtoa_r+0x62a>
 8007200:	4ba3      	ldr	r3, [pc, #652]	; (8007490 <_dtoa_r+0x998>)
 8007202:	2200      	movs	r2, #0
 8007204:	f7f9 fa00 	bl	8000608 <__aeabi_dmul>
 8007208:	2200      	movs	r2, #0
 800720a:	2300      	movs	r3, #0
 800720c:	4606      	mov	r6, r0
 800720e:	460f      	mov	r7, r1
 8007210:	f7f9 fc62 	bl	8000ad8 <__aeabi_dcmpeq>
 8007214:	2800      	cmp	r0, #0
 8007216:	d09e      	beq.n	8007156 <_dtoa_r+0x65e>
 8007218:	e7d0      	b.n	80071bc <_dtoa_r+0x6c4>
 800721a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800721c:	2a00      	cmp	r2, #0
 800721e:	f000 80ca 	beq.w	80073b6 <_dtoa_r+0x8be>
 8007222:	9a07      	ldr	r2, [sp, #28]
 8007224:	2a01      	cmp	r2, #1
 8007226:	f300 80ad 	bgt.w	8007384 <_dtoa_r+0x88c>
 800722a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800722c:	2a00      	cmp	r2, #0
 800722e:	f000 80a5 	beq.w	800737c <_dtoa_r+0x884>
 8007232:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007236:	9e08      	ldr	r6, [sp, #32]
 8007238:	9d05      	ldr	r5, [sp, #20]
 800723a:	9a05      	ldr	r2, [sp, #20]
 800723c:	441a      	add	r2, r3
 800723e:	9205      	str	r2, [sp, #20]
 8007240:	9a06      	ldr	r2, [sp, #24]
 8007242:	2101      	movs	r1, #1
 8007244:	441a      	add	r2, r3
 8007246:	4620      	mov	r0, r4
 8007248:	9206      	str	r2, [sp, #24]
 800724a:	f000 fc87 	bl	8007b5c <__i2b>
 800724e:	4607      	mov	r7, r0
 8007250:	b165      	cbz	r5, 800726c <_dtoa_r+0x774>
 8007252:	9b06      	ldr	r3, [sp, #24]
 8007254:	2b00      	cmp	r3, #0
 8007256:	dd09      	ble.n	800726c <_dtoa_r+0x774>
 8007258:	42ab      	cmp	r3, r5
 800725a:	9a05      	ldr	r2, [sp, #20]
 800725c:	bfa8      	it	ge
 800725e:	462b      	movge	r3, r5
 8007260:	1ad2      	subs	r2, r2, r3
 8007262:	9205      	str	r2, [sp, #20]
 8007264:	9a06      	ldr	r2, [sp, #24]
 8007266:	1aed      	subs	r5, r5, r3
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	9306      	str	r3, [sp, #24]
 800726c:	9b08      	ldr	r3, [sp, #32]
 800726e:	b1f3      	cbz	r3, 80072ae <_dtoa_r+0x7b6>
 8007270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 80a3 	beq.w	80073be <_dtoa_r+0x8c6>
 8007278:	2e00      	cmp	r6, #0
 800727a:	dd10      	ble.n	800729e <_dtoa_r+0x7a6>
 800727c:	4639      	mov	r1, r7
 800727e:	4632      	mov	r2, r6
 8007280:	4620      	mov	r0, r4
 8007282:	f000 fd2b 	bl	8007cdc <__pow5mult>
 8007286:	4652      	mov	r2, sl
 8007288:	4601      	mov	r1, r0
 800728a:	4607      	mov	r7, r0
 800728c:	4620      	mov	r0, r4
 800728e:	f000 fc7b 	bl	8007b88 <__multiply>
 8007292:	4651      	mov	r1, sl
 8007294:	4680      	mov	r8, r0
 8007296:	4620      	mov	r0, r4
 8007298:	f000 fb60 	bl	800795c <_Bfree>
 800729c:	46c2      	mov	sl, r8
 800729e:	9b08      	ldr	r3, [sp, #32]
 80072a0:	1b9a      	subs	r2, r3, r6
 80072a2:	d004      	beq.n	80072ae <_dtoa_r+0x7b6>
 80072a4:	4651      	mov	r1, sl
 80072a6:	4620      	mov	r0, r4
 80072a8:	f000 fd18 	bl	8007cdc <__pow5mult>
 80072ac:	4682      	mov	sl, r0
 80072ae:	2101      	movs	r1, #1
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 fc53 	bl	8007b5c <__i2b>
 80072b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	4606      	mov	r6, r0
 80072bc:	f340 8081 	ble.w	80073c2 <_dtoa_r+0x8ca>
 80072c0:	461a      	mov	r2, r3
 80072c2:	4601      	mov	r1, r0
 80072c4:	4620      	mov	r0, r4
 80072c6:	f000 fd09 	bl	8007cdc <__pow5mult>
 80072ca:	9b07      	ldr	r3, [sp, #28]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	4606      	mov	r6, r0
 80072d0:	dd7a      	ble.n	80073c8 <_dtoa_r+0x8d0>
 80072d2:	f04f 0800 	mov.w	r8, #0
 80072d6:	6933      	ldr	r3, [r6, #16]
 80072d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80072dc:	6918      	ldr	r0, [r3, #16]
 80072de:	f000 fbef 	bl	8007ac0 <__hi0bits>
 80072e2:	f1c0 0020 	rsb	r0, r0, #32
 80072e6:	9b06      	ldr	r3, [sp, #24]
 80072e8:	4418      	add	r0, r3
 80072ea:	f010 001f 	ands.w	r0, r0, #31
 80072ee:	f000 8094 	beq.w	800741a <_dtoa_r+0x922>
 80072f2:	f1c0 0320 	rsb	r3, r0, #32
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	f340 8085 	ble.w	8007406 <_dtoa_r+0x90e>
 80072fc:	9b05      	ldr	r3, [sp, #20]
 80072fe:	f1c0 001c 	rsb	r0, r0, #28
 8007302:	4403      	add	r3, r0
 8007304:	9305      	str	r3, [sp, #20]
 8007306:	9b06      	ldr	r3, [sp, #24]
 8007308:	4403      	add	r3, r0
 800730a:	4405      	add	r5, r0
 800730c:	9306      	str	r3, [sp, #24]
 800730e:	9b05      	ldr	r3, [sp, #20]
 8007310:	2b00      	cmp	r3, #0
 8007312:	dd05      	ble.n	8007320 <_dtoa_r+0x828>
 8007314:	4651      	mov	r1, sl
 8007316:	461a      	mov	r2, r3
 8007318:	4620      	mov	r0, r4
 800731a:	f000 fd39 	bl	8007d90 <__lshift>
 800731e:	4682      	mov	sl, r0
 8007320:	9b06      	ldr	r3, [sp, #24]
 8007322:	2b00      	cmp	r3, #0
 8007324:	dd05      	ble.n	8007332 <_dtoa_r+0x83a>
 8007326:	4631      	mov	r1, r6
 8007328:	461a      	mov	r2, r3
 800732a:	4620      	mov	r0, r4
 800732c:	f000 fd30 	bl	8007d90 <__lshift>
 8007330:	4606      	mov	r6, r0
 8007332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007334:	2b00      	cmp	r3, #0
 8007336:	d072      	beq.n	800741e <_dtoa_r+0x926>
 8007338:	4631      	mov	r1, r6
 800733a:	4650      	mov	r0, sl
 800733c:	f000 fd94 	bl	8007e68 <__mcmp>
 8007340:	2800      	cmp	r0, #0
 8007342:	da6c      	bge.n	800741e <_dtoa_r+0x926>
 8007344:	2300      	movs	r3, #0
 8007346:	4651      	mov	r1, sl
 8007348:	220a      	movs	r2, #10
 800734a:	4620      	mov	r0, r4
 800734c:	f000 fb28 	bl	80079a0 <__multadd>
 8007350:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007352:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007356:	4682      	mov	sl, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 81b0 	beq.w	80076be <_dtoa_r+0xbc6>
 800735e:	2300      	movs	r3, #0
 8007360:	4639      	mov	r1, r7
 8007362:	220a      	movs	r2, #10
 8007364:	4620      	mov	r0, r4
 8007366:	f000 fb1b 	bl	80079a0 <__multadd>
 800736a:	9b01      	ldr	r3, [sp, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	4607      	mov	r7, r0
 8007370:	f300 8096 	bgt.w	80074a0 <_dtoa_r+0x9a8>
 8007374:	9b07      	ldr	r3, [sp, #28]
 8007376:	2b02      	cmp	r3, #2
 8007378:	dc59      	bgt.n	800742e <_dtoa_r+0x936>
 800737a:	e091      	b.n	80074a0 <_dtoa_r+0x9a8>
 800737c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800737e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007382:	e758      	b.n	8007236 <_dtoa_r+0x73e>
 8007384:	9b04      	ldr	r3, [sp, #16]
 8007386:	1e5e      	subs	r6, r3, #1
 8007388:	9b08      	ldr	r3, [sp, #32]
 800738a:	42b3      	cmp	r3, r6
 800738c:	bfbf      	itttt	lt
 800738e:	9b08      	ldrlt	r3, [sp, #32]
 8007390:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007392:	9608      	strlt	r6, [sp, #32]
 8007394:	1af3      	sublt	r3, r6, r3
 8007396:	bfb4      	ite	lt
 8007398:	18d2      	addlt	r2, r2, r3
 800739a:	1b9e      	subge	r6, r3, r6
 800739c:	9b04      	ldr	r3, [sp, #16]
 800739e:	bfbc      	itt	lt
 80073a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80073a2:	2600      	movlt	r6, #0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bfb7      	itett	lt
 80073a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80073ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80073b0:	1a9d      	sublt	r5, r3, r2
 80073b2:	2300      	movlt	r3, #0
 80073b4:	e741      	b.n	800723a <_dtoa_r+0x742>
 80073b6:	9e08      	ldr	r6, [sp, #32]
 80073b8:	9d05      	ldr	r5, [sp, #20]
 80073ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80073bc:	e748      	b.n	8007250 <_dtoa_r+0x758>
 80073be:	9a08      	ldr	r2, [sp, #32]
 80073c0:	e770      	b.n	80072a4 <_dtoa_r+0x7ac>
 80073c2:	9b07      	ldr	r3, [sp, #28]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	dc19      	bgt.n	80073fc <_dtoa_r+0x904>
 80073c8:	9b02      	ldr	r3, [sp, #8]
 80073ca:	b9bb      	cbnz	r3, 80073fc <_dtoa_r+0x904>
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073d2:	b99b      	cbnz	r3, 80073fc <_dtoa_r+0x904>
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073da:	0d1b      	lsrs	r3, r3, #20
 80073dc:	051b      	lsls	r3, r3, #20
 80073de:	b183      	cbz	r3, 8007402 <_dtoa_r+0x90a>
 80073e0:	9b05      	ldr	r3, [sp, #20]
 80073e2:	3301      	adds	r3, #1
 80073e4:	9305      	str	r3, [sp, #20]
 80073e6:	9b06      	ldr	r3, [sp, #24]
 80073e8:	3301      	adds	r3, #1
 80073ea:	9306      	str	r3, [sp, #24]
 80073ec:	f04f 0801 	mov.w	r8, #1
 80073f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f47f af6f 	bne.w	80072d6 <_dtoa_r+0x7de>
 80073f8:	2001      	movs	r0, #1
 80073fa:	e774      	b.n	80072e6 <_dtoa_r+0x7ee>
 80073fc:	f04f 0800 	mov.w	r8, #0
 8007400:	e7f6      	b.n	80073f0 <_dtoa_r+0x8f8>
 8007402:	4698      	mov	r8, r3
 8007404:	e7f4      	b.n	80073f0 <_dtoa_r+0x8f8>
 8007406:	d082      	beq.n	800730e <_dtoa_r+0x816>
 8007408:	9a05      	ldr	r2, [sp, #20]
 800740a:	331c      	adds	r3, #28
 800740c:	441a      	add	r2, r3
 800740e:	9205      	str	r2, [sp, #20]
 8007410:	9a06      	ldr	r2, [sp, #24]
 8007412:	441a      	add	r2, r3
 8007414:	441d      	add	r5, r3
 8007416:	9206      	str	r2, [sp, #24]
 8007418:	e779      	b.n	800730e <_dtoa_r+0x816>
 800741a:	4603      	mov	r3, r0
 800741c:	e7f4      	b.n	8007408 <_dtoa_r+0x910>
 800741e:	9b04      	ldr	r3, [sp, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	dc37      	bgt.n	8007494 <_dtoa_r+0x99c>
 8007424:	9b07      	ldr	r3, [sp, #28]
 8007426:	2b02      	cmp	r3, #2
 8007428:	dd34      	ble.n	8007494 <_dtoa_r+0x99c>
 800742a:	9b04      	ldr	r3, [sp, #16]
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	9b01      	ldr	r3, [sp, #4]
 8007430:	b963      	cbnz	r3, 800744c <_dtoa_r+0x954>
 8007432:	4631      	mov	r1, r6
 8007434:	2205      	movs	r2, #5
 8007436:	4620      	mov	r0, r4
 8007438:	f000 fab2 	bl	80079a0 <__multadd>
 800743c:	4601      	mov	r1, r0
 800743e:	4606      	mov	r6, r0
 8007440:	4650      	mov	r0, sl
 8007442:	f000 fd11 	bl	8007e68 <__mcmp>
 8007446:	2800      	cmp	r0, #0
 8007448:	f73f adbb 	bgt.w	8006fc2 <_dtoa_r+0x4ca>
 800744c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800744e:	9d00      	ldr	r5, [sp, #0]
 8007450:	ea6f 0b03 	mvn.w	fp, r3
 8007454:	f04f 0800 	mov.w	r8, #0
 8007458:	4631      	mov	r1, r6
 800745a:	4620      	mov	r0, r4
 800745c:	f000 fa7e 	bl	800795c <_Bfree>
 8007460:	2f00      	cmp	r7, #0
 8007462:	f43f aeab 	beq.w	80071bc <_dtoa_r+0x6c4>
 8007466:	f1b8 0f00 	cmp.w	r8, #0
 800746a:	d005      	beq.n	8007478 <_dtoa_r+0x980>
 800746c:	45b8      	cmp	r8, r7
 800746e:	d003      	beq.n	8007478 <_dtoa_r+0x980>
 8007470:	4641      	mov	r1, r8
 8007472:	4620      	mov	r0, r4
 8007474:	f000 fa72 	bl	800795c <_Bfree>
 8007478:	4639      	mov	r1, r7
 800747a:	4620      	mov	r0, r4
 800747c:	f000 fa6e 	bl	800795c <_Bfree>
 8007480:	e69c      	b.n	80071bc <_dtoa_r+0x6c4>
 8007482:	2600      	movs	r6, #0
 8007484:	4637      	mov	r7, r6
 8007486:	e7e1      	b.n	800744c <_dtoa_r+0x954>
 8007488:	46bb      	mov	fp, r7
 800748a:	4637      	mov	r7, r6
 800748c:	e599      	b.n	8006fc2 <_dtoa_r+0x4ca>
 800748e:	bf00      	nop
 8007490:	40240000 	.word	0x40240000
 8007494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 80c8 	beq.w	800762c <_dtoa_r+0xb34>
 800749c:	9b04      	ldr	r3, [sp, #16]
 800749e:	9301      	str	r3, [sp, #4]
 80074a0:	2d00      	cmp	r5, #0
 80074a2:	dd05      	ble.n	80074b0 <_dtoa_r+0x9b8>
 80074a4:	4639      	mov	r1, r7
 80074a6:	462a      	mov	r2, r5
 80074a8:	4620      	mov	r0, r4
 80074aa:	f000 fc71 	bl	8007d90 <__lshift>
 80074ae:	4607      	mov	r7, r0
 80074b0:	f1b8 0f00 	cmp.w	r8, #0
 80074b4:	d05b      	beq.n	800756e <_dtoa_r+0xa76>
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	4620      	mov	r0, r4
 80074ba:	f000 fa0f 	bl	80078dc <_Balloc>
 80074be:	4605      	mov	r5, r0
 80074c0:	b928      	cbnz	r0, 80074ce <_dtoa_r+0x9d6>
 80074c2:	4b83      	ldr	r3, [pc, #524]	; (80076d0 <_dtoa_r+0xbd8>)
 80074c4:	4602      	mov	r2, r0
 80074c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80074ca:	f7ff bb2e 	b.w	8006b2a <_dtoa_r+0x32>
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	3202      	adds	r2, #2
 80074d2:	0092      	lsls	r2, r2, #2
 80074d4:	f107 010c 	add.w	r1, r7, #12
 80074d8:	300c      	adds	r0, #12
 80074da:	f7ff fa70 	bl	80069be <memcpy>
 80074de:	2201      	movs	r2, #1
 80074e0:	4629      	mov	r1, r5
 80074e2:	4620      	mov	r0, r4
 80074e4:	f000 fc54 	bl	8007d90 <__lshift>
 80074e8:	9b00      	ldr	r3, [sp, #0]
 80074ea:	3301      	adds	r3, #1
 80074ec:	9304      	str	r3, [sp, #16]
 80074ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074f2:	4413      	add	r3, r2
 80074f4:	9308      	str	r3, [sp, #32]
 80074f6:	9b02      	ldr	r3, [sp, #8]
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	46b8      	mov	r8, r7
 80074fe:	9306      	str	r3, [sp, #24]
 8007500:	4607      	mov	r7, r0
 8007502:	9b04      	ldr	r3, [sp, #16]
 8007504:	4631      	mov	r1, r6
 8007506:	3b01      	subs	r3, #1
 8007508:	4650      	mov	r0, sl
 800750a:	9301      	str	r3, [sp, #4]
 800750c:	f7ff fa6c 	bl	80069e8 <quorem>
 8007510:	4641      	mov	r1, r8
 8007512:	9002      	str	r0, [sp, #8]
 8007514:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007518:	4650      	mov	r0, sl
 800751a:	f000 fca5 	bl	8007e68 <__mcmp>
 800751e:	463a      	mov	r2, r7
 8007520:	9005      	str	r0, [sp, #20]
 8007522:	4631      	mov	r1, r6
 8007524:	4620      	mov	r0, r4
 8007526:	f000 fcbb 	bl	8007ea0 <__mdiff>
 800752a:	68c2      	ldr	r2, [r0, #12]
 800752c:	4605      	mov	r5, r0
 800752e:	bb02      	cbnz	r2, 8007572 <_dtoa_r+0xa7a>
 8007530:	4601      	mov	r1, r0
 8007532:	4650      	mov	r0, sl
 8007534:	f000 fc98 	bl	8007e68 <__mcmp>
 8007538:	4602      	mov	r2, r0
 800753a:	4629      	mov	r1, r5
 800753c:	4620      	mov	r0, r4
 800753e:	9209      	str	r2, [sp, #36]	; 0x24
 8007540:	f000 fa0c 	bl	800795c <_Bfree>
 8007544:	9b07      	ldr	r3, [sp, #28]
 8007546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007548:	9d04      	ldr	r5, [sp, #16]
 800754a:	ea43 0102 	orr.w	r1, r3, r2
 800754e:	9b06      	ldr	r3, [sp, #24]
 8007550:	4319      	orrs	r1, r3
 8007552:	d110      	bne.n	8007576 <_dtoa_r+0xa7e>
 8007554:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007558:	d029      	beq.n	80075ae <_dtoa_r+0xab6>
 800755a:	9b05      	ldr	r3, [sp, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	dd02      	ble.n	8007566 <_dtoa_r+0xa6e>
 8007560:	9b02      	ldr	r3, [sp, #8]
 8007562:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007566:	9b01      	ldr	r3, [sp, #4]
 8007568:	f883 9000 	strb.w	r9, [r3]
 800756c:	e774      	b.n	8007458 <_dtoa_r+0x960>
 800756e:	4638      	mov	r0, r7
 8007570:	e7ba      	b.n	80074e8 <_dtoa_r+0x9f0>
 8007572:	2201      	movs	r2, #1
 8007574:	e7e1      	b.n	800753a <_dtoa_r+0xa42>
 8007576:	9b05      	ldr	r3, [sp, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	db04      	blt.n	8007586 <_dtoa_r+0xa8e>
 800757c:	9907      	ldr	r1, [sp, #28]
 800757e:	430b      	orrs	r3, r1
 8007580:	9906      	ldr	r1, [sp, #24]
 8007582:	430b      	orrs	r3, r1
 8007584:	d120      	bne.n	80075c8 <_dtoa_r+0xad0>
 8007586:	2a00      	cmp	r2, #0
 8007588:	dded      	ble.n	8007566 <_dtoa_r+0xa6e>
 800758a:	4651      	mov	r1, sl
 800758c:	2201      	movs	r2, #1
 800758e:	4620      	mov	r0, r4
 8007590:	f000 fbfe 	bl	8007d90 <__lshift>
 8007594:	4631      	mov	r1, r6
 8007596:	4682      	mov	sl, r0
 8007598:	f000 fc66 	bl	8007e68 <__mcmp>
 800759c:	2800      	cmp	r0, #0
 800759e:	dc03      	bgt.n	80075a8 <_dtoa_r+0xab0>
 80075a0:	d1e1      	bne.n	8007566 <_dtoa_r+0xa6e>
 80075a2:	f019 0f01 	tst.w	r9, #1
 80075a6:	d0de      	beq.n	8007566 <_dtoa_r+0xa6e>
 80075a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075ac:	d1d8      	bne.n	8007560 <_dtoa_r+0xa68>
 80075ae:	9a01      	ldr	r2, [sp, #4]
 80075b0:	2339      	movs	r3, #57	; 0x39
 80075b2:	7013      	strb	r3, [r2, #0]
 80075b4:	462b      	mov	r3, r5
 80075b6:	461d      	mov	r5, r3
 80075b8:	3b01      	subs	r3, #1
 80075ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075be:	2a39      	cmp	r2, #57	; 0x39
 80075c0:	d06c      	beq.n	800769c <_dtoa_r+0xba4>
 80075c2:	3201      	adds	r2, #1
 80075c4:	701a      	strb	r2, [r3, #0]
 80075c6:	e747      	b.n	8007458 <_dtoa_r+0x960>
 80075c8:	2a00      	cmp	r2, #0
 80075ca:	dd07      	ble.n	80075dc <_dtoa_r+0xae4>
 80075cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075d0:	d0ed      	beq.n	80075ae <_dtoa_r+0xab6>
 80075d2:	9a01      	ldr	r2, [sp, #4]
 80075d4:	f109 0301 	add.w	r3, r9, #1
 80075d8:	7013      	strb	r3, [r2, #0]
 80075da:	e73d      	b.n	8007458 <_dtoa_r+0x960>
 80075dc:	9b04      	ldr	r3, [sp, #16]
 80075de:	9a08      	ldr	r2, [sp, #32]
 80075e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d043      	beq.n	8007670 <_dtoa_r+0xb78>
 80075e8:	4651      	mov	r1, sl
 80075ea:	2300      	movs	r3, #0
 80075ec:	220a      	movs	r2, #10
 80075ee:	4620      	mov	r0, r4
 80075f0:	f000 f9d6 	bl	80079a0 <__multadd>
 80075f4:	45b8      	cmp	r8, r7
 80075f6:	4682      	mov	sl, r0
 80075f8:	f04f 0300 	mov.w	r3, #0
 80075fc:	f04f 020a 	mov.w	r2, #10
 8007600:	4641      	mov	r1, r8
 8007602:	4620      	mov	r0, r4
 8007604:	d107      	bne.n	8007616 <_dtoa_r+0xb1e>
 8007606:	f000 f9cb 	bl	80079a0 <__multadd>
 800760a:	4680      	mov	r8, r0
 800760c:	4607      	mov	r7, r0
 800760e:	9b04      	ldr	r3, [sp, #16]
 8007610:	3301      	adds	r3, #1
 8007612:	9304      	str	r3, [sp, #16]
 8007614:	e775      	b.n	8007502 <_dtoa_r+0xa0a>
 8007616:	f000 f9c3 	bl	80079a0 <__multadd>
 800761a:	4639      	mov	r1, r7
 800761c:	4680      	mov	r8, r0
 800761e:	2300      	movs	r3, #0
 8007620:	220a      	movs	r2, #10
 8007622:	4620      	mov	r0, r4
 8007624:	f000 f9bc 	bl	80079a0 <__multadd>
 8007628:	4607      	mov	r7, r0
 800762a:	e7f0      	b.n	800760e <_dtoa_r+0xb16>
 800762c:	9b04      	ldr	r3, [sp, #16]
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	9d00      	ldr	r5, [sp, #0]
 8007632:	4631      	mov	r1, r6
 8007634:	4650      	mov	r0, sl
 8007636:	f7ff f9d7 	bl	80069e8 <quorem>
 800763a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800763e:	9b00      	ldr	r3, [sp, #0]
 8007640:	f805 9b01 	strb.w	r9, [r5], #1
 8007644:	1aea      	subs	r2, r5, r3
 8007646:	9b01      	ldr	r3, [sp, #4]
 8007648:	4293      	cmp	r3, r2
 800764a:	dd07      	ble.n	800765c <_dtoa_r+0xb64>
 800764c:	4651      	mov	r1, sl
 800764e:	2300      	movs	r3, #0
 8007650:	220a      	movs	r2, #10
 8007652:	4620      	mov	r0, r4
 8007654:	f000 f9a4 	bl	80079a0 <__multadd>
 8007658:	4682      	mov	sl, r0
 800765a:	e7ea      	b.n	8007632 <_dtoa_r+0xb3a>
 800765c:	9b01      	ldr	r3, [sp, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	bfc8      	it	gt
 8007662:	461d      	movgt	r5, r3
 8007664:	9b00      	ldr	r3, [sp, #0]
 8007666:	bfd8      	it	le
 8007668:	2501      	movle	r5, #1
 800766a:	441d      	add	r5, r3
 800766c:	f04f 0800 	mov.w	r8, #0
 8007670:	4651      	mov	r1, sl
 8007672:	2201      	movs	r2, #1
 8007674:	4620      	mov	r0, r4
 8007676:	f000 fb8b 	bl	8007d90 <__lshift>
 800767a:	4631      	mov	r1, r6
 800767c:	4682      	mov	sl, r0
 800767e:	f000 fbf3 	bl	8007e68 <__mcmp>
 8007682:	2800      	cmp	r0, #0
 8007684:	dc96      	bgt.n	80075b4 <_dtoa_r+0xabc>
 8007686:	d102      	bne.n	800768e <_dtoa_r+0xb96>
 8007688:	f019 0f01 	tst.w	r9, #1
 800768c:	d192      	bne.n	80075b4 <_dtoa_r+0xabc>
 800768e:	462b      	mov	r3, r5
 8007690:	461d      	mov	r5, r3
 8007692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007696:	2a30      	cmp	r2, #48	; 0x30
 8007698:	d0fa      	beq.n	8007690 <_dtoa_r+0xb98>
 800769a:	e6dd      	b.n	8007458 <_dtoa_r+0x960>
 800769c:	9a00      	ldr	r2, [sp, #0]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d189      	bne.n	80075b6 <_dtoa_r+0xabe>
 80076a2:	f10b 0b01 	add.w	fp, fp, #1
 80076a6:	2331      	movs	r3, #49	; 0x31
 80076a8:	e796      	b.n	80075d8 <_dtoa_r+0xae0>
 80076aa:	4b0a      	ldr	r3, [pc, #40]	; (80076d4 <_dtoa_r+0xbdc>)
 80076ac:	f7ff ba99 	b.w	8006be2 <_dtoa_r+0xea>
 80076b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f47f aa6d 	bne.w	8006b92 <_dtoa_r+0x9a>
 80076b8:	4b07      	ldr	r3, [pc, #28]	; (80076d8 <_dtoa_r+0xbe0>)
 80076ba:	f7ff ba92 	b.w	8006be2 <_dtoa_r+0xea>
 80076be:	9b01      	ldr	r3, [sp, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	dcb5      	bgt.n	8007630 <_dtoa_r+0xb38>
 80076c4:	9b07      	ldr	r3, [sp, #28]
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	f73f aeb1 	bgt.w	800742e <_dtoa_r+0x936>
 80076cc:	e7b0      	b.n	8007630 <_dtoa_r+0xb38>
 80076ce:	bf00      	nop
 80076d0:	0800b6c1 	.word	0x0800b6c1
 80076d4:	0800b61c 	.word	0x0800b61c
 80076d8:	0800b645 	.word	0x0800b645

080076dc <_free_r>:
 80076dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076de:	2900      	cmp	r1, #0
 80076e0:	d044      	beq.n	800776c <_free_r+0x90>
 80076e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076e6:	9001      	str	r0, [sp, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f1a1 0404 	sub.w	r4, r1, #4
 80076ee:	bfb8      	it	lt
 80076f0:	18e4      	addlt	r4, r4, r3
 80076f2:	f000 f8e7 	bl	80078c4 <__malloc_lock>
 80076f6:	4a1e      	ldr	r2, [pc, #120]	; (8007770 <_free_r+0x94>)
 80076f8:	9801      	ldr	r0, [sp, #4]
 80076fa:	6813      	ldr	r3, [r2, #0]
 80076fc:	b933      	cbnz	r3, 800770c <_free_r+0x30>
 80076fe:	6063      	str	r3, [r4, #4]
 8007700:	6014      	str	r4, [r2, #0]
 8007702:	b003      	add	sp, #12
 8007704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007708:	f000 b8e2 	b.w	80078d0 <__malloc_unlock>
 800770c:	42a3      	cmp	r3, r4
 800770e:	d908      	bls.n	8007722 <_free_r+0x46>
 8007710:	6825      	ldr	r5, [r4, #0]
 8007712:	1961      	adds	r1, r4, r5
 8007714:	428b      	cmp	r3, r1
 8007716:	bf01      	itttt	eq
 8007718:	6819      	ldreq	r1, [r3, #0]
 800771a:	685b      	ldreq	r3, [r3, #4]
 800771c:	1949      	addeq	r1, r1, r5
 800771e:	6021      	streq	r1, [r4, #0]
 8007720:	e7ed      	b.n	80076fe <_free_r+0x22>
 8007722:	461a      	mov	r2, r3
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	b10b      	cbz	r3, 800772c <_free_r+0x50>
 8007728:	42a3      	cmp	r3, r4
 800772a:	d9fa      	bls.n	8007722 <_free_r+0x46>
 800772c:	6811      	ldr	r1, [r2, #0]
 800772e:	1855      	adds	r5, r2, r1
 8007730:	42a5      	cmp	r5, r4
 8007732:	d10b      	bne.n	800774c <_free_r+0x70>
 8007734:	6824      	ldr	r4, [r4, #0]
 8007736:	4421      	add	r1, r4
 8007738:	1854      	adds	r4, r2, r1
 800773a:	42a3      	cmp	r3, r4
 800773c:	6011      	str	r1, [r2, #0]
 800773e:	d1e0      	bne.n	8007702 <_free_r+0x26>
 8007740:	681c      	ldr	r4, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	6053      	str	r3, [r2, #4]
 8007746:	440c      	add	r4, r1
 8007748:	6014      	str	r4, [r2, #0]
 800774a:	e7da      	b.n	8007702 <_free_r+0x26>
 800774c:	d902      	bls.n	8007754 <_free_r+0x78>
 800774e:	230c      	movs	r3, #12
 8007750:	6003      	str	r3, [r0, #0]
 8007752:	e7d6      	b.n	8007702 <_free_r+0x26>
 8007754:	6825      	ldr	r5, [r4, #0]
 8007756:	1961      	adds	r1, r4, r5
 8007758:	428b      	cmp	r3, r1
 800775a:	bf04      	itt	eq
 800775c:	6819      	ldreq	r1, [r3, #0]
 800775e:	685b      	ldreq	r3, [r3, #4]
 8007760:	6063      	str	r3, [r4, #4]
 8007762:	bf04      	itt	eq
 8007764:	1949      	addeq	r1, r1, r5
 8007766:	6021      	streq	r1, [r4, #0]
 8007768:	6054      	str	r4, [r2, #4]
 800776a:	e7ca      	b.n	8007702 <_free_r+0x26>
 800776c:	b003      	add	sp, #12
 800776e:	bd30      	pop	{r4, r5, pc}
 8007770:	20000bcc 	.word	0x20000bcc

08007774 <malloc>:
 8007774:	4b02      	ldr	r3, [pc, #8]	; (8007780 <malloc+0xc>)
 8007776:	4601      	mov	r1, r0
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	f000 b823 	b.w	80077c4 <_malloc_r>
 800777e:	bf00      	nop
 8007780:	20000078 	.word	0x20000078

08007784 <sbrk_aligned>:
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	4e0e      	ldr	r6, [pc, #56]	; (80077c0 <sbrk_aligned+0x3c>)
 8007788:	460c      	mov	r4, r1
 800778a:	6831      	ldr	r1, [r6, #0]
 800778c:	4605      	mov	r5, r0
 800778e:	b911      	cbnz	r1, 8007796 <sbrk_aligned+0x12>
 8007790:	f001 fe00 	bl	8009394 <_sbrk_r>
 8007794:	6030      	str	r0, [r6, #0]
 8007796:	4621      	mov	r1, r4
 8007798:	4628      	mov	r0, r5
 800779a:	f001 fdfb 	bl	8009394 <_sbrk_r>
 800779e:	1c43      	adds	r3, r0, #1
 80077a0:	d00a      	beq.n	80077b8 <sbrk_aligned+0x34>
 80077a2:	1cc4      	adds	r4, r0, #3
 80077a4:	f024 0403 	bic.w	r4, r4, #3
 80077a8:	42a0      	cmp	r0, r4
 80077aa:	d007      	beq.n	80077bc <sbrk_aligned+0x38>
 80077ac:	1a21      	subs	r1, r4, r0
 80077ae:	4628      	mov	r0, r5
 80077b0:	f001 fdf0 	bl	8009394 <_sbrk_r>
 80077b4:	3001      	adds	r0, #1
 80077b6:	d101      	bne.n	80077bc <sbrk_aligned+0x38>
 80077b8:	f04f 34ff 	mov.w	r4, #4294967295
 80077bc:	4620      	mov	r0, r4
 80077be:	bd70      	pop	{r4, r5, r6, pc}
 80077c0:	20000bd0 	.word	0x20000bd0

080077c4 <_malloc_r>:
 80077c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077c8:	1ccd      	adds	r5, r1, #3
 80077ca:	f025 0503 	bic.w	r5, r5, #3
 80077ce:	3508      	adds	r5, #8
 80077d0:	2d0c      	cmp	r5, #12
 80077d2:	bf38      	it	cc
 80077d4:	250c      	movcc	r5, #12
 80077d6:	2d00      	cmp	r5, #0
 80077d8:	4607      	mov	r7, r0
 80077da:	db01      	blt.n	80077e0 <_malloc_r+0x1c>
 80077dc:	42a9      	cmp	r1, r5
 80077de:	d905      	bls.n	80077ec <_malloc_r+0x28>
 80077e0:	230c      	movs	r3, #12
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	2600      	movs	r6, #0
 80077e6:	4630      	mov	r0, r6
 80077e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80078c0 <_malloc_r+0xfc>
 80077f0:	f000 f868 	bl	80078c4 <__malloc_lock>
 80077f4:	f8d8 3000 	ldr.w	r3, [r8]
 80077f8:	461c      	mov	r4, r3
 80077fa:	bb5c      	cbnz	r4, 8007854 <_malloc_r+0x90>
 80077fc:	4629      	mov	r1, r5
 80077fe:	4638      	mov	r0, r7
 8007800:	f7ff ffc0 	bl	8007784 <sbrk_aligned>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	4604      	mov	r4, r0
 8007808:	d155      	bne.n	80078b6 <_malloc_r+0xf2>
 800780a:	f8d8 4000 	ldr.w	r4, [r8]
 800780e:	4626      	mov	r6, r4
 8007810:	2e00      	cmp	r6, #0
 8007812:	d145      	bne.n	80078a0 <_malloc_r+0xdc>
 8007814:	2c00      	cmp	r4, #0
 8007816:	d048      	beq.n	80078aa <_malloc_r+0xe6>
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	4631      	mov	r1, r6
 800781c:	4638      	mov	r0, r7
 800781e:	eb04 0903 	add.w	r9, r4, r3
 8007822:	f001 fdb7 	bl	8009394 <_sbrk_r>
 8007826:	4581      	cmp	r9, r0
 8007828:	d13f      	bne.n	80078aa <_malloc_r+0xe6>
 800782a:	6821      	ldr	r1, [r4, #0]
 800782c:	1a6d      	subs	r5, r5, r1
 800782e:	4629      	mov	r1, r5
 8007830:	4638      	mov	r0, r7
 8007832:	f7ff ffa7 	bl	8007784 <sbrk_aligned>
 8007836:	3001      	adds	r0, #1
 8007838:	d037      	beq.n	80078aa <_malloc_r+0xe6>
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	442b      	add	r3, r5
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	f8d8 3000 	ldr.w	r3, [r8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d038      	beq.n	80078ba <_malloc_r+0xf6>
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	42a2      	cmp	r2, r4
 800784c:	d12b      	bne.n	80078a6 <_malloc_r+0xe2>
 800784e:	2200      	movs	r2, #0
 8007850:	605a      	str	r2, [r3, #4]
 8007852:	e00f      	b.n	8007874 <_malloc_r+0xb0>
 8007854:	6822      	ldr	r2, [r4, #0]
 8007856:	1b52      	subs	r2, r2, r5
 8007858:	d41f      	bmi.n	800789a <_malloc_r+0xd6>
 800785a:	2a0b      	cmp	r2, #11
 800785c:	d917      	bls.n	800788e <_malloc_r+0xca>
 800785e:	1961      	adds	r1, r4, r5
 8007860:	42a3      	cmp	r3, r4
 8007862:	6025      	str	r5, [r4, #0]
 8007864:	bf18      	it	ne
 8007866:	6059      	strne	r1, [r3, #4]
 8007868:	6863      	ldr	r3, [r4, #4]
 800786a:	bf08      	it	eq
 800786c:	f8c8 1000 	streq.w	r1, [r8]
 8007870:	5162      	str	r2, [r4, r5]
 8007872:	604b      	str	r3, [r1, #4]
 8007874:	4638      	mov	r0, r7
 8007876:	f104 060b 	add.w	r6, r4, #11
 800787a:	f000 f829 	bl	80078d0 <__malloc_unlock>
 800787e:	f026 0607 	bic.w	r6, r6, #7
 8007882:	1d23      	adds	r3, r4, #4
 8007884:	1af2      	subs	r2, r6, r3
 8007886:	d0ae      	beq.n	80077e6 <_malloc_r+0x22>
 8007888:	1b9b      	subs	r3, r3, r6
 800788a:	50a3      	str	r3, [r4, r2]
 800788c:	e7ab      	b.n	80077e6 <_malloc_r+0x22>
 800788e:	42a3      	cmp	r3, r4
 8007890:	6862      	ldr	r2, [r4, #4]
 8007892:	d1dd      	bne.n	8007850 <_malloc_r+0x8c>
 8007894:	f8c8 2000 	str.w	r2, [r8]
 8007898:	e7ec      	b.n	8007874 <_malloc_r+0xb0>
 800789a:	4623      	mov	r3, r4
 800789c:	6864      	ldr	r4, [r4, #4]
 800789e:	e7ac      	b.n	80077fa <_malloc_r+0x36>
 80078a0:	4634      	mov	r4, r6
 80078a2:	6876      	ldr	r6, [r6, #4]
 80078a4:	e7b4      	b.n	8007810 <_malloc_r+0x4c>
 80078a6:	4613      	mov	r3, r2
 80078a8:	e7cc      	b.n	8007844 <_malloc_r+0x80>
 80078aa:	230c      	movs	r3, #12
 80078ac:	603b      	str	r3, [r7, #0]
 80078ae:	4638      	mov	r0, r7
 80078b0:	f000 f80e 	bl	80078d0 <__malloc_unlock>
 80078b4:	e797      	b.n	80077e6 <_malloc_r+0x22>
 80078b6:	6025      	str	r5, [r4, #0]
 80078b8:	e7dc      	b.n	8007874 <_malloc_r+0xb0>
 80078ba:	605b      	str	r3, [r3, #4]
 80078bc:	deff      	udf	#255	; 0xff
 80078be:	bf00      	nop
 80078c0:	20000bcc 	.word	0x20000bcc

080078c4 <__malloc_lock>:
 80078c4:	4801      	ldr	r0, [pc, #4]	; (80078cc <__malloc_lock+0x8>)
 80078c6:	f7ff b878 	b.w	80069ba <__retarget_lock_acquire_recursive>
 80078ca:	bf00      	nop
 80078cc:	20000bc8 	.word	0x20000bc8

080078d0 <__malloc_unlock>:
 80078d0:	4801      	ldr	r0, [pc, #4]	; (80078d8 <__malloc_unlock+0x8>)
 80078d2:	f7ff b873 	b.w	80069bc <__retarget_lock_release_recursive>
 80078d6:	bf00      	nop
 80078d8:	20000bc8 	.word	0x20000bc8

080078dc <_Balloc>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	69c6      	ldr	r6, [r0, #28]
 80078e0:	4604      	mov	r4, r0
 80078e2:	460d      	mov	r5, r1
 80078e4:	b976      	cbnz	r6, 8007904 <_Balloc+0x28>
 80078e6:	2010      	movs	r0, #16
 80078e8:	f7ff ff44 	bl	8007774 <malloc>
 80078ec:	4602      	mov	r2, r0
 80078ee:	61e0      	str	r0, [r4, #28]
 80078f0:	b920      	cbnz	r0, 80078fc <_Balloc+0x20>
 80078f2:	4b18      	ldr	r3, [pc, #96]	; (8007954 <_Balloc+0x78>)
 80078f4:	4818      	ldr	r0, [pc, #96]	; (8007958 <_Balloc+0x7c>)
 80078f6:	216b      	movs	r1, #107	; 0x6b
 80078f8:	f001 fd66 	bl	80093c8 <__assert_func>
 80078fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007900:	6006      	str	r6, [r0, #0]
 8007902:	60c6      	str	r6, [r0, #12]
 8007904:	69e6      	ldr	r6, [r4, #28]
 8007906:	68f3      	ldr	r3, [r6, #12]
 8007908:	b183      	cbz	r3, 800792c <_Balloc+0x50>
 800790a:	69e3      	ldr	r3, [r4, #28]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007912:	b9b8      	cbnz	r0, 8007944 <_Balloc+0x68>
 8007914:	2101      	movs	r1, #1
 8007916:	fa01 f605 	lsl.w	r6, r1, r5
 800791a:	1d72      	adds	r2, r6, #5
 800791c:	0092      	lsls	r2, r2, #2
 800791e:	4620      	mov	r0, r4
 8007920:	f001 fd70 	bl	8009404 <_calloc_r>
 8007924:	b160      	cbz	r0, 8007940 <_Balloc+0x64>
 8007926:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800792a:	e00e      	b.n	800794a <_Balloc+0x6e>
 800792c:	2221      	movs	r2, #33	; 0x21
 800792e:	2104      	movs	r1, #4
 8007930:	4620      	mov	r0, r4
 8007932:	f001 fd67 	bl	8009404 <_calloc_r>
 8007936:	69e3      	ldr	r3, [r4, #28]
 8007938:	60f0      	str	r0, [r6, #12]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e4      	bne.n	800790a <_Balloc+0x2e>
 8007940:	2000      	movs	r0, #0
 8007942:	bd70      	pop	{r4, r5, r6, pc}
 8007944:	6802      	ldr	r2, [r0, #0]
 8007946:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800794a:	2300      	movs	r3, #0
 800794c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007950:	e7f7      	b.n	8007942 <_Balloc+0x66>
 8007952:	bf00      	nop
 8007954:	0800b652 	.word	0x0800b652
 8007958:	0800b6d2 	.word	0x0800b6d2

0800795c <_Bfree>:
 800795c:	b570      	push	{r4, r5, r6, lr}
 800795e:	69c6      	ldr	r6, [r0, #28]
 8007960:	4605      	mov	r5, r0
 8007962:	460c      	mov	r4, r1
 8007964:	b976      	cbnz	r6, 8007984 <_Bfree+0x28>
 8007966:	2010      	movs	r0, #16
 8007968:	f7ff ff04 	bl	8007774 <malloc>
 800796c:	4602      	mov	r2, r0
 800796e:	61e8      	str	r0, [r5, #28]
 8007970:	b920      	cbnz	r0, 800797c <_Bfree+0x20>
 8007972:	4b09      	ldr	r3, [pc, #36]	; (8007998 <_Bfree+0x3c>)
 8007974:	4809      	ldr	r0, [pc, #36]	; (800799c <_Bfree+0x40>)
 8007976:	218f      	movs	r1, #143	; 0x8f
 8007978:	f001 fd26 	bl	80093c8 <__assert_func>
 800797c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007980:	6006      	str	r6, [r0, #0]
 8007982:	60c6      	str	r6, [r0, #12]
 8007984:	b13c      	cbz	r4, 8007996 <_Bfree+0x3a>
 8007986:	69eb      	ldr	r3, [r5, #28]
 8007988:	6862      	ldr	r2, [r4, #4]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007990:	6021      	str	r1, [r4, #0]
 8007992:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	0800b652 	.word	0x0800b652
 800799c:	0800b6d2 	.word	0x0800b6d2

080079a0 <__multadd>:
 80079a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a4:	690d      	ldr	r5, [r1, #16]
 80079a6:	4607      	mov	r7, r0
 80079a8:	460c      	mov	r4, r1
 80079aa:	461e      	mov	r6, r3
 80079ac:	f101 0c14 	add.w	ip, r1, #20
 80079b0:	2000      	movs	r0, #0
 80079b2:	f8dc 3000 	ldr.w	r3, [ip]
 80079b6:	b299      	uxth	r1, r3
 80079b8:	fb02 6101 	mla	r1, r2, r1, r6
 80079bc:	0c1e      	lsrs	r6, r3, #16
 80079be:	0c0b      	lsrs	r3, r1, #16
 80079c0:	fb02 3306 	mla	r3, r2, r6, r3
 80079c4:	b289      	uxth	r1, r1
 80079c6:	3001      	adds	r0, #1
 80079c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079cc:	4285      	cmp	r5, r0
 80079ce:	f84c 1b04 	str.w	r1, [ip], #4
 80079d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079d6:	dcec      	bgt.n	80079b2 <__multadd+0x12>
 80079d8:	b30e      	cbz	r6, 8007a1e <__multadd+0x7e>
 80079da:	68a3      	ldr	r3, [r4, #8]
 80079dc:	42ab      	cmp	r3, r5
 80079de:	dc19      	bgt.n	8007a14 <__multadd+0x74>
 80079e0:	6861      	ldr	r1, [r4, #4]
 80079e2:	4638      	mov	r0, r7
 80079e4:	3101      	adds	r1, #1
 80079e6:	f7ff ff79 	bl	80078dc <_Balloc>
 80079ea:	4680      	mov	r8, r0
 80079ec:	b928      	cbnz	r0, 80079fa <__multadd+0x5a>
 80079ee:	4602      	mov	r2, r0
 80079f0:	4b0c      	ldr	r3, [pc, #48]	; (8007a24 <__multadd+0x84>)
 80079f2:	480d      	ldr	r0, [pc, #52]	; (8007a28 <__multadd+0x88>)
 80079f4:	21ba      	movs	r1, #186	; 0xba
 80079f6:	f001 fce7 	bl	80093c8 <__assert_func>
 80079fa:	6922      	ldr	r2, [r4, #16]
 80079fc:	3202      	adds	r2, #2
 80079fe:	f104 010c 	add.w	r1, r4, #12
 8007a02:	0092      	lsls	r2, r2, #2
 8007a04:	300c      	adds	r0, #12
 8007a06:	f7fe ffda 	bl	80069be <memcpy>
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	f7ff ffa5 	bl	800795c <_Bfree>
 8007a12:	4644      	mov	r4, r8
 8007a14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a18:	3501      	adds	r5, #1
 8007a1a:	615e      	str	r6, [r3, #20]
 8007a1c:	6125      	str	r5, [r4, #16]
 8007a1e:	4620      	mov	r0, r4
 8007a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a24:	0800b6c1 	.word	0x0800b6c1
 8007a28:	0800b6d2 	.word	0x0800b6d2

08007a2c <__s2b>:
 8007a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a30:	460c      	mov	r4, r1
 8007a32:	4615      	mov	r5, r2
 8007a34:	461f      	mov	r7, r3
 8007a36:	2209      	movs	r2, #9
 8007a38:	3308      	adds	r3, #8
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a40:	2100      	movs	r1, #0
 8007a42:	2201      	movs	r2, #1
 8007a44:	429a      	cmp	r2, r3
 8007a46:	db09      	blt.n	8007a5c <__s2b+0x30>
 8007a48:	4630      	mov	r0, r6
 8007a4a:	f7ff ff47 	bl	80078dc <_Balloc>
 8007a4e:	b940      	cbnz	r0, 8007a62 <__s2b+0x36>
 8007a50:	4602      	mov	r2, r0
 8007a52:	4b19      	ldr	r3, [pc, #100]	; (8007ab8 <__s2b+0x8c>)
 8007a54:	4819      	ldr	r0, [pc, #100]	; (8007abc <__s2b+0x90>)
 8007a56:	21d3      	movs	r1, #211	; 0xd3
 8007a58:	f001 fcb6 	bl	80093c8 <__assert_func>
 8007a5c:	0052      	lsls	r2, r2, #1
 8007a5e:	3101      	adds	r1, #1
 8007a60:	e7f0      	b.n	8007a44 <__s2b+0x18>
 8007a62:	9b08      	ldr	r3, [sp, #32]
 8007a64:	6143      	str	r3, [r0, #20]
 8007a66:	2d09      	cmp	r5, #9
 8007a68:	f04f 0301 	mov.w	r3, #1
 8007a6c:	6103      	str	r3, [r0, #16]
 8007a6e:	dd16      	ble.n	8007a9e <__s2b+0x72>
 8007a70:	f104 0909 	add.w	r9, r4, #9
 8007a74:	46c8      	mov	r8, r9
 8007a76:	442c      	add	r4, r5
 8007a78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007a7c:	4601      	mov	r1, r0
 8007a7e:	3b30      	subs	r3, #48	; 0x30
 8007a80:	220a      	movs	r2, #10
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7ff ff8c 	bl	80079a0 <__multadd>
 8007a88:	45a0      	cmp	r8, r4
 8007a8a:	d1f5      	bne.n	8007a78 <__s2b+0x4c>
 8007a8c:	f1a5 0408 	sub.w	r4, r5, #8
 8007a90:	444c      	add	r4, r9
 8007a92:	1b2d      	subs	r5, r5, r4
 8007a94:	1963      	adds	r3, r4, r5
 8007a96:	42bb      	cmp	r3, r7
 8007a98:	db04      	blt.n	8007aa4 <__s2b+0x78>
 8007a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a9e:	340a      	adds	r4, #10
 8007aa0:	2509      	movs	r5, #9
 8007aa2:	e7f6      	b.n	8007a92 <__s2b+0x66>
 8007aa4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007aa8:	4601      	mov	r1, r0
 8007aaa:	3b30      	subs	r3, #48	; 0x30
 8007aac:	220a      	movs	r2, #10
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f7ff ff76 	bl	80079a0 <__multadd>
 8007ab4:	e7ee      	b.n	8007a94 <__s2b+0x68>
 8007ab6:	bf00      	nop
 8007ab8:	0800b6c1 	.word	0x0800b6c1
 8007abc:	0800b6d2 	.word	0x0800b6d2

08007ac0 <__hi0bits>:
 8007ac0:	0c03      	lsrs	r3, r0, #16
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	b9d3      	cbnz	r3, 8007afc <__hi0bits+0x3c>
 8007ac6:	0400      	lsls	r0, r0, #16
 8007ac8:	2310      	movs	r3, #16
 8007aca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ace:	bf04      	itt	eq
 8007ad0:	0200      	lsleq	r0, r0, #8
 8007ad2:	3308      	addeq	r3, #8
 8007ad4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ad8:	bf04      	itt	eq
 8007ada:	0100      	lsleq	r0, r0, #4
 8007adc:	3304      	addeq	r3, #4
 8007ade:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ae2:	bf04      	itt	eq
 8007ae4:	0080      	lsleq	r0, r0, #2
 8007ae6:	3302      	addeq	r3, #2
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	db05      	blt.n	8007af8 <__hi0bits+0x38>
 8007aec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007af0:	f103 0301 	add.w	r3, r3, #1
 8007af4:	bf08      	it	eq
 8007af6:	2320      	moveq	r3, #32
 8007af8:	4618      	mov	r0, r3
 8007afa:	4770      	bx	lr
 8007afc:	2300      	movs	r3, #0
 8007afe:	e7e4      	b.n	8007aca <__hi0bits+0xa>

08007b00 <__lo0bits>:
 8007b00:	6803      	ldr	r3, [r0, #0]
 8007b02:	f013 0207 	ands.w	r2, r3, #7
 8007b06:	d00c      	beq.n	8007b22 <__lo0bits+0x22>
 8007b08:	07d9      	lsls	r1, r3, #31
 8007b0a:	d422      	bmi.n	8007b52 <__lo0bits+0x52>
 8007b0c:	079a      	lsls	r2, r3, #30
 8007b0e:	bf49      	itett	mi
 8007b10:	085b      	lsrmi	r3, r3, #1
 8007b12:	089b      	lsrpl	r3, r3, #2
 8007b14:	6003      	strmi	r3, [r0, #0]
 8007b16:	2201      	movmi	r2, #1
 8007b18:	bf5c      	itt	pl
 8007b1a:	6003      	strpl	r3, [r0, #0]
 8007b1c:	2202      	movpl	r2, #2
 8007b1e:	4610      	mov	r0, r2
 8007b20:	4770      	bx	lr
 8007b22:	b299      	uxth	r1, r3
 8007b24:	b909      	cbnz	r1, 8007b2a <__lo0bits+0x2a>
 8007b26:	0c1b      	lsrs	r3, r3, #16
 8007b28:	2210      	movs	r2, #16
 8007b2a:	b2d9      	uxtb	r1, r3
 8007b2c:	b909      	cbnz	r1, 8007b32 <__lo0bits+0x32>
 8007b2e:	3208      	adds	r2, #8
 8007b30:	0a1b      	lsrs	r3, r3, #8
 8007b32:	0719      	lsls	r1, r3, #28
 8007b34:	bf04      	itt	eq
 8007b36:	091b      	lsreq	r3, r3, #4
 8007b38:	3204      	addeq	r2, #4
 8007b3a:	0799      	lsls	r1, r3, #30
 8007b3c:	bf04      	itt	eq
 8007b3e:	089b      	lsreq	r3, r3, #2
 8007b40:	3202      	addeq	r2, #2
 8007b42:	07d9      	lsls	r1, r3, #31
 8007b44:	d403      	bmi.n	8007b4e <__lo0bits+0x4e>
 8007b46:	085b      	lsrs	r3, r3, #1
 8007b48:	f102 0201 	add.w	r2, r2, #1
 8007b4c:	d003      	beq.n	8007b56 <__lo0bits+0x56>
 8007b4e:	6003      	str	r3, [r0, #0]
 8007b50:	e7e5      	b.n	8007b1e <__lo0bits+0x1e>
 8007b52:	2200      	movs	r2, #0
 8007b54:	e7e3      	b.n	8007b1e <__lo0bits+0x1e>
 8007b56:	2220      	movs	r2, #32
 8007b58:	e7e1      	b.n	8007b1e <__lo0bits+0x1e>
	...

08007b5c <__i2b>:
 8007b5c:	b510      	push	{r4, lr}
 8007b5e:	460c      	mov	r4, r1
 8007b60:	2101      	movs	r1, #1
 8007b62:	f7ff febb 	bl	80078dc <_Balloc>
 8007b66:	4602      	mov	r2, r0
 8007b68:	b928      	cbnz	r0, 8007b76 <__i2b+0x1a>
 8007b6a:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <__i2b+0x24>)
 8007b6c:	4805      	ldr	r0, [pc, #20]	; (8007b84 <__i2b+0x28>)
 8007b6e:	f240 1145 	movw	r1, #325	; 0x145
 8007b72:	f001 fc29 	bl	80093c8 <__assert_func>
 8007b76:	2301      	movs	r3, #1
 8007b78:	6144      	str	r4, [r0, #20]
 8007b7a:	6103      	str	r3, [r0, #16]
 8007b7c:	bd10      	pop	{r4, pc}
 8007b7e:	bf00      	nop
 8007b80:	0800b6c1 	.word	0x0800b6c1
 8007b84:	0800b6d2 	.word	0x0800b6d2

08007b88 <__multiply>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	4691      	mov	r9, r2
 8007b8e:	690a      	ldr	r2, [r1, #16]
 8007b90:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	bfb8      	it	lt
 8007b98:	460b      	movlt	r3, r1
 8007b9a:	460c      	mov	r4, r1
 8007b9c:	bfbc      	itt	lt
 8007b9e:	464c      	movlt	r4, r9
 8007ba0:	4699      	movlt	r9, r3
 8007ba2:	6927      	ldr	r7, [r4, #16]
 8007ba4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ba8:	68a3      	ldr	r3, [r4, #8]
 8007baa:	6861      	ldr	r1, [r4, #4]
 8007bac:	eb07 060a 	add.w	r6, r7, sl
 8007bb0:	42b3      	cmp	r3, r6
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	bfb8      	it	lt
 8007bb6:	3101      	addlt	r1, #1
 8007bb8:	f7ff fe90 	bl	80078dc <_Balloc>
 8007bbc:	b930      	cbnz	r0, 8007bcc <__multiply+0x44>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	4b44      	ldr	r3, [pc, #272]	; (8007cd4 <__multiply+0x14c>)
 8007bc2:	4845      	ldr	r0, [pc, #276]	; (8007cd8 <__multiply+0x150>)
 8007bc4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007bc8:	f001 fbfe 	bl	80093c8 <__assert_func>
 8007bcc:	f100 0514 	add.w	r5, r0, #20
 8007bd0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007bd4:	462b      	mov	r3, r5
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	4543      	cmp	r3, r8
 8007bda:	d321      	bcc.n	8007c20 <__multiply+0x98>
 8007bdc:	f104 0314 	add.w	r3, r4, #20
 8007be0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007be4:	f109 0314 	add.w	r3, r9, #20
 8007be8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007bec:	9202      	str	r2, [sp, #8]
 8007bee:	1b3a      	subs	r2, r7, r4
 8007bf0:	3a15      	subs	r2, #21
 8007bf2:	f022 0203 	bic.w	r2, r2, #3
 8007bf6:	3204      	adds	r2, #4
 8007bf8:	f104 0115 	add.w	r1, r4, #21
 8007bfc:	428f      	cmp	r7, r1
 8007bfe:	bf38      	it	cc
 8007c00:	2204      	movcc	r2, #4
 8007c02:	9201      	str	r2, [sp, #4]
 8007c04:	9a02      	ldr	r2, [sp, #8]
 8007c06:	9303      	str	r3, [sp, #12]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d80c      	bhi.n	8007c26 <__multiply+0x9e>
 8007c0c:	2e00      	cmp	r6, #0
 8007c0e:	dd03      	ble.n	8007c18 <__multiply+0x90>
 8007c10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d05b      	beq.n	8007cd0 <__multiply+0x148>
 8007c18:	6106      	str	r6, [r0, #16]
 8007c1a:	b005      	add	sp, #20
 8007c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c20:	f843 2b04 	str.w	r2, [r3], #4
 8007c24:	e7d8      	b.n	8007bd8 <__multiply+0x50>
 8007c26:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c2a:	f1ba 0f00 	cmp.w	sl, #0
 8007c2e:	d024      	beq.n	8007c7a <__multiply+0xf2>
 8007c30:	f104 0e14 	add.w	lr, r4, #20
 8007c34:	46a9      	mov	r9, r5
 8007c36:	f04f 0c00 	mov.w	ip, #0
 8007c3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c3e:	f8d9 1000 	ldr.w	r1, [r9]
 8007c42:	fa1f fb82 	uxth.w	fp, r2
 8007c46:	b289      	uxth	r1, r1
 8007c48:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007c50:	f8d9 2000 	ldr.w	r2, [r9]
 8007c54:	4461      	add	r1, ip
 8007c56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c5a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007c5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c62:	b289      	uxth	r1, r1
 8007c64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c68:	4577      	cmp	r7, lr
 8007c6a:	f849 1b04 	str.w	r1, [r9], #4
 8007c6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c72:	d8e2      	bhi.n	8007c3a <__multiply+0xb2>
 8007c74:	9a01      	ldr	r2, [sp, #4]
 8007c76:	f845 c002 	str.w	ip, [r5, r2]
 8007c7a:	9a03      	ldr	r2, [sp, #12]
 8007c7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c80:	3304      	adds	r3, #4
 8007c82:	f1b9 0f00 	cmp.w	r9, #0
 8007c86:	d021      	beq.n	8007ccc <__multiply+0x144>
 8007c88:	6829      	ldr	r1, [r5, #0]
 8007c8a:	f104 0c14 	add.w	ip, r4, #20
 8007c8e:	46ae      	mov	lr, r5
 8007c90:	f04f 0a00 	mov.w	sl, #0
 8007c94:	f8bc b000 	ldrh.w	fp, [ip]
 8007c98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c9c:	fb09 220b 	mla	r2, r9, fp, r2
 8007ca0:	4452      	add	r2, sl
 8007ca2:	b289      	uxth	r1, r1
 8007ca4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ca8:	f84e 1b04 	str.w	r1, [lr], #4
 8007cac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007cb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cb4:	f8be 1000 	ldrh.w	r1, [lr]
 8007cb8:	fb09 110a 	mla	r1, r9, sl, r1
 8007cbc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007cc0:	4567      	cmp	r7, ip
 8007cc2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cc6:	d8e5      	bhi.n	8007c94 <__multiply+0x10c>
 8007cc8:	9a01      	ldr	r2, [sp, #4]
 8007cca:	50a9      	str	r1, [r5, r2]
 8007ccc:	3504      	adds	r5, #4
 8007cce:	e799      	b.n	8007c04 <__multiply+0x7c>
 8007cd0:	3e01      	subs	r6, #1
 8007cd2:	e79b      	b.n	8007c0c <__multiply+0x84>
 8007cd4:	0800b6c1 	.word	0x0800b6c1
 8007cd8:	0800b6d2 	.word	0x0800b6d2

08007cdc <__pow5mult>:
 8007cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ce0:	4615      	mov	r5, r2
 8007ce2:	f012 0203 	ands.w	r2, r2, #3
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	460f      	mov	r7, r1
 8007cea:	d007      	beq.n	8007cfc <__pow5mult+0x20>
 8007cec:	4c25      	ldr	r4, [pc, #148]	; (8007d84 <__pow5mult+0xa8>)
 8007cee:	3a01      	subs	r2, #1
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cf6:	f7ff fe53 	bl	80079a0 <__multadd>
 8007cfa:	4607      	mov	r7, r0
 8007cfc:	10ad      	asrs	r5, r5, #2
 8007cfe:	d03d      	beq.n	8007d7c <__pow5mult+0xa0>
 8007d00:	69f4      	ldr	r4, [r6, #28]
 8007d02:	b97c      	cbnz	r4, 8007d24 <__pow5mult+0x48>
 8007d04:	2010      	movs	r0, #16
 8007d06:	f7ff fd35 	bl	8007774 <malloc>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	61f0      	str	r0, [r6, #28]
 8007d0e:	b928      	cbnz	r0, 8007d1c <__pow5mult+0x40>
 8007d10:	4b1d      	ldr	r3, [pc, #116]	; (8007d88 <__pow5mult+0xac>)
 8007d12:	481e      	ldr	r0, [pc, #120]	; (8007d8c <__pow5mult+0xb0>)
 8007d14:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007d18:	f001 fb56 	bl	80093c8 <__assert_func>
 8007d1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d20:	6004      	str	r4, [r0, #0]
 8007d22:	60c4      	str	r4, [r0, #12]
 8007d24:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007d28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d2c:	b94c      	cbnz	r4, 8007d42 <__pow5mult+0x66>
 8007d2e:	f240 2171 	movw	r1, #625	; 0x271
 8007d32:	4630      	mov	r0, r6
 8007d34:	f7ff ff12 	bl	8007b5c <__i2b>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d3e:	4604      	mov	r4, r0
 8007d40:	6003      	str	r3, [r0, #0]
 8007d42:	f04f 0900 	mov.w	r9, #0
 8007d46:	07eb      	lsls	r3, r5, #31
 8007d48:	d50a      	bpl.n	8007d60 <__pow5mult+0x84>
 8007d4a:	4639      	mov	r1, r7
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	4630      	mov	r0, r6
 8007d50:	f7ff ff1a 	bl	8007b88 <__multiply>
 8007d54:	4639      	mov	r1, r7
 8007d56:	4680      	mov	r8, r0
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f7ff fdff 	bl	800795c <_Bfree>
 8007d5e:	4647      	mov	r7, r8
 8007d60:	106d      	asrs	r5, r5, #1
 8007d62:	d00b      	beq.n	8007d7c <__pow5mult+0xa0>
 8007d64:	6820      	ldr	r0, [r4, #0]
 8007d66:	b938      	cbnz	r0, 8007d78 <__pow5mult+0x9c>
 8007d68:	4622      	mov	r2, r4
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f7ff ff0b 	bl	8007b88 <__multiply>
 8007d72:	6020      	str	r0, [r4, #0]
 8007d74:	f8c0 9000 	str.w	r9, [r0]
 8007d78:	4604      	mov	r4, r0
 8007d7a:	e7e4      	b.n	8007d46 <__pow5mult+0x6a>
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d82:	bf00      	nop
 8007d84:	0800b820 	.word	0x0800b820
 8007d88:	0800b652 	.word	0x0800b652
 8007d8c:	0800b6d2 	.word	0x0800b6d2

08007d90 <__lshift>:
 8007d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d94:	460c      	mov	r4, r1
 8007d96:	6849      	ldr	r1, [r1, #4]
 8007d98:	6923      	ldr	r3, [r4, #16]
 8007d9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d9e:	68a3      	ldr	r3, [r4, #8]
 8007da0:	4607      	mov	r7, r0
 8007da2:	4691      	mov	r9, r2
 8007da4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007da8:	f108 0601 	add.w	r6, r8, #1
 8007dac:	42b3      	cmp	r3, r6
 8007dae:	db0b      	blt.n	8007dc8 <__lshift+0x38>
 8007db0:	4638      	mov	r0, r7
 8007db2:	f7ff fd93 	bl	80078dc <_Balloc>
 8007db6:	4605      	mov	r5, r0
 8007db8:	b948      	cbnz	r0, 8007dce <__lshift+0x3e>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	4b28      	ldr	r3, [pc, #160]	; (8007e60 <__lshift+0xd0>)
 8007dbe:	4829      	ldr	r0, [pc, #164]	; (8007e64 <__lshift+0xd4>)
 8007dc0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007dc4:	f001 fb00 	bl	80093c8 <__assert_func>
 8007dc8:	3101      	adds	r1, #1
 8007dca:	005b      	lsls	r3, r3, #1
 8007dcc:	e7ee      	b.n	8007dac <__lshift+0x1c>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f100 0114 	add.w	r1, r0, #20
 8007dd4:	f100 0210 	add.w	r2, r0, #16
 8007dd8:	4618      	mov	r0, r3
 8007dda:	4553      	cmp	r3, sl
 8007ddc:	db33      	blt.n	8007e46 <__lshift+0xb6>
 8007dde:	6920      	ldr	r0, [r4, #16]
 8007de0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007de4:	f104 0314 	add.w	r3, r4, #20
 8007de8:	f019 091f 	ands.w	r9, r9, #31
 8007dec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007df0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007df4:	d02b      	beq.n	8007e4e <__lshift+0xbe>
 8007df6:	f1c9 0e20 	rsb	lr, r9, #32
 8007dfa:	468a      	mov	sl, r1
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	6818      	ldr	r0, [r3, #0]
 8007e00:	fa00 f009 	lsl.w	r0, r0, r9
 8007e04:	4310      	orrs	r0, r2
 8007e06:	f84a 0b04 	str.w	r0, [sl], #4
 8007e0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e0e:	459c      	cmp	ip, r3
 8007e10:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e14:	d8f3      	bhi.n	8007dfe <__lshift+0x6e>
 8007e16:	ebac 0304 	sub.w	r3, ip, r4
 8007e1a:	3b15      	subs	r3, #21
 8007e1c:	f023 0303 	bic.w	r3, r3, #3
 8007e20:	3304      	adds	r3, #4
 8007e22:	f104 0015 	add.w	r0, r4, #21
 8007e26:	4584      	cmp	ip, r0
 8007e28:	bf38      	it	cc
 8007e2a:	2304      	movcc	r3, #4
 8007e2c:	50ca      	str	r2, [r1, r3]
 8007e2e:	b10a      	cbz	r2, 8007e34 <__lshift+0xa4>
 8007e30:	f108 0602 	add.w	r6, r8, #2
 8007e34:	3e01      	subs	r6, #1
 8007e36:	4638      	mov	r0, r7
 8007e38:	612e      	str	r6, [r5, #16]
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	f7ff fd8e 	bl	800795c <_Bfree>
 8007e40:	4628      	mov	r0, r5
 8007e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e46:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	e7c5      	b.n	8007dda <__lshift+0x4a>
 8007e4e:	3904      	subs	r1, #4
 8007e50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e54:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e58:	459c      	cmp	ip, r3
 8007e5a:	d8f9      	bhi.n	8007e50 <__lshift+0xc0>
 8007e5c:	e7ea      	b.n	8007e34 <__lshift+0xa4>
 8007e5e:	bf00      	nop
 8007e60:	0800b6c1 	.word	0x0800b6c1
 8007e64:	0800b6d2 	.word	0x0800b6d2

08007e68 <__mcmp>:
 8007e68:	b530      	push	{r4, r5, lr}
 8007e6a:	6902      	ldr	r2, [r0, #16]
 8007e6c:	690c      	ldr	r4, [r1, #16]
 8007e6e:	1b12      	subs	r2, r2, r4
 8007e70:	d10e      	bne.n	8007e90 <__mcmp+0x28>
 8007e72:	f100 0314 	add.w	r3, r0, #20
 8007e76:	3114      	adds	r1, #20
 8007e78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007e7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007e80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007e84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007e88:	42a5      	cmp	r5, r4
 8007e8a:	d003      	beq.n	8007e94 <__mcmp+0x2c>
 8007e8c:	d305      	bcc.n	8007e9a <__mcmp+0x32>
 8007e8e:	2201      	movs	r2, #1
 8007e90:	4610      	mov	r0, r2
 8007e92:	bd30      	pop	{r4, r5, pc}
 8007e94:	4283      	cmp	r3, r0
 8007e96:	d3f3      	bcc.n	8007e80 <__mcmp+0x18>
 8007e98:	e7fa      	b.n	8007e90 <__mcmp+0x28>
 8007e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e9e:	e7f7      	b.n	8007e90 <__mcmp+0x28>

08007ea0 <__mdiff>:
 8007ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ea4:	460c      	mov	r4, r1
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	4620      	mov	r0, r4
 8007eac:	4690      	mov	r8, r2
 8007eae:	f7ff ffdb 	bl	8007e68 <__mcmp>
 8007eb2:	1e05      	subs	r5, r0, #0
 8007eb4:	d110      	bne.n	8007ed8 <__mdiff+0x38>
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f7ff fd0f 	bl	80078dc <_Balloc>
 8007ebe:	b930      	cbnz	r0, 8007ece <__mdiff+0x2e>
 8007ec0:	4b3a      	ldr	r3, [pc, #232]	; (8007fac <__mdiff+0x10c>)
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	f240 2137 	movw	r1, #567	; 0x237
 8007ec8:	4839      	ldr	r0, [pc, #228]	; (8007fb0 <__mdiff+0x110>)
 8007eca:	f001 fa7d 	bl	80093c8 <__assert_func>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed8:	bfa4      	itt	ge
 8007eda:	4643      	movge	r3, r8
 8007edc:	46a0      	movge	r8, r4
 8007ede:	4630      	mov	r0, r6
 8007ee0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ee4:	bfa6      	itte	ge
 8007ee6:	461c      	movge	r4, r3
 8007ee8:	2500      	movge	r5, #0
 8007eea:	2501      	movlt	r5, #1
 8007eec:	f7ff fcf6 	bl	80078dc <_Balloc>
 8007ef0:	b920      	cbnz	r0, 8007efc <__mdiff+0x5c>
 8007ef2:	4b2e      	ldr	r3, [pc, #184]	; (8007fac <__mdiff+0x10c>)
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	f240 2145 	movw	r1, #581	; 0x245
 8007efa:	e7e5      	b.n	8007ec8 <__mdiff+0x28>
 8007efc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f00:	6926      	ldr	r6, [r4, #16]
 8007f02:	60c5      	str	r5, [r0, #12]
 8007f04:	f104 0914 	add.w	r9, r4, #20
 8007f08:	f108 0514 	add.w	r5, r8, #20
 8007f0c:	f100 0e14 	add.w	lr, r0, #20
 8007f10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007f14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f18:	f108 0210 	add.w	r2, r8, #16
 8007f1c:	46f2      	mov	sl, lr
 8007f1e:	2100      	movs	r1, #0
 8007f20:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f28:	fa11 f88b 	uxtah	r8, r1, fp
 8007f2c:	b299      	uxth	r1, r3
 8007f2e:	0c1b      	lsrs	r3, r3, #16
 8007f30:	eba8 0801 	sub.w	r8, r8, r1
 8007f34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f38:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f3c:	fa1f f888 	uxth.w	r8, r8
 8007f40:	1419      	asrs	r1, r3, #16
 8007f42:	454e      	cmp	r6, r9
 8007f44:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007f48:	f84a 3b04 	str.w	r3, [sl], #4
 8007f4c:	d8e8      	bhi.n	8007f20 <__mdiff+0x80>
 8007f4e:	1b33      	subs	r3, r6, r4
 8007f50:	3b15      	subs	r3, #21
 8007f52:	f023 0303 	bic.w	r3, r3, #3
 8007f56:	3304      	adds	r3, #4
 8007f58:	3415      	adds	r4, #21
 8007f5a:	42a6      	cmp	r6, r4
 8007f5c:	bf38      	it	cc
 8007f5e:	2304      	movcc	r3, #4
 8007f60:	441d      	add	r5, r3
 8007f62:	4473      	add	r3, lr
 8007f64:	469e      	mov	lr, r3
 8007f66:	462e      	mov	r6, r5
 8007f68:	4566      	cmp	r6, ip
 8007f6a:	d30e      	bcc.n	8007f8a <__mdiff+0xea>
 8007f6c:	f10c 0203 	add.w	r2, ip, #3
 8007f70:	1b52      	subs	r2, r2, r5
 8007f72:	f022 0203 	bic.w	r2, r2, #3
 8007f76:	3d03      	subs	r5, #3
 8007f78:	45ac      	cmp	ip, r5
 8007f7a:	bf38      	it	cc
 8007f7c:	2200      	movcc	r2, #0
 8007f7e:	4413      	add	r3, r2
 8007f80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007f84:	b17a      	cbz	r2, 8007fa6 <__mdiff+0x106>
 8007f86:	6107      	str	r7, [r0, #16]
 8007f88:	e7a4      	b.n	8007ed4 <__mdiff+0x34>
 8007f8a:	f856 8b04 	ldr.w	r8, [r6], #4
 8007f8e:	fa11 f288 	uxtah	r2, r1, r8
 8007f92:	1414      	asrs	r4, r2, #16
 8007f94:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f98:	b292      	uxth	r2, r2
 8007f9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007f9e:	f84e 2b04 	str.w	r2, [lr], #4
 8007fa2:	1421      	asrs	r1, r4, #16
 8007fa4:	e7e0      	b.n	8007f68 <__mdiff+0xc8>
 8007fa6:	3f01      	subs	r7, #1
 8007fa8:	e7ea      	b.n	8007f80 <__mdiff+0xe0>
 8007faa:	bf00      	nop
 8007fac:	0800b6c1 	.word	0x0800b6c1
 8007fb0:	0800b6d2 	.word	0x0800b6d2

08007fb4 <__ulp>:
 8007fb4:	b082      	sub	sp, #8
 8007fb6:	ed8d 0b00 	vstr	d0, [sp]
 8007fba:	9a01      	ldr	r2, [sp, #4]
 8007fbc:	4b0f      	ldr	r3, [pc, #60]	; (8007ffc <__ulp+0x48>)
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	dc08      	bgt.n	8007fda <__ulp+0x26>
 8007fc8:	425b      	negs	r3, r3
 8007fca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007fce:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007fd2:	da04      	bge.n	8007fde <__ulp+0x2a>
 8007fd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007fd8:	4113      	asrs	r3, r2
 8007fda:	2200      	movs	r2, #0
 8007fdc:	e008      	b.n	8007ff0 <__ulp+0x3c>
 8007fde:	f1a2 0314 	sub.w	r3, r2, #20
 8007fe2:	2b1e      	cmp	r3, #30
 8007fe4:	bfda      	itte	le
 8007fe6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007fea:	40da      	lsrle	r2, r3
 8007fec:	2201      	movgt	r2, #1
 8007fee:	2300      	movs	r3, #0
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	ec41 0b10 	vmov	d0, r0, r1
 8007ff8:	b002      	add	sp, #8
 8007ffa:	4770      	bx	lr
 8007ffc:	7ff00000 	.word	0x7ff00000

08008000 <__b2d>:
 8008000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008004:	6906      	ldr	r6, [r0, #16]
 8008006:	f100 0814 	add.w	r8, r0, #20
 800800a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800800e:	1f37      	subs	r7, r6, #4
 8008010:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008014:	4610      	mov	r0, r2
 8008016:	f7ff fd53 	bl	8007ac0 <__hi0bits>
 800801a:	f1c0 0320 	rsb	r3, r0, #32
 800801e:	280a      	cmp	r0, #10
 8008020:	600b      	str	r3, [r1, #0]
 8008022:	491b      	ldr	r1, [pc, #108]	; (8008090 <__b2d+0x90>)
 8008024:	dc15      	bgt.n	8008052 <__b2d+0x52>
 8008026:	f1c0 0c0b 	rsb	ip, r0, #11
 800802a:	fa22 f30c 	lsr.w	r3, r2, ip
 800802e:	45b8      	cmp	r8, r7
 8008030:	ea43 0501 	orr.w	r5, r3, r1
 8008034:	bf34      	ite	cc
 8008036:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800803a:	2300      	movcs	r3, #0
 800803c:	3015      	adds	r0, #21
 800803e:	fa02 f000 	lsl.w	r0, r2, r0
 8008042:	fa23 f30c 	lsr.w	r3, r3, ip
 8008046:	4303      	orrs	r3, r0
 8008048:	461c      	mov	r4, r3
 800804a:	ec45 4b10 	vmov	d0, r4, r5
 800804e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008052:	45b8      	cmp	r8, r7
 8008054:	bf3a      	itte	cc
 8008056:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800805a:	f1a6 0708 	subcc.w	r7, r6, #8
 800805e:	2300      	movcs	r3, #0
 8008060:	380b      	subs	r0, #11
 8008062:	d012      	beq.n	800808a <__b2d+0x8a>
 8008064:	f1c0 0120 	rsb	r1, r0, #32
 8008068:	fa23 f401 	lsr.w	r4, r3, r1
 800806c:	4082      	lsls	r2, r0
 800806e:	4322      	orrs	r2, r4
 8008070:	4547      	cmp	r7, r8
 8008072:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008076:	bf8c      	ite	hi
 8008078:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800807c:	2200      	movls	r2, #0
 800807e:	4083      	lsls	r3, r0
 8008080:	40ca      	lsrs	r2, r1
 8008082:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008086:	4313      	orrs	r3, r2
 8008088:	e7de      	b.n	8008048 <__b2d+0x48>
 800808a:	ea42 0501 	orr.w	r5, r2, r1
 800808e:	e7db      	b.n	8008048 <__b2d+0x48>
 8008090:	3ff00000 	.word	0x3ff00000

08008094 <__d2b>:
 8008094:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008098:	460f      	mov	r7, r1
 800809a:	2101      	movs	r1, #1
 800809c:	ec59 8b10 	vmov	r8, r9, d0
 80080a0:	4616      	mov	r6, r2
 80080a2:	f7ff fc1b 	bl	80078dc <_Balloc>
 80080a6:	4604      	mov	r4, r0
 80080a8:	b930      	cbnz	r0, 80080b8 <__d2b+0x24>
 80080aa:	4602      	mov	r2, r0
 80080ac:	4b24      	ldr	r3, [pc, #144]	; (8008140 <__d2b+0xac>)
 80080ae:	4825      	ldr	r0, [pc, #148]	; (8008144 <__d2b+0xb0>)
 80080b0:	f240 310f 	movw	r1, #783	; 0x30f
 80080b4:	f001 f988 	bl	80093c8 <__assert_func>
 80080b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80080bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080c0:	bb2d      	cbnz	r5, 800810e <__d2b+0x7a>
 80080c2:	9301      	str	r3, [sp, #4]
 80080c4:	f1b8 0300 	subs.w	r3, r8, #0
 80080c8:	d026      	beq.n	8008118 <__d2b+0x84>
 80080ca:	4668      	mov	r0, sp
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	f7ff fd17 	bl	8007b00 <__lo0bits>
 80080d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080d6:	b1e8      	cbz	r0, 8008114 <__d2b+0x80>
 80080d8:	f1c0 0320 	rsb	r3, r0, #32
 80080dc:	fa02 f303 	lsl.w	r3, r2, r3
 80080e0:	430b      	orrs	r3, r1
 80080e2:	40c2      	lsrs	r2, r0
 80080e4:	6163      	str	r3, [r4, #20]
 80080e6:	9201      	str	r2, [sp, #4]
 80080e8:	9b01      	ldr	r3, [sp, #4]
 80080ea:	61a3      	str	r3, [r4, #24]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	bf14      	ite	ne
 80080f0:	2202      	movne	r2, #2
 80080f2:	2201      	moveq	r2, #1
 80080f4:	6122      	str	r2, [r4, #16]
 80080f6:	b1bd      	cbz	r5, 8008128 <__d2b+0x94>
 80080f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080fc:	4405      	add	r5, r0
 80080fe:	603d      	str	r5, [r7, #0]
 8008100:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008104:	6030      	str	r0, [r6, #0]
 8008106:	4620      	mov	r0, r4
 8008108:	b003      	add	sp, #12
 800810a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800810e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008112:	e7d6      	b.n	80080c2 <__d2b+0x2e>
 8008114:	6161      	str	r1, [r4, #20]
 8008116:	e7e7      	b.n	80080e8 <__d2b+0x54>
 8008118:	a801      	add	r0, sp, #4
 800811a:	f7ff fcf1 	bl	8007b00 <__lo0bits>
 800811e:	9b01      	ldr	r3, [sp, #4]
 8008120:	6163      	str	r3, [r4, #20]
 8008122:	3020      	adds	r0, #32
 8008124:	2201      	movs	r2, #1
 8008126:	e7e5      	b.n	80080f4 <__d2b+0x60>
 8008128:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800812c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008130:	6038      	str	r0, [r7, #0]
 8008132:	6918      	ldr	r0, [r3, #16]
 8008134:	f7ff fcc4 	bl	8007ac0 <__hi0bits>
 8008138:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800813c:	e7e2      	b.n	8008104 <__d2b+0x70>
 800813e:	bf00      	nop
 8008140:	0800b6c1 	.word	0x0800b6c1
 8008144:	0800b6d2 	.word	0x0800b6d2

08008148 <__ratio>:
 8008148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814c:	4688      	mov	r8, r1
 800814e:	4669      	mov	r1, sp
 8008150:	4681      	mov	r9, r0
 8008152:	f7ff ff55 	bl	8008000 <__b2d>
 8008156:	a901      	add	r1, sp, #4
 8008158:	4640      	mov	r0, r8
 800815a:	ec55 4b10 	vmov	r4, r5, d0
 800815e:	f7ff ff4f 	bl	8008000 <__b2d>
 8008162:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008166:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800816a:	eba3 0c02 	sub.w	ip, r3, r2
 800816e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008172:	1a9b      	subs	r3, r3, r2
 8008174:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008178:	ec51 0b10 	vmov	r0, r1, d0
 800817c:	2b00      	cmp	r3, #0
 800817e:	bfd6      	itet	le
 8008180:	460a      	movle	r2, r1
 8008182:	462a      	movgt	r2, r5
 8008184:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008188:	468b      	mov	fp, r1
 800818a:	462f      	mov	r7, r5
 800818c:	bfd4      	ite	le
 800818e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008192:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008196:	4620      	mov	r0, r4
 8008198:	ee10 2a10 	vmov	r2, s0
 800819c:	465b      	mov	r3, fp
 800819e:	4639      	mov	r1, r7
 80081a0:	f7f8 fb5c 	bl	800085c <__aeabi_ddiv>
 80081a4:	ec41 0b10 	vmov	d0, r0, r1
 80081a8:	b003      	add	sp, #12
 80081aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080081ae <__copybits>:
 80081ae:	3901      	subs	r1, #1
 80081b0:	b570      	push	{r4, r5, r6, lr}
 80081b2:	1149      	asrs	r1, r1, #5
 80081b4:	6914      	ldr	r4, [r2, #16]
 80081b6:	3101      	adds	r1, #1
 80081b8:	f102 0314 	add.w	r3, r2, #20
 80081bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80081c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80081c4:	1f05      	subs	r5, r0, #4
 80081c6:	42a3      	cmp	r3, r4
 80081c8:	d30c      	bcc.n	80081e4 <__copybits+0x36>
 80081ca:	1aa3      	subs	r3, r4, r2
 80081cc:	3b11      	subs	r3, #17
 80081ce:	f023 0303 	bic.w	r3, r3, #3
 80081d2:	3211      	adds	r2, #17
 80081d4:	42a2      	cmp	r2, r4
 80081d6:	bf88      	it	hi
 80081d8:	2300      	movhi	r3, #0
 80081da:	4418      	add	r0, r3
 80081dc:	2300      	movs	r3, #0
 80081de:	4288      	cmp	r0, r1
 80081e0:	d305      	bcc.n	80081ee <__copybits+0x40>
 80081e2:	bd70      	pop	{r4, r5, r6, pc}
 80081e4:	f853 6b04 	ldr.w	r6, [r3], #4
 80081e8:	f845 6f04 	str.w	r6, [r5, #4]!
 80081ec:	e7eb      	b.n	80081c6 <__copybits+0x18>
 80081ee:	f840 3b04 	str.w	r3, [r0], #4
 80081f2:	e7f4      	b.n	80081de <__copybits+0x30>

080081f4 <__any_on>:
 80081f4:	f100 0214 	add.w	r2, r0, #20
 80081f8:	6900      	ldr	r0, [r0, #16]
 80081fa:	114b      	asrs	r3, r1, #5
 80081fc:	4298      	cmp	r0, r3
 80081fe:	b510      	push	{r4, lr}
 8008200:	db11      	blt.n	8008226 <__any_on+0x32>
 8008202:	dd0a      	ble.n	800821a <__any_on+0x26>
 8008204:	f011 011f 	ands.w	r1, r1, #31
 8008208:	d007      	beq.n	800821a <__any_on+0x26>
 800820a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800820e:	fa24 f001 	lsr.w	r0, r4, r1
 8008212:	fa00 f101 	lsl.w	r1, r0, r1
 8008216:	428c      	cmp	r4, r1
 8008218:	d10b      	bne.n	8008232 <__any_on+0x3e>
 800821a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800821e:	4293      	cmp	r3, r2
 8008220:	d803      	bhi.n	800822a <__any_on+0x36>
 8008222:	2000      	movs	r0, #0
 8008224:	bd10      	pop	{r4, pc}
 8008226:	4603      	mov	r3, r0
 8008228:	e7f7      	b.n	800821a <__any_on+0x26>
 800822a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800822e:	2900      	cmp	r1, #0
 8008230:	d0f5      	beq.n	800821e <__any_on+0x2a>
 8008232:	2001      	movs	r0, #1
 8008234:	e7f6      	b.n	8008224 <__any_on+0x30>

08008236 <sulp>:
 8008236:	b570      	push	{r4, r5, r6, lr}
 8008238:	4604      	mov	r4, r0
 800823a:	460d      	mov	r5, r1
 800823c:	ec45 4b10 	vmov	d0, r4, r5
 8008240:	4616      	mov	r6, r2
 8008242:	f7ff feb7 	bl	8007fb4 <__ulp>
 8008246:	ec51 0b10 	vmov	r0, r1, d0
 800824a:	b17e      	cbz	r6, 800826c <sulp+0x36>
 800824c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008250:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008254:	2b00      	cmp	r3, #0
 8008256:	dd09      	ble.n	800826c <sulp+0x36>
 8008258:	051b      	lsls	r3, r3, #20
 800825a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800825e:	2400      	movs	r4, #0
 8008260:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008264:	4622      	mov	r2, r4
 8008266:	462b      	mov	r3, r5
 8008268:	f7f8 f9ce 	bl	8000608 <__aeabi_dmul>
 800826c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008270 <_strtod_l>:
 8008270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008274:	ed2d 8b02 	vpush	{d8}
 8008278:	b09b      	sub	sp, #108	; 0x6c
 800827a:	4604      	mov	r4, r0
 800827c:	9213      	str	r2, [sp, #76]	; 0x4c
 800827e:	2200      	movs	r2, #0
 8008280:	9216      	str	r2, [sp, #88]	; 0x58
 8008282:	460d      	mov	r5, r1
 8008284:	f04f 0800 	mov.w	r8, #0
 8008288:	f04f 0900 	mov.w	r9, #0
 800828c:	460a      	mov	r2, r1
 800828e:	9215      	str	r2, [sp, #84]	; 0x54
 8008290:	7811      	ldrb	r1, [r2, #0]
 8008292:	292b      	cmp	r1, #43	; 0x2b
 8008294:	d04c      	beq.n	8008330 <_strtod_l+0xc0>
 8008296:	d83a      	bhi.n	800830e <_strtod_l+0x9e>
 8008298:	290d      	cmp	r1, #13
 800829a:	d834      	bhi.n	8008306 <_strtod_l+0x96>
 800829c:	2908      	cmp	r1, #8
 800829e:	d834      	bhi.n	800830a <_strtod_l+0x9a>
 80082a0:	2900      	cmp	r1, #0
 80082a2:	d03d      	beq.n	8008320 <_strtod_l+0xb0>
 80082a4:	2200      	movs	r2, #0
 80082a6:	920a      	str	r2, [sp, #40]	; 0x28
 80082a8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80082aa:	7832      	ldrb	r2, [r6, #0]
 80082ac:	2a30      	cmp	r2, #48	; 0x30
 80082ae:	f040 80b4 	bne.w	800841a <_strtod_l+0x1aa>
 80082b2:	7872      	ldrb	r2, [r6, #1]
 80082b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80082b8:	2a58      	cmp	r2, #88	; 0x58
 80082ba:	d170      	bne.n	800839e <_strtod_l+0x12e>
 80082bc:	9302      	str	r3, [sp, #8]
 80082be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	ab16      	add	r3, sp, #88	; 0x58
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	4a8e      	ldr	r2, [pc, #568]	; (8008500 <_strtod_l+0x290>)
 80082c8:	ab17      	add	r3, sp, #92	; 0x5c
 80082ca:	a915      	add	r1, sp, #84	; 0x54
 80082cc:	4620      	mov	r0, r4
 80082ce:	f001 f917 	bl	8009500 <__gethex>
 80082d2:	f010 070f 	ands.w	r7, r0, #15
 80082d6:	4605      	mov	r5, r0
 80082d8:	d005      	beq.n	80082e6 <_strtod_l+0x76>
 80082da:	2f06      	cmp	r7, #6
 80082dc:	d12a      	bne.n	8008334 <_strtod_l+0xc4>
 80082de:	3601      	adds	r6, #1
 80082e0:	2300      	movs	r3, #0
 80082e2:	9615      	str	r6, [sp, #84]	; 0x54
 80082e4:	930a      	str	r3, [sp, #40]	; 0x28
 80082e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f040 857f 	bne.w	8008dec <_strtod_l+0xb7c>
 80082ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f0:	b1db      	cbz	r3, 800832a <_strtod_l+0xba>
 80082f2:	4642      	mov	r2, r8
 80082f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80082f8:	ec43 2b10 	vmov	d0, r2, r3
 80082fc:	b01b      	add	sp, #108	; 0x6c
 80082fe:	ecbd 8b02 	vpop	{d8}
 8008302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008306:	2920      	cmp	r1, #32
 8008308:	d1cc      	bne.n	80082a4 <_strtod_l+0x34>
 800830a:	3201      	adds	r2, #1
 800830c:	e7bf      	b.n	800828e <_strtod_l+0x1e>
 800830e:	292d      	cmp	r1, #45	; 0x2d
 8008310:	d1c8      	bne.n	80082a4 <_strtod_l+0x34>
 8008312:	2101      	movs	r1, #1
 8008314:	910a      	str	r1, [sp, #40]	; 0x28
 8008316:	1c51      	adds	r1, r2, #1
 8008318:	9115      	str	r1, [sp, #84]	; 0x54
 800831a:	7852      	ldrb	r2, [r2, #1]
 800831c:	2a00      	cmp	r2, #0
 800831e:	d1c3      	bne.n	80082a8 <_strtod_l+0x38>
 8008320:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008322:	9515      	str	r5, [sp, #84]	; 0x54
 8008324:	2b00      	cmp	r3, #0
 8008326:	f040 855f 	bne.w	8008de8 <_strtod_l+0xb78>
 800832a:	4642      	mov	r2, r8
 800832c:	464b      	mov	r3, r9
 800832e:	e7e3      	b.n	80082f8 <_strtod_l+0x88>
 8008330:	2100      	movs	r1, #0
 8008332:	e7ef      	b.n	8008314 <_strtod_l+0xa4>
 8008334:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008336:	b13a      	cbz	r2, 8008348 <_strtod_l+0xd8>
 8008338:	2135      	movs	r1, #53	; 0x35
 800833a:	a818      	add	r0, sp, #96	; 0x60
 800833c:	f7ff ff37 	bl	80081ae <__copybits>
 8008340:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008342:	4620      	mov	r0, r4
 8008344:	f7ff fb0a 	bl	800795c <_Bfree>
 8008348:	3f01      	subs	r7, #1
 800834a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800834c:	2f04      	cmp	r7, #4
 800834e:	d806      	bhi.n	800835e <_strtod_l+0xee>
 8008350:	e8df f007 	tbb	[pc, r7]
 8008354:	201d0314 	.word	0x201d0314
 8008358:	14          	.byte	0x14
 8008359:	00          	.byte	0x00
 800835a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800835e:	05e9      	lsls	r1, r5, #23
 8008360:	bf48      	it	mi
 8008362:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008366:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800836a:	0d1b      	lsrs	r3, r3, #20
 800836c:	051b      	lsls	r3, r3, #20
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1b9      	bne.n	80082e6 <_strtod_l+0x76>
 8008372:	f7fe faf7 	bl	8006964 <__errno>
 8008376:	2322      	movs	r3, #34	; 0x22
 8008378:	6003      	str	r3, [r0, #0]
 800837a:	e7b4      	b.n	80082e6 <_strtod_l+0x76>
 800837c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008380:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008384:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008388:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800838c:	e7e7      	b.n	800835e <_strtod_l+0xee>
 800838e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008508 <_strtod_l+0x298>
 8008392:	e7e4      	b.n	800835e <_strtod_l+0xee>
 8008394:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008398:	f04f 38ff 	mov.w	r8, #4294967295
 800839c:	e7df      	b.n	800835e <_strtod_l+0xee>
 800839e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083a0:	1c5a      	adds	r2, r3, #1
 80083a2:	9215      	str	r2, [sp, #84]	; 0x54
 80083a4:	785b      	ldrb	r3, [r3, #1]
 80083a6:	2b30      	cmp	r3, #48	; 0x30
 80083a8:	d0f9      	beq.n	800839e <_strtod_l+0x12e>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d09b      	beq.n	80082e6 <_strtod_l+0x76>
 80083ae:	2301      	movs	r3, #1
 80083b0:	f04f 0a00 	mov.w	sl, #0
 80083b4:	9304      	str	r3, [sp, #16]
 80083b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80083ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80083be:	46d3      	mov	fp, sl
 80083c0:	220a      	movs	r2, #10
 80083c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80083c4:	7806      	ldrb	r6, [r0, #0]
 80083c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80083ca:	b2d9      	uxtb	r1, r3
 80083cc:	2909      	cmp	r1, #9
 80083ce:	d926      	bls.n	800841e <_strtod_l+0x1ae>
 80083d0:	494c      	ldr	r1, [pc, #304]	; (8008504 <_strtod_l+0x294>)
 80083d2:	2201      	movs	r2, #1
 80083d4:	f000 ffcc 	bl	8009370 <strncmp>
 80083d8:	2800      	cmp	r0, #0
 80083da:	d030      	beq.n	800843e <_strtod_l+0x1ce>
 80083dc:	2000      	movs	r0, #0
 80083de:	4632      	mov	r2, r6
 80083e0:	9005      	str	r0, [sp, #20]
 80083e2:	465e      	mov	r6, fp
 80083e4:	4603      	mov	r3, r0
 80083e6:	2a65      	cmp	r2, #101	; 0x65
 80083e8:	d001      	beq.n	80083ee <_strtod_l+0x17e>
 80083ea:	2a45      	cmp	r2, #69	; 0x45
 80083ec:	d113      	bne.n	8008416 <_strtod_l+0x1a6>
 80083ee:	b91e      	cbnz	r6, 80083f8 <_strtod_l+0x188>
 80083f0:	9a04      	ldr	r2, [sp, #16]
 80083f2:	4302      	orrs	r2, r0
 80083f4:	d094      	beq.n	8008320 <_strtod_l+0xb0>
 80083f6:	2600      	movs	r6, #0
 80083f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80083fa:	1c6a      	adds	r2, r5, #1
 80083fc:	9215      	str	r2, [sp, #84]	; 0x54
 80083fe:	786a      	ldrb	r2, [r5, #1]
 8008400:	2a2b      	cmp	r2, #43	; 0x2b
 8008402:	d074      	beq.n	80084ee <_strtod_l+0x27e>
 8008404:	2a2d      	cmp	r2, #45	; 0x2d
 8008406:	d078      	beq.n	80084fa <_strtod_l+0x28a>
 8008408:	f04f 0c00 	mov.w	ip, #0
 800840c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008410:	2909      	cmp	r1, #9
 8008412:	d97f      	bls.n	8008514 <_strtod_l+0x2a4>
 8008414:	9515      	str	r5, [sp, #84]	; 0x54
 8008416:	2700      	movs	r7, #0
 8008418:	e09e      	b.n	8008558 <_strtod_l+0x2e8>
 800841a:	2300      	movs	r3, #0
 800841c:	e7c8      	b.n	80083b0 <_strtod_l+0x140>
 800841e:	f1bb 0f08 	cmp.w	fp, #8
 8008422:	bfd8      	it	le
 8008424:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008426:	f100 0001 	add.w	r0, r0, #1
 800842a:	bfda      	itte	le
 800842c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008430:	9309      	strle	r3, [sp, #36]	; 0x24
 8008432:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008436:	f10b 0b01 	add.w	fp, fp, #1
 800843a:	9015      	str	r0, [sp, #84]	; 0x54
 800843c:	e7c1      	b.n	80083c2 <_strtod_l+0x152>
 800843e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	9215      	str	r2, [sp, #84]	; 0x54
 8008444:	785a      	ldrb	r2, [r3, #1]
 8008446:	f1bb 0f00 	cmp.w	fp, #0
 800844a:	d037      	beq.n	80084bc <_strtod_l+0x24c>
 800844c:	9005      	str	r0, [sp, #20]
 800844e:	465e      	mov	r6, fp
 8008450:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008454:	2b09      	cmp	r3, #9
 8008456:	d912      	bls.n	800847e <_strtod_l+0x20e>
 8008458:	2301      	movs	r3, #1
 800845a:	e7c4      	b.n	80083e6 <_strtod_l+0x176>
 800845c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800845e:	1c5a      	adds	r2, r3, #1
 8008460:	9215      	str	r2, [sp, #84]	; 0x54
 8008462:	785a      	ldrb	r2, [r3, #1]
 8008464:	3001      	adds	r0, #1
 8008466:	2a30      	cmp	r2, #48	; 0x30
 8008468:	d0f8      	beq.n	800845c <_strtod_l+0x1ec>
 800846a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800846e:	2b08      	cmp	r3, #8
 8008470:	f200 84c1 	bhi.w	8008df6 <_strtod_l+0xb86>
 8008474:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008476:	9005      	str	r0, [sp, #20]
 8008478:	2000      	movs	r0, #0
 800847a:	930b      	str	r3, [sp, #44]	; 0x2c
 800847c:	4606      	mov	r6, r0
 800847e:	3a30      	subs	r2, #48	; 0x30
 8008480:	f100 0301 	add.w	r3, r0, #1
 8008484:	d014      	beq.n	80084b0 <_strtod_l+0x240>
 8008486:	9905      	ldr	r1, [sp, #20]
 8008488:	4419      	add	r1, r3
 800848a:	9105      	str	r1, [sp, #20]
 800848c:	4633      	mov	r3, r6
 800848e:	eb00 0c06 	add.w	ip, r0, r6
 8008492:	210a      	movs	r1, #10
 8008494:	4563      	cmp	r3, ip
 8008496:	d113      	bne.n	80084c0 <_strtod_l+0x250>
 8008498:	1833      	adds	r3, r6, r0
 800849a:	2b08      	cmp	r3, #8
 800849c:	f106 0601 	add.w	r6, r6, #1
 80084a0:	4406      	add	r6, r0
 80084a2:	dc1a      	bgt.n	80084da <_strtod_l+0x26a>
 80084a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084a6:	230a      	movs	r3, #10
 80084a8:	fb03 2301 	mla	r3, r3, r1, r2
 80084ac:	9309      	str	r3, [sp, #36]	; 0x24
 80084ae:	2300      	movs	r3, #0
 80084b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084b2:	1c51      	adds	r1, r2, #1
 80084b4:	9115      	str	r1, [sp, #84]	; 0x54
 80084b6:	7852      	ldrb	r2, [r2, #1]
 80084b8:	4618      	mov	r0, r3
 80084ba:	e7c9      	b.n	8008450 <_strtod_l+0x1e0>
 80084bc:	4658      	mov	r0, fp
 80084be:	e7d2      	b.n	8008466 <_strtod_l+0x1f6>
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	f103 0301 	add.w	r3, r3, #1
 80084c6:	dc03      	bgt.n	80084d0 <_strtod_l+0x260>
 80084c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80084ca:	434f      	muls	r7, r1
 80084cc:	9709      	str	r7, [sp, #36]	; 0x24
 80084ce:	e7e1      	b.n	8008494 <_strtod_l+0x224>
 80084d0:	2b10      	cmp	r3, #16
 80084d2:	bfd8      	it	le
 80084d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80084d8:	e7dc      	b.n	8008494 <_strtod_l+0x224>
 80084da:	2e10      	cmp	r6, #16
 80084dc:	bfdc      	itt	le
 80084de:	230a      	movle	r3, #10
 80084e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80084e4:	e7e3      	b.n	80084ae <_strtod_l+0x23e>
 80084e6:	2300      	movs	r3, #0
 80084e8:	9305      	str	r3, [sp, #20]
 80084ea:	2301      	movs	r3, #1
 80084ec:	e780      	b.n	80083f0 <_strtod_l+0x180>
 80084ee:	f04f 0c00 	mov.w	ip, #0
 80084f2:	1caa      	adds	r2, r5, #2
 80084f4:	9215      	str	r2, [sp, #84]	; 0x54
 80084f6:	78aa      	ldrb	r2, [r5, #2]
 80084f8:	e788      	b.n	800840c <_strtod_l+0x19c>
 80084fa:	f04f 0c01 	mov.w	ip, #1
 80084fe:	e7f8      	b.n	80084f2 <_strtod_l+0x282>
 8008500:	0800b830 	.word	0x0800b830
 8008504:	0800b82c 	.word	0x0800b82c
 8008508:	7ff00000 	.word	0x7ff00000
 800850c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800850e:	1c51      	adds	r1, r2, #1
 8008510:	9115      	str	r1, [sp, #84]	; 0x54
 8008512:	7852      	ldrb	r2, [r2, #1]
 8008514:	2a30      	cmp	r2, #48	; 0x30
 8008516:	d0f9      	beq.n	800850c <_strtod_l+0x29c>
 8008518:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800851c:	2908      	cmp	r1, #8
 800851e:	f63f af7a 	bhi.w	8008416 <_strtod_l+0x1a6>
 8008522:	3a30      	subs	r2, #48	; 0x30
 8008524:	9208      	str	r2, [sp, #32]
 8008526:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008528:	920c      	str	r2, [sp, #48]	; 0x30
 800852a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800852c:	1c57      	adds	r7, r2, #1
 800852e:	9715      	str	r7, [sp, #84]	; 0x54
 8008530:	7852      	ldrb	r2, [r2, #1]
 8008532:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008536:	f1be 0f09 	cmp.w	lr, #9
 800853a:	d938      	bls.n	80085ae <_strtod_l+0x33e>
 800853c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800853e:	1a7f      	subs	r7, r7, r1
 8008540:	2f08      	cmp	r7, #8
 8008542:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008546:	dc03      	bgt.n	8008550 <_strtod_l+0x2e0>
 8008548:	9908      	ldr	r1, [sp, #32]
 800854a:	428f      	cmp	r7, r1
 800854c:	bfa8      	it	ge
 800854e:	460f      	movge	r7, r1
 8008550:	f1bc 0f00 	cmp.w	ip, #0
 8008554:	d000      	beq.n	8008558 <_strtod_l+0x2e8>
 8008556:	427f      	negs	r7, r7
 8008558:	2e00      	cmp	r6, #0
 800855a:	d14f      	bne.n	80085fc <_strtod_l+0x38c>
 800855c:	9904      	ldr	r1, [sp, #16]
 800855e:	4301      	orrs	r1, r0
 8008560:	f47f aec1 	bne.w	80082e6 <_strtod_l+0x76>
 8008564:	2b00      	cmp	r3, #0
 8008566:	f47f aedb 	bne.w	8008320 <_strtod_l+0xb0>
 800856a:	2a69      	cmp	r2, #105	; 0x69
 800856c:	d029      	beq.n	80085c2 <_strtod_l+0x352>
 800856e:	dc26      	bgt.n	80085be <_strtod_l+0x34e>
 8008570:	2a49      	cmp	r2, #73	; 0x49
 8008572:	d026      	beq.n	80085c2 <_strtod_l+0x352>
 8008574:	2a4e      	cmp	r2, #78	; 0x4e
 8008576:	f47f aed3 	bne.w	8008320 <_strtod_l+0xb0>
 800857a:	499b      	ldr	r1, [pc, #620]	; (80087e8 <_strtod_l+0x578>)
 800857c:	a815      	add	r0, sp, #84	; 0x54
 800857e:	f001 f9ff 	bl	8009980 <__match>
 8008582:	2800      	cmp	r0, #0
 8008584:	f43f aecc 	beq.w	8008320 <_strtod_l+0xb0>
 8008588:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	2b28      	cmp	r3, #40	; 0x28
 800858e:	d12f      	bne.n	80085f0 <_strtod_l+0x380>
 8008590:	4996      	ldr	r1, [pc, #600]	; (80087ec <_strtod_l+0x57c>)
 8008592:	aa18      	add	r2, sp, #96	; 0x60
 8008594:	a815      	add	r0, sp, #84	; 0x54
 8008596:	f001 fa07 	bl	80099a8 <__hexnan>
 800859a:	2805      	cmp	r0, #5
 800859c:	d128      	bne.n	80085f0 <_strtod_l+0x380>
 800859e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80085a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80085a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80085ac:	e69b      	b.n	80082e6 <_strtod_l+0x76>
 80085ae:	9f08      	ldr	r7, [sp, #32]
 80085b0:	210a      	movs	r1, #10
 80085b2:	fb01 2107 	mla	r1, r1, r7, r2
 80085b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80085ba:	9208      	str	r2, [sp, #32]
 80085bc:	e7b5      	b.n	800852a <_strtod_l+0x2ba>
 80085be:	2a6e      	cmp	r2, #110	; 0x6e
 80085c0:	e7d9      	b.n	8008576 <_strtod_l+0x306>
 80085c2:	498b      	ldr	r1, [pc, #556]	; (80087f0 <_strtod_l+0x580>)
 80085c4:	a815      	add	r0, sp, #84	; 0x54
 80085c6:	f001 f9db 	bl	8009980 <__match>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	f43f aea8 	beq.w	8008320 <_strtod_l+0xb0>
 80085d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085d2:	4988      	ldr	r1, [pc, #544]	; (80087f4 <_strtod_l+0x584>)
 80085d4:	3b01      	subs	r3, #1
 80085d6:	a815      	add	r0, sp, #84	; 0x54
 80085d8:	9315      	str	r3, [sp, #84]	; 0x54
 80085da:	f001 f9d1 	bl	8009980 <__match>
 80085de:	b910      	cbnz	r0, 80085e6 <_strtod_l+0x376>
 80085e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085e2:	3301      	adds	r3, #1
 80085e4:	9315      	str	r3, [sp, #84]	; 0x54
 80085e6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8008804 <_strtod_l+0x594>
 80085ea:	f04f 0800 	mov.w	r8, #0
 80085ee:	e67a      	b.n	80082e6 <_strtod_l+0x76>
 80085f0:	4881      	ldr	r0, [pc, #516]	; (80087f8 <_strtod_l+0x588>)
 80085f2:	f000 fee1 	bl	80093b8 <nan>
 80085f6:	ec59 8b10 	vmov	r8, r9, d0
 80085fa:	e674      	b.n	80082e6 <_strtod_l+0x76>
 80085fc:	9b05      	ldr	r3, [sp, #20]
 80085fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008600:	1afb      	subs	r3, r7, r3
 8008602:	f1bb 0f00 	cmp.w	fp, #0
 8008606:	bf08      	it	eq
 8008608:	46b3      	moveq	fp, r6
 800860a:	2e10      	cmp	r6, #16
 800860c:	9308      	str	r3, [sp, #32]
 800860e:	4635      	mov	r5, r6
 8008610:	bfa8      	it	ge
 8008612:	2510      	movge	r5, #16
 8008614:	f7f7 ff7e 	bl	8000514 <__aeabi_ui2d>
 8008618:	2e09      	cmp	r6, #9
 800861a:	4680      	mov	r8, r0
 800861c:	4689      	mov	r9, r1
 800861e:	dd13      	ble.n	8008648 <_strtod_l+0x3d8>
 8008620:	4b76      	ldr	r3, [pc, #472]	; (80087fc <_strtod_l+0x58c>)
 8008622:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008626:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800862a:	f7f7 ffed 	bl	8000608 <__aeabi_dmul>
 800862e:	4680      	mov	r8, r0
 8008630:	4650      	mov	r0, sl
 8008632:	4689      	mov	r9, r1
 8008634:	f7f7 ff6e 	bl	8000514 <__aeabi_ui2d>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4640      	mov	r0, r8
 800863e:	4649      	mov	r1, r9
 8008640:	f7f7 fe2c 	bl	800029c <__adddf3>
 8008644:	4680      	mov	r8, r0
 8008646:	4689      	mov	r9, r1
 8008648:	2e0f      	cmp	r6, #15
 800864a:	dc38      	bgt.n	80086be <_strtod_l+0x44e>
 800864c:	9b08      	ldr	r3, [sp, #32]
 800864e:	2b00      	cmp	r3, #0
 8008650:	f43f ae49 	beq.w	80082e6 <_strtod_l+0x76>
 8008654:	dd24      	ble.n	80086a0 <_strtod_l+0x430>
 8008656:	2b16      	cmp	r3, #22
 8008658:	dc0b      	bgt.n	8008672 <_strtod_l+0x402>
 800865a:	4968      	ldr	r1, [pc, #416]	; (80087fc <_strtod_l+0x58c>)
 800865c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008660:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008664:	4642      	mov	r2, r8
 8008666:	464b      	mov	r3, r9
 8008668:	f7f7 ffce 	bl	8000608 <__aeabi_dmul>
 800866c:	4680      	mov	r8, r0
 800866e:	4689      	mov	r9, r1
 8008670:	e639      	b.n	80082e6 <_strtod_l+0x76>
 8008672:	9a08      	ldr	r2, [sp, #32]
 8008674:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008678:	4293      	cmp	r3, r2
 800867a:	db20      	blt.n	80086be <_strtod_l+0x44e>
 800867c:	4c5f      	ldr	r4, [pc, #380]	; (80087fc <_strtod_l+0x58c>)
 800867e:	f1c6 060f 	rsb	r6, r6, #15
 8008682:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008686:	4642      	mov	r2, r8
 8008688:	464b      	mov	r3, r9
 800868a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800868e:	f7f7 ffbb 	bl	8000608 <__aeabi_dmul>
 8008692:	9b08      	ldr	r3, [sp, #32]
 8008694:	1b9e      	subs	r6, r3, r6
 8008696:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800869a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800869e:	e7e3      	b.n	8008668 <_strtod_l+0x3f8>
 80086a0:	9b08      	ldr	r3, [sp, #32]
 80086a2:	3316      	adds	r3, #22
 80086a4:	db0b      	blt.n	80086be <_strtod_l+0x44e>
 80086a6:	9b05      	ldr	r3, [sp, #20]
 80086a8:	1bdf      	subs	r7, r3, r7
 80086aa:	4b54      	ldr	r3, [pc, #336]	; (80087fc <_strtod_l+0x58c>)
 80086ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80086b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086b4:	4640      	mov	r0, r8
 80086b6:	4649      	mov	r1, r9
 80086b8:	f7f8 f8d0 	bl	800085c <__aeabi_ddiv>
 80086bc:	e7d6      	b.n	800866c <_strtod_l+0x3fc>
 80086be:	9b08      	ldr	r3, [sp, #32]
 80086c0:	1b75      	subs	r5, r6, r5
 80086c2:	441d      	add	r5, r3
 80086c4:	2d00      	cmp	r5, #0
 80086c6:	dd70      	ble.n	80087aa <_strtod_l+0x53a>
 80086c8:	f015 030f 	ands.w	r3, r5, #15
 80086cc:	d00a      	beq.n	80086e4 <_strtod_l+0x474>
 80086ce:	494b      	ldr	r1, [pc, #300]	; (80087fc <_strtod_l+0x58c>)
 80086d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086d4:	4642      	mov	r2, r8
 80086d6:	464b      	mov	r3, r9
 80086d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086dc:	f7f7 ff94 	bl	8000608 <__aeabi_dmul>
 80086e0:	4680      	mov	r8, r0
 80086e2:	4689      	mov	r9, r1
 80086e4:	f035 050f 	bics.w	r5, r5, #15
 80086e8:	d04d      	beq.n	8008786 <_strtod_l+0x516>
 80086ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80086ee:	dd22      	ble.n	8008736 <_strtod_l+0x4c6>
 80086f0:	2500      	movs	r5, #0
 80086f2:	46ab      	mov	fp, r5
 80086f4:	9509      	str	r5, [sp, #36]	; 0x24
 80086f6:	9505      	str	r5, [sp, #20]
 80086f8:	2322      	movs	r3, #34	; 0x22
 80086fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008804 <_strtod_l+0x594>
 80086fe:	6023      	str	r3, [r4, #0]
 8008700:	f04f 0800 	mov.w	r8, #0
 8008704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008706:	2b00      	cmp	r3, #0
 8008708:	f43f aded 	beq.w	80082e6 <_strtod_l+0x76>
 800870c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800870e:	4620      	mov	r0, r4
 8008710:	f7ff f924 	bl	800795c <_Bfree>
 8008714:	9905      	ldr	r1, [sp, #20]
 8008716:	4620      	mov	r0, r4
 8008718:	f7ff f920 	bl	800795c <_Bfree>
 800871c:	4659      	mov	r1, fp
 800871e:	4620      	mov	r0, r4
 8008720:	f7ff f91c 	bl	800795c <_Bfree>
 8008724:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008726:	4620      	mov	r0, r4
 8008728:	f7ff f918 	bl	800795c <_Bfree>
 800872c:	4629      	mov	r1, r5
 800872e:	4620      	mov	r0, r4
 8008730:	f7ff f914 	bl	800795c <_Bfree>
 8008734:	e5d7      	b.n	80082e6 <_strtod_l+0x76>
 8008736:	4b32      	ldr	r3, [pc, #200]	; (8008800 <_strtod_l+0x590>)
 8008738:	9304      	str	r3, [sp, #16]
 800873a:	2300      	movs	r3, #0
 800873c:	112d      	asrs	r5, r5, #4
 800873e:	4640      	mov	r0, r8
 8008740:	4649      	mov	r1, r9
 8008742:	469a      	mov	sl, r3
 8008744:	2d01      	cmp	r5, #1
 8008746:	dc21      	bgt.n	800878c <_strtod_l+0x51c>
 8008748:	b10b      	cbz	r3, 800874e <_strtod_l+0x4de>
 800874a:	4680      	mov	r8, r0
 800874c:	4689      	mov	r9, r1
 800874e:	492c      	ldr	r1, [pc, #176]	; (8008800 <_strtod_l+0x590>)
 8008750:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008754:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008758:	4642      	mov	r2, r8
 800875a:	464b      	mov	r3, r9
 800875c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008760:	f7f7 ff52 	bl	8000608 <__aeabi_dmul>
 8008764:	4b27      	ldr	r3, [pc, #156]	; (8008804 <_strtod_l+0x594>)
 8008766:	460a      	mov	r2, r1
 8008768:	400b      	ands	r3, r1
 800876a:	4927      	ldr	r1, [pc, #156]	; (8008808 <_strtod_l+0x598>)
 800876c:	428b      	cmp	r3, r1
 800876e:	4680      	mov	r8, r0
 8008770:	d8be      	bhi.n	80086f0 <_strtod_l+0x480>
 8008772:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008776:	428b      	cmp	r3, r1
 8008778:	bf86      	itte	hi
 800877a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800880c <_strtod_l+0x59c>
 800877e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008782:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008786:	2300      	movs	r3, #0
 8008788:	9304      	str	r3, [sp, #16]
 800878a:	e07b      	b.n	8008884 <_strtod_l+0x614>
 800878c:	07ea      	lsls	r2, r5, #31
 800878e:	d505      	bpl.n	800879c <_strtod_l+0x52c>
 8008790:	9b04      	ldr	r3, [sp, #16]
 8008792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008796:	f7f7 ff37 	bl	8000608 <__aeabi_dmul>
 800879a:	2301      	movs	r3, #1
 800879c:	9a04      	ldr	r2, [sp, #16]
 800879e:	3208      	adds	r2, #8
 80087a0:	f10a 0a01 	add.w	sl, sl, #1
 80087a4:	106d      	asrs	r5, r5, #1
 80087a6:	9204      	str	r2, [sp, #16]
 80087a8:	e7cc      	b.n	8008744 <_strtod_l+0x4d4>
 80087aa:	d0ec      	beq.n	8008786 <_strtod_l+0x516>
 80087ac:	426d      	negs	r5, r5
 80087ae:	f015 020f 	ands.w	r2, r5, #15
 80087b2:	d00a      	beq.n	80087ca <_strtod_l+0x55a>
 80087b4:	4b11      	ldr	r3, [pc, #68]	; (80087fc <_strtod_l+0x58c>)
 80087b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087ba:	4640      	mov	r0, r8
 80087bc:	4649      	mov	r1, r9
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	f7f8 f84b 	bl	800085c <__aeabi_ddiv>
 80087c6:	4680      	mov	r8, r0
 80087c8:	4689      	mov	r9, r1
 80087ca:	112d      	asrs	r5, r5, #4
 80087cc:	d0db      	beq.n	8008786 <_strtod_l+0x516>
 80087ce:	2d1f      	cmp	r5, #31
 80087d0:	dd1e      	ble.n	8008810 <_strtod_l+0x5a0>
 80087d2:	2500      	movs	r5, #0
 80087d4:	46ab      	mov	fp, r5
 80087d6:	9509      	str	r5, [sp, #36]	; 0x24
 80087d8:	9505      	str	r5, [sp, #20]
 80087da:	2322      	movs	r3, #34	; 0x22
 80087dc:	f04f 0800 	mov.w	r8, #0
 80087e0:	f04f 0900 	mov.w	r9, #0
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	e78d      	b.n	8008704 <_strtod_l+0x494>
 80087e8:	0800b619 	.word	0x0800b619
 80087ec:	0800b844 	.word	0x0800b844
 80087f0:	0800b611 	.word	0x0800b611
 80087f4:	0800b648 	.word	0x0800b648
 80087f8:	0800b9d5 	.word	0x0800b9d5
 80087fc:	0800b758 	.word	0x0800b758
 8008800:	0800b730 	.word	0x0800b730
 8008804:	7ff00000 	.word	0x7ff00000
 8008808:	7ca00000 	.word	0x7ca00000
 800880c:	7fefffff 	.word	0x7fefffff
 8008810:	f015 0310 	ands.w	r3, r5, #16
 8008814:	bf18      	it	ne
 8008816:	236a      	movne	r3, #106	; 0x6a
 8008818:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008bbc <_strtod_l+0x94c>
 800881c:	9304      	str	r3, [sp, #16]
 800881e:	4640      	mov	r0, r8
 8008820:	4649      	mov	r1, r9
 8008822:	2300      	movs	r3, #0
 8008824:	07ea      	lsls	r2, r5, #31
 8008826:	d504      	bpl.n	8008832 <_strtod_l+0x5c2>
 8008828:	e9da 2300 	ldrd	r2, r3, [sl]
 800882c:	f7f7 feec 	bl	8000608 <__aeabi_dmul>
 8008830:	2301      	movs	r3, #1
 8008832:	106d      	asrs	r5, r5, #1
 8008834:	f10a 0a08 	add.w	sl, sl, #8
 8008838:	d1f4      	bne.n	8008824 <_strtod_l+0x5b4>
 800883a:	b10b      	cbz	r3, 8008840 <_strtod_l+0x5d0>
 800883c:	4680      	mov	r8, r0
 800883e:	4689      	mov	r9, r1
 8008840:	9b04      	ldr	r3, [sp, #16]
 8008842:	b1bb      	cbz	r3, 8008874 <_strtod_l+0x604>
 8008844:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008848:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800884c:	2b00      	cmp	r3, #0
 800884e:	4649      	mov	r1, r9
 8008850:	dd10      	ble.n	8008874 <_strtod_l+0x604>
 8008852:	2b1f      	cmp	r3, #31
 8008854:	f340 811e 	ble.w	8008a94 <_strtod_l+0x824>
 8008858:	2b34      	cmp	r3, #52	; 0x34
 800885a:	bfde      	ittt	le
 800885c:	f04f 33ff 	movle.w	r3, #4294967295
 8008860:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008864:	4093      	lslle	r3, r2
 8008866:	f04f 0800 	mov.w	r8, #0
 800886a:	bfcc      	ite	gt
 800886c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008870:	ea03 0901 	andle.w	r9, r3, r1
 8008874:	2200      	movs	r2, #0
 8008876:	2300      	movs	r3, #0
 8008878:	4640      	mov	r0, r8
 800887a:	4649      	mov	r1, r9
 800887c:	f7f8 f92c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008880:	2800      	cmp	r0, #0
 8008882:	d1a6      	bne.n	80087d2 <_strtod_l+0x562>
 8008884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800888a:	4633      	mov	r3, r6
 800888c:	465a      	mov	r2, fp
 800888e:	4620      	mov	r0, r4
 8008890:	f7ff f8cc 	bl	8007a2c <__s2b>
 8008894:	9009      	str	r0, [sp, #36]	; 0x24
 8008896:	2800      	cmp	r0, #0
 8008898:	f43f af2a 	beq.w	80086f0 <_strtod_l+0x480>
 800889c:	9a08      	ldr	r2, [sp, #32]
 800889e:	9b05      	ldr	r3, [sp, #20]
 80088a0:	2a00      	cmp	r2, #0
 80088a2:	eba3 0307 	sub.w	r3, r3, r7
 80088a6:	bfa8      	it	ge
 80088a8:	2300      	movge	r3, #0
 80088aa:	930c      	str	r3, [sp, #48]	; 0x30
 80088ac:	2500      	movs	r5, #0
 80088ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80088b2:	9312      	str	r3, [sp, #72]	; 0x48
 80088b4:	46ab      	mov	fp, r5
 80088b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b8:	4620      	mov	r0, r4
 80088ba:	6859      	ldr	r1, [r3, #4]
 80088bc:	f7ff f80e 	bl	80078dc <_Balloc>
 80088c0:	9005      	str	r0, [sp, #20]
 80088c2:	2800      	cmp	r0, #0
 80088c4:	f43f af18 	beq.w	80086f8 <_strtod_l+0x488>
 80088c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ca:	691a      	ldr	r2, [r3, #16]
 80088cc:	3202      	adds	r2, #2
 80088ce:	f103 010c 	add.w	r1, r3, #12
 80088d2:	0092      	lsls	r2, r2, #2
 80088d4:	300c      	adds	r0, #12
 80088d6:	f7fe f872 	bl	80069be <memcpy>
 80088da:	ec49 8b10 	vmov	d0, r8, r9
 80088de:	aa18      	add	r2, sp, #96	; 0x60
 80088e0:	a917      	add	r1, sp, #92	; 0x5c
 80088e2:	4620      	mov	r0, r4
 80088e4:	f7ff fbd6 	bl	8008094 <__d2b>
 80088e8:	ec49 8b18 	vmov	d8, r8, r9
 80088ec:	9016      	str	r0, [sp, #88]	; 0x58
 80088ee:	2800      	cmp	r0, #0
 80088f0:	f43f af02 	beq.w	80086f8 <_strtod_l+0x488>
 80088f4:	2101      	movs	r1, #1
 80088f6:	4620      	mov	r0, r4
 80088f8:	f7ff f930 	bl	8007b5c <__i2b>
 80088fc:	4683      	mov	fp, r0
 80088fe:	2800      	cmp	r0, #0
 8008900:	f43f aefa 	beq.w	80086f8 <_strtod_l+0x488>
 8008904:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008906:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008908:	2e00      	cmp	r6, #0
 800890a:	bfab      	itete	ge
 800890c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800890e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008910:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008912:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008916:	bfac      	ite	ge
 8008918:	eb06 0a03 	addge.w	sl, r6, r3
 800891c:	1b9f      	sublt	r7, r3, r6
 800891e:	9b04      	ldr	r3, [sp, #16]
 8008920:	1af6      	subs	r6, r6, r3
 8008922:	4416      	add	r6, r2
 8008924:	4ba0      	ldr	r3, [pc, #640]	; (8008ba8 <_strtod_l+0x938>)
 8008926:	3e01      	subs	r6, #1
 8008928:	429e      	cmp	r6, r3
 800892a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800892e:	f280 80c4 	bge.w	8008aba <_strtod_l+0x84a>
 8008932:	1b9b      	subs	r3, r3, r6
 8008934:	2b1f      	cmp	r3, #31
 8008936:	eba2 0203 	sub.w	r2, r2, r3
 800893a:	f04f 0101 	mov.w	r1, #1
 800893e:	f300 80b0 	bgt.w	8008aa2 <_strtod_l+0x832>
 8008942:	fa01 f303 	lsl.w	r3, r1, r3
 8008946:	930e      	str	r3, [sp, #56]	; 0x38
 8008948:	2300      	movs	r3, #0
 800894a:	930d      	str	r3, [sp, #52]	; 0x34
 800894c:	eb0a 0602 	add.w	r6, sl, r2
 8008950:	9b04      	ldr	r3, [sp, #16]
 8008952:	45b2      	cmp	sl, r6
 8008954:	4417      	add	r7, r2
 8008956:	441f      	add	r7, r3
 8008958:	4653      	mov	r3, sl
 800895a:	bfa8      	it	ge
 800895c:	4633      	movge	r3, r6
 800895e:	42bb      	cmp	r3, r7
 8008960:	bfa8      	it	ge
 8008962:	463b      	movge	r3, r7
 8008964:	2b00      	cmp	r3, #0
 8008966:	bfc2      	ittt	gt
 8008968:	1af6      	subgt	r6, r6, r3
 800896a:	1aff      	subgt	r7, r7, r3
 800896c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008970:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008972:	2b00      	cmp	r3, #0
 8008974:	dd17      	ble.n	80089a6 <_strtod_l+0x736>
 8008976:	4659      	mov	r1, fp
 8008978:	461a      	mov	r2, r3
 800897a:	4620      	mov	r0, r4
 800897c:	f7ff f9ae 	bl	8007cdc <__pow5mult>
 8008980:	4683      	mov	fp, r0
 8008982:	2800      	cmp	r0, #0
 8008984:	f43f aeb8 	beq.w	80086f8 <_strtod_l+0x488>
 8008988:	4601      	mov	r1, r0
 800898a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800898c:	4620      	mov	r0, r4
 800898e:	f7ff f8fb 	bl	8007b88 <__multiply>
 8008992:	900b      	str	r0, [sp, #44]	; 0x2c
 8008994:	2800      	cmp	r0, #0
 8008996:	f43f aeaf 	beq.w	80086f8 <_strtod_l+0x488>
 800899a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800899c:	4620      	mov	r0, r4
 800899e:	f7fe ffdd 	bl	800795c <_Bfree>
 80089a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089a4:	9316      	str	r3, [sp, #88]	; 0x58
 80089a6:	2e00      	cmp	r6, #0
 80089a8:	f300 808c 	bgt.w	8008ac4 <_strtod_l+0x854>
 80089ac:	9b08      	ldr	r3, [sp, #32]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	dd08      	ble.n	80089c4 <_strtod_l+0x754>
 80089b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089b4:	9905      	ldr	r1, [sp, #20]
 80089b6:	4620      	mov	r0, r4
 80089b8:	f7ff f990 	bl	8007cdc <__pow5mult>
 80089bc:	9005      	str	r0, [sp, #20]
 80089be:	2800      	cmp	r0, #0
 80089c0:	f43f ae9a 	beq.w	80086f8 <_strtod_l+0x488>
 80089c4:	2f00      	cmp	r7, #0
 80089c6:	dd08      	ble.n	80089da <_strtod_l+0x76a>
 80089c8:	9905      	ldr	r1, [sp, #20]
 80089ca:	463a      	mov	r2, r7
 80089cc:	4620      	mov	r0, r4
 80089ce:	f7ff f9df 	bl	8007d90 <__lshift>
 80089d2:	9005      	str	r0, [sp, #20]
 80089d4:	2800      	cmp	r0, #0
 80089d6:	f43f ae8f 	beq.w	80086f8 <_strtod_l+0x488>
 80089da:	f1ba 0f00 	cmp.w	sl, #0
 80089de:	dd08      	ble.n	80089f2 <_strtod_l+0x782>
 80089e0:	4659      	mov	r1, fp
 80089e2:	4652      	mov	r2, sl
 80089e4:	4620      	mov	r0, r4
 80089e6:	f7ff f9d3 	bl	8007d90 <__lshift>
 80089ea:	4683      	mov	fp, r0
 80089ec:	2800      	cmp	r0, #0
 80089ee:	f43f ae83 	beq.w	80086f8 <_strtod_l+0x488>
 80089f2:	9a05      	ldr	r2, [sp, #20]
 80089f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80089f6:	4620      	mov	r0, r4
 80089f8:	f7ff fa52 	bl	8007ea0 <__mdiff>
 80089fc:	4605      	mov	r5, r0
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f43f ae7a 	beq.w	80086f8 <_strtod_l+0x488>
 8008a04:	68c3      	ldr	r3, [r0, #12]
 8008a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60c3      	str	r3, [r0, #12]
 8008a0c:	4659      	mov	r1, fp
 8008a0e:	f7ff fa2b 	bl	8007e68 <__mcmp>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	da60      	bge.n	8008ad8 <_strtod_l+0x868>
 8008a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a18:	ea53 0308 	orrs.w	r3, r3, r8
 8008a1c:	f040 8084 	bne.w	8008b28 <_strtod_l+0x8b8>
 8008a20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d17f      	bne.n	8008b28 <_strtod_l+0x8b8>
 8008a28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a2c:	0d1b      	lsrs	r3, r3, #20
 8008a2e:	051b      	lsls	r3, r3, #20
 8008a30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008a34:	d978      	bls.n	8008b28 <_strtod_l+0x8b8>
 8008a36:	696b      	ldr	r3, [r5, #20]
 8008a38:	b913      	cbnz	r3, 8008a40 <_strtod_l+0x7d0>
 8008a3a:	692b      	ldr	r3, [r5, #16]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	dd73      	ble.n	8008b28 <_strtod_l+0x8b8>
 8008a40:	4629      	mov	r1, r5
 8008a42:	2201      	movs	r2, #1
 8008a44:	4620      	mov	r0, r4
 8008a46:	f7ff f9a3 	bl	8007d90 <__lshift>
 8008a4a:	4659      	mov	r1, fp
 8008a4c:	4605      	mov	r5, r0
 8008a4e:	f7ff fa0b 	bl	8007e68 <__mcmp>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	dd68      	ble.n	8008b28 <_strtod_l+0x8b8>
 8008a56:	9904      	ldr	r1, [sp, #16]
 8008a58:	4a54      	ldr	r2, [pc, #336]	; (8008bac <_strtod_l+0x93c>)
 8008a5a:	464b      	mov	r3, r9
 8008a5c:	2900      	cmp	r1, #0
 8008a5e:	f000 8084 	beq.w	8008b6a <_strtod_l+0x8fa>
 8008a62:	ea02 0109 	and.w	r1, r2, r9
 8008a66:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008a6a:	dc7e      	bgt.n	8008b6a <_strtod_l+0x8fa>
 8008a6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008a70:	f77f aeb3 	ble.w	80087da <_strtod_l+0x56a>
 8008a74:	4b4e      	ldr	r3, [pc, #312]	; (8008bb0 <_strtod_l+0x940>)
 8008a76:	4640      	mov	r0, r8
 8008a78:	4649      	mov	r1, r9
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f7f7 fdc4 	bl	8000608 <__aeabi_dmul>
 8008a80:	4b4a      	ldr	r3, [pc, #296]	; (8008bac <_strtod_l+0x93c>)
 8008a82:	400b      	ands	r3, r1
 8008a84:	4680      	mov	r8, r0
 8008a86:	4689      	mov	r9, r1
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f47f ae3f 	bne.w	800870c <_strtod_l+0x49c>
 8008a8e:	2322      	movs	r3, #34	; 0x22
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	e63b      	b.n	800870c <_strtod_l+0x49c>
 8008a94:	f04f 32ff 	mov.w	r2, #4294967295
 8008a98:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9c:	ea03 0808 	and.w	r8, r3, r8
 8008aa0:	e6e8      	b.n	8008874 <_strtod_l+0x604>
 8008aa2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008aa6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008aaa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008aae:	36e2      	adds	r6, #226	; 0xe2
 8008ab0:	fa01 f306 	lsl.w	r3, r1, r6
 8008ab4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008ab8:	e748      	b.n	800894c <_strtod_l+0x6dc>
 8008aba:	2100      	movs	r1, #0
 8008abc:	2301      	movs	r3, #1
 8008abe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008ac2:	e743      	b.n	800894c <_strtod_l+0x6dc>
 8008ac4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008ac6:	4632      	mov	r2, r6
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f7ff f961 	bl	8007d90 <__lshift>
 8008ace:	9016      	str	r0, [sp, #88]	; 0x58
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	f47f af6b 	bne.w	80089ac <_strtod_l+0x73c>
 8008ad6:	e60f      	b.n	80086f8 <_strtod_l+0x488>
 8008ad8:	46ca      	mov	sl, r9
 8008ada:	d171      	bne.n	8008bc0 <_strtod_l+0x950>
 8008adc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ade:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ae2:	b352      	cbz	r2, 8008b3a <_strtod_l+0x8ca>
 8008ae4:	4a33      	ldr	r2, [pc, #204]	; (8008bb4 <_strtod_l+0x944>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d12a      	bne.n	8008b40 <_strtod_l+0x8d0>
 8008aea:	9b04      	ldr	r3, [sp, #16]
 8008aec:	4641      	mov	r1, r8
 8008aee:	b1fb      	cbz	r3, 8008b30 <_strtod_l+0x8c0>
 8008af0:	4b2e      	ldr	r3, [pc, #184]	; (8008bac <_strtod_l+0x93c>)
 8008af2:	ea09 0303 	and.w	r3, r9, r3
 8008af6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008afa:	f04f 32ff 	mov.w	r2, #4294967295
 8008afe:	d81a      	bhi.n	8008b36 <_strtod_l+0x8c6>
 8008b00:	0d1b      	lsrs	r3, r3, #20
 8008b02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b06:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0a:	4299      	cmp	r1, r3
 8008b0c:	d118      	bne.n	8008b40 <_strtod_l+0x8d0>
 8008b0e:	4b2a      	ldr	r3, [pc, #168]	; (8008bb8 <_strtod_l+0x948>)
 8008b10:	459a      	cmp	sl, r3
 8008b12:	d102      	bne.n	8008b1a <_strtod_l+0x8aa>
 8008b14:	3101      	adds	r1, #1
 8008b16:	f43f adef 	beq.w	80086f8 <_strtod_l+0x488>
 8008b1a:	4b24      	ldr	r3, [pc, #144]	; (8008bac <_strtod_l+0x93c>)
 8008b1c:	ea0a 0303 	and.w	r3, sl, r3
 8008b20:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008b24:	f04f 0800 	mov.w	r8, #0
 8008b28:	9b04      	ldr	r3, [sp, #16]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1a2      	bne.n	8008a74 <_strtod_l+0x804>
 8008b2e:	e5ed      	b.n	800870c <_strtod_l+0x49c>
 8008b30:	f04f 33ff 	mov.w	r3, #4294967295
 8008b34:	e7e9      	b.n	8008b0a <_strtod_l+0x89a>
 8008b36:	4613      	mov	r3, r2
 8008b38:	e7e7      	b.n	8008b0a <_strtod_l+0x89a>
 8008b3a:	ea53 0308 	orrs.w	r3, r3, r8
 8008b3e:	d08a      	beq.n	8008a56 <_strtod_l+0x7e6>
 8008b40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b42:	b1e3      	cbz	r3, 8008b7e <_strtod_l+0x90e>
 8008b44:	ea13 0f0a 	tst.w	r3, sl
 8008b48:	d0ee      	beq.n	8008b28 <_strtod_l+0x8b8>
 8008b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b4c:	9a04      	ldr	r2, [sp, #16]
 8008b4e:	4640      	mov	r0, r8
 8008b50:	4649      	mov	r1, r9
 8008b52:	b1c3      	cbz	r3, 8008b86 <_strtod_l+0x916>
 8008b54:	f7ff fb6f 	bl	8008236 <sulp>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	ec51 0b18 	vmov	r0, r1, d8
 8008b60:	f7f7 fb9c 	bl	800029c <__adddf3>
 8008b64:	4680      	mov	r8, r0
 8008b66:	4689      	mov	r9, r1
 8008b68:	e7de      	b.n	8008b28 <_strtod_l+0x8b8>
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008b70:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008b74:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008b78:	f04f 38ff 	mov.w	r8, #4294967295
 8008b7c:	e7d4      	b.n	8008b28 <_strtod_l+0x8b8>
 8008b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b80:	ea13 0f08 	tst.w	r3, r8
 8008b84:	e7e0      	b.n	8008b48 <_strtod_l+0x8d8>
 8008b86:	f7ff fb56 	bl	8008236 <sulp>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	ec51 0b18 	vmov	r0, r1, d8
 8008b92:	f7f7 fb81 	bl	8000298 <__aeabi_dsub>
 8008b96:	2200      	movs	r2, #0
 8008b98:	2300      	movs	r3, #0
 8008b9a:	4680      	mov	r8, r0
 8008b9c:	4689      	mov	r9, r1
 8008b9e:	f7f7 ff9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	d0c0      	beq.n	8008b28 <_strtod_l+0x8b8>
 8008ba6:	e618      	b.n	80087da <_strtod_l+0x56a>
 8008ba8:	fffffc02 	.word	0xfffffc02
 8008bac:	7ff00000 	.word	0x7ff00000
 8008bb0:	39500000 	.word	0x39500000
 8008bb4:	000fffff 	.word	0x000fffff
 8008bb8:	7fefffff 	.word	0x7fefffff
 8008bbc:	0800b858 	.word	0x0800b858
 8008bc0:	4659      	mov	r1, fp
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	f7ff fac0 	bl	8008148 <__ratio>
 8008bc8:	ec57 6b10 	vmov	r6, r7, d0
 8008bcc:	ee10 0a10 	vmov	r0, s0
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	f7f7 ff92 	bl	8000b00 <__aeabi_dcmple>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d071      	beq.n	8008cc4 <_strtod_l+0xa54>
 8008be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d17c      	bne.n	8008ce0 <_strtod_l+0xa70>
 8008be6:	f1b8 0f00 	cmp.w	r8, #0
 8008bea:	d15a      	bne.n	8008ca2 <_strtod_l+0xa32>
 8008bec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d15d      	bne.n	8008cb0 <_strtod_l+0xa40>
 8008bf4:	4b90      	ldr	r3, [pc, #576]	; (8008e38 <_strtod_l+0xbc8>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	4639      	mov	r1, r7
 8008bfc:	f7f7 ff76 	bl	8000aec <__aeabi_dcmplt>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d15c      	bne.n	8008cbe <_strtod_l+0xa4e>
 8008c04:	4630      	mov	r0, r6
 8008c06:	4639      	mov	r1, r7
 8008c08:	4b8c      	ldr	r3, [pc, #560]	; (8008e3c <_strtod_l+0xbcc>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f7f7 fcfc 	bl	8000608 <__aeabi_dmul>
 8008c10:	4606      	mov	r6, r0
 8008c12:	460f      	mov	r7, r1
 8008c14:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008c18:	9606      	str	r6, [sp, #24]
 8008c1a:	9307      	str	r3, [sp, #28]
 8008c1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008c24:	4b86      	ldr	r3, [pc, #536]	; (8008e40 <_strtod_l+0xbd0>)
 8008c26:	ea0a 0303 	and.w	r3, sl, r3
 8008c2a:	930d      	str	r3, [sp, #52]	; 0x34
 8008c2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c2e:	4b85      	ldr	r3, [pc, #532]	; (8008e44 <_strtod_l+0xbd4>)
 8008c30:	429a      	cmp	r2, r3
 8008c32:	f040 8090 	bne.w	8008d56 <_strtod_l+0xae6>
 8008c36:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008c3a:	ec49 8b10 	vmov	d0, r8, r9
 8008c3e:	f7ff f9b9 	bl	8007fb4 <__ulp>
 8008c42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c46:	ec51 0b10 	vmov	r0, r1, d0
 8008c4a:	f7f7 fcdd 	bl	8000608 <__aeabi_dmul>
 8008c4e:	4642      	mov	r2, r8
 8008c50:	464b      	mov	r3, r9
 8008c52:	f7f7 fb23 	bl	800029c <__adddf3>
 8008c56:	460b      	mov	r3, r1
 8008c58:	4979      	ldr	r1, [pc, #484]	; (8008e40 <_strtod_l+0xbd0>)
 8008c5a:	4a7b      	ldr	r2, [pc, #492]	; (8008e48 <_strtod_l+0xbd8>)
 8008c5c:	4019      	ands	r1, r3
 8008c5e:	4291      	cmp	r1, r2
 8008c60:	4680      	mov	r8, r0
 8008c62:	d944      	bls.n	8008cee <_strtod_l+0xa7e>
 8008c64:	ee18 2a90 	vmov	r2, s17
 8008c68:	4b78      	ldr	r3, [pc, #480]	; (8008e4c <_strtod_l+0xbdc>)
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d104      	bne.n	8008c78 <_strtod_l+0xa08>
 8008c6e:	ee18 3a10 	vmov	r3, s16
 8008c72:	3301      	adds	r3, #1
 8008c74:	f43f ad40 	beq.w	80086f8 <_strtod_l+0x488>
 8008c78:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008e4c <_strtod_l+0xbdc>
 8008c7c:	f04f 38ff 	mov.w	r8, #4294967295
 8008c80:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008c82:	4620      	mov	r0, r4
 8008c84:	f7fe fe6a 	bl	800795c <_Bfree>
 8008c88:	9905      	ldr	r1, [sp, #20]
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f7fe fe66 	bl	800795c <_Bfree>
 8008c90:	4659      	mov	r1, fp
 8008c92:	4620      	mov	r0, r4
 8008c94:	f7fe fe62 	bl	800795c <_Bfree>
 8008c98:	4629      	mov	r1, r5
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f7fe fe5e 	bl	800795c <_Bfree>
 8008ca0:	e609      	b.n	80088b6 <_strtod_l+0x646>
 8008ca2:	f1b8 0f01 	cmp.w	r8, #1
 8008ca6:	d103      	bne.n	8008cb0 <_strtod_l+0xa40>
 8008ca8:	f1b9 0f00 	cmp.w	r9, #0
 8008cac:	f43f ad95 	beq.w	80087da <_strtod_l+0x56a>
 8008cb0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008e08 <_strtod_l+0xb98>
 8008cb4:	4f60      	ldr	r7, [pc, #384]	; (8008e38 <_strtod_l+0xbc8>)
 8008cb6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008cba:	2600      	movs	r6, #0
 8008cbc:	e7ae      	b.n	8008c1c <_strtod_l+0x9ac>
 8008cbe:	4f5f      	ldr	r7, [pc, #380]	; (8008e3c <_strtod_l+0xbcc>)
 8008cc0:	2600      	movs	r6, #0
 8008cc2:	e7a7      	b.n	8008c14 <_strtod_l+0x9a4>
 8008cc4:	4b5d      	ldr	r3, [pc, #372]	; (8008e3c <_strtod_l+0xbcc>)
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	4639      	mov	r1, r7
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f7f7 fc9c 	bl	8000608 <__aeabi_dmul>
 8008cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	460f      	mov	r7, r1
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d09c      	beq.n	8008c14 <_strtod_l+0x9a4>
 8008cda:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008cde:	e79d      	b.n	8008c1c <_strtod_l+0x9ac>
 8008ce0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008e10 <_strtod_l+0xba0>
 8008ce4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ce8:	ec57 6b17 	vmov	r6, r7, d7
 8008cec:	e796      	b.n	8008c1c <_strtod_l+0x9ac>
 8008cee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008cf2:	9b04      	ldr	r3, [sp, #16]
 8008cf4:	46ca      	mov	sl, r9
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1c2      	bne.n	8008c80 <_strtod_l+0xa10>
 8008cfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008cfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d00:	0d1b      	lsrs	r3, r3, #20
 8008d02:	051b      	lsls	r3, r3, #20
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d1bb      	bne.n	8008c80 <_strtod_l+0xa10>
 8008d08:	4630      	mov	r0, r6
 8008d0a:	4639      	mov	r1, r7
 8008d0c:	f7f7 ffdc 	bl	8000cc8 <__aeabi_d2lz>
 8008d10:	f7f7 fc4c 	bl	80005ac <__aeabi_l2d>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	4630      	mov	r0, r6
 8008d1a:	4639      	mov	r1, r7
 8008d1c:	f7f7 fabc 	bl	8000298 <__aeabi_dsub>
 8008d20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d26:	ea43 0308 	orr.w	r3, r3, r8
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	460f      	mov	r7, r1
 8008d30:	d054      	beq.n	8008ddc <_strtod_l+0xb6c>
 8008d32:	a339      	add	r3, pc, #228	; (adr r3, 8008e18 <_strtod_l+0xba8>)
 8008d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d38:	f7f7 fed8 	bl	8000aec <__aeabi_dcmplt>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	f47f ace5 	bne.w	800870c <_strtod_l+0x49c>
 8008d42:	a337      	add	r3, pc, #220	; (adr r3, 8008e20 <_strtod_l+0xbb0>)
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	4630      	mov	r0, r6
 8008d4a:	4639      	mov	r1, r7
 8008d4c:	f7f7 feec 	bl	8000b28 <__aeabi_dcmpgt>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d095      	beq.n	8008c80 <_strtod_l+0xa10>
 8008d54:	e4da      	b.n	800870c <_strtod_l+0x49c>
 8008d56:	9b04      	ldr	r3, [sp, #16]
 8008d58:	b333      	cbz	r3, 8008da8 <_strtod_l+0xb38>
 8008d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d60:	d822      	bhi.n	8008da8 <_strtod_l+0xb38>
 8008d62:	a331      	add	r3, pc, #196	; (adr r3, 8008e28 <_strtod_l+0xbb8>)
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	4630      	mov	r0, r6
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	f7f7 fec8 	bl	8000b00 <__aeabi_dcmple>
 8008d70:	b1a0      	cbz	r0, 8008d9c <_strtod_l+0xb2c>
 8008d72:	4639      	mov	r1, r7
 8008d74:	4630      	mov	r0, r6
 8008d76:	f7f7 ff1f 	bl	8000bb8 <__aeabi_d2uiz>
 8008d7a:	2801      	cmp	r0, #1
 8008d7c:	bf38      	it	cc
 8008d7e:	2001      	movcc	r0, #1
 8008d80:	f7f7 fbc8 	bl	8000514 <__aeabi_ui2d>
 8008d84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d86:	4606      	mov	r6, r0
 8008d88:	460f      	mov	r7, r1
 8008d8a:	bb23      	cbnz	r3, 8008dd6 <_strtod_l+0xb66>
 8008d8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d90:	9010      	str	r0, [sp, #64]	; 0x40
 8008d92:	9311      	str	r3, [sp, #68]	; 0x44
 8008d94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008d9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008da0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008da4:	1a9b      	subs	r3, r3, r2
 8008da6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008da8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008dac:	eeb0 0a48 	vmov.f32	s0, s16
 8008db0:	eef0 0a68 	vmov.f32	s1, s17
 8008db4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008db8:	f7ff f8fc 	bl	8007fb4 <__ulp>
 8008dbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008dc0:	ec53 2b10 	vmov	r2, r3, d0
 8008dc4:	f7f7 fc20 	bl	8000608 <__aeabi_dmul>
 8008dc8:	ec53 2b18 	vmov	r2, r3, d8
 8008dcc:	f7f7 fa66 	bl	800029c <__adddf3>
 8008dd0:	4680      	mov	r8, r0
 8008dd2:	4689      	mov	r9, r1
 8008dd4:	e78d      	b.n	8008cf2 <_strtod_l+0xa82>
 8008dd6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008dda:	e7db      	b.n	8008d94 <_strtod_l+0xb24>
 8008ddc:	a314      	add	r3, pc, #80	; (adr r3, 8008e30 <_strtod_l+0xbc0>)
 8008dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de2:	f7f7 fe83 	bl	8000aec <__aeabi_dcmplt>
 8008de6:	e7b3      	b.n	8008d50 <_strtod_l+0xae0>
 8008de8:	2300      	movs	r3, #0
 8008dea:	930a      	str	r3, [sp, #40]	; 0x28
 8008dec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008dee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008df0:	6013      	str	r3, [r2, #0]
 8008df2:	f7ff ba7c 	b.w	80082ee <_strtod_l+0x7e>
 8008df6:	2a65      	cmp	r2, #101	; 0x65
 8008df8:	f43f ab75 	beq.w	80084e6 <_strtod_l+0x276>
 8008dfc:	2a45      	cmp	r2, #69	; 0x45
 8008dfe:	f43f ab72 	beq.w	80084e6 <_strtod_l+0x276>
 8008e02:	2301      	movs	r3, #1
 8008e04:	f7ff bbaa 	b.w	800855c <_strtod_l+0x2ec>
 8008e08:	00000000 	.word	0x00000000
 8008e0c:	bff00000 	.word	0xbff00000
 8008e10:	00000000 	.word	0x00000000
 8008e14:	3ff00000 	.word	0x3ff00000
 8008e18:	94a03595 	.word	0x94a03595
 8008e1c:	3fdfffff 	.word	0x3fdfffff
 8008e20:	35afe535 	.word	0x35afe535
 8008e24:	3fe00000 	.word	0x3fe00000
 8008e28:	ffc00000 	.word	0xffc00000
 8008e2c:	41dfffff 	.word	0x41dfffff
 8008e30:	94a03595 	.word	0x94a03595
 8008e34:	3fcfffff 	.word	0x3fcfffff
 8008e38:	3ff00000 	.word	0x3ff00000
 8008e3c:	3fe00000 	.word	0x3fe00000
 8008e40:	7ff00000 	.word	0x7ff00000
 8008e44:	7fe00000 	.word	0x7fe00000
 8008e48:	7c9fffff 	.word	0x7c9fffff
 8008e4c:	7fefffff 	.word	0x7fefffff

08008e50 <_strtod_r>:
 8008e50:	4b01      	ldr	r3, [pc, #4]	; (8008e58 <_strtod_r+0x8>)
 8008e52:	f7ff ba0d 	b.w	8008270 <_strtod_l>
 8008e56:	bf00      	nop
 8008e58:	2000007c 	.word	0x2000007c

08008e5c <_strtol_l.constprop.0>:
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e62:	d001      	beq.n	8008e68 <_strtol_l.constprop.0+0xc>
 8008e64:	2b24      	cmp	r3, #36	; 0x24
 8008e66:	d906      	bls.n	8008e76 <_strtol_l.constprop.0+0x1a>
 8008e68:	f7fd fd7c 	bl	8006964 <__errno>
 8008e6c:	2316      	movs	r3, #22
 8008e6e:	6003      	str	r3, [r0, #0]
 8008e70:	2000      	movs	r0, #0
 8008e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008f5c <_strtol_l.constprop.0+0x100>
 8008e7a:	460d      	mov	r5, r1
 8008e7c:	462e      	mov	r6, r5
 8008e7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e82:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008e86:	f017 0708 	ands.w	r7, r7, #8
 8008e8a:	d1f7      	bne.n	8008e7c <_strtol_l.constprop.0+0x20>
 8008e8c:	2c2d      	cmp	r4, #45	; 0x2d
 8008e8e:	d132      	bne.n	8008ef6 <_strtol_l.constprop.0+0x9a>
 8008e90:	782c      	ldrb	r4, [r5, #0]
 8008e92:	2701      	movs	r7, #1
 8008e94:	1cb5      	adds	r5, r6, #2
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d05b      	beq.n	8008f52 <_strtol_l.constprop.0+0xf6>
 8008e9a:	2b10      	cmp	r3, #16
 8008e9c:	d109      	bne.n	8008eb2 <_strtol_l.constprop.0+0x56>
 8008e9e:	2c30      	cmp	r4, #48	; 0x30
 8008ea0:	d107      	bne.n	8008eb2 <_strtol_l.constprop.0+0x56>
 8008ea2:	782c      	ldrb	r4, [r5, #0]
 8008ea4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008ea8:	2c58      	cmp	r4, #88	; 0x58
 8008eaa:	d14d      	bne.n	8008f48 <_strtol_l.constprop.0+0xec>
 8008eac:	786c      	ldrb	r4, [r5, #1]
 8008eae:	2310      	movs	r3, #16
 8008eb0:	3502      	adds	r5, #2
 8008eb2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008eb6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008eba:	f04f 0e00 	mov.w	lr, #0
 8008ebe:	fbb8 f9f3 	udiv	r9, r8, r3
 8008ec2:	4676      	mov	r6, lr
 8008ec4:	fb03 8a19 	mls	sl, r3, r9, r8
 8008ec8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008ecc:	f1bc 0f09 	cmp.w	ip, #9
 8008ed0:	d816      	bhi.n	8008f00 <_strtol_l.constprop.0+0xa4>
 8008ed2:	4664      	mov	r4, ip
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	dd24      	ble.n	8008f22 <_strtol_l.constprop.0+0xc6>
 8008ed8:	f1be 3fff 	cmp.w	lr, #4294967295
 8008edc:	d008      	beq.n	8008ef0 <_strtol_l.constprop.0+0x94>
 8008ede:	45b1      	cmp	r9, r6
 8008ee0:	d31c      	bcc.n	8008f1c <_strtol_l.constprop.0+0xc0>
 8008ee2:	d101      	bne.n	8008ee8 <_strtol_l.constprop.0+0x8c>
 8008ee4:	45a2      	cmp	sl, r4
 8008ee6:	db19      	blt.n	8008f1c <_strtol_l.constprop.0+0xc0>
 8008ee8:	fb06 4603 	mla	r6, r6, r3, r4
 8008eec:	f04f 0e01 	mov.w	lr, #1
 8008ef0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ef4:	e7e8      	b.n	8008ec8 <_strtol_l.constprop.0+0x6c>
 8008ef6:	2c2b      	cmp	r4, #43	; 0x2b
 8008ef8:	bf04      	itt	eq
 8008efa:	782c      	ldrbeq	r4, [r5, #0]
 8008efc:	1cb5      	addeq	r5, r6, #2
 8008efe:	e7ca      	b.n	8008e96 <_strtol_l.constprop.0+0x3a>
 8008f00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008f04:	f1bc 0f19 	cmp.w	ip, #25
 8008f08:	d801      	bhi.n	8008f0e <_strtol_l.constprop.0+0xb2>
 8008f0a:	3c37      	subs	r4, #55	; 0x37
 8008f0c:	e7e2      	b.n	8008ed4 <_strtol_l.constprop.0+0x78>
 8008f0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008f12:	f1bc 0f19 	cmp.w	ip, #25
 8008f16:	d804      	bhi.n	8008f22 <_strtol_l.constprop.0+0xc6>
 8008f18:	3c57      	subs	r4, #87	; 0x57
 8008f1a:	e7db      	b.n	8008ed4 <_strtol_l.constprop.0+0x78>
 8008f1c:	f04f 3eff 	mov.w	lr, #4294967295
 8008f20:	e7e6      	b.n	8008ef0 <_strtol_l.constprop.0+0x94>
 8008f22:	f1be 3fff 	cmp.w	lr, #4294967295
 8008f26:	d105      	bne.n	8008f34 <_strtol_l.constprop.0+0xd8>
 8008f28:	2322      	movs	r3, #34	; 0x22
 8008f2a:	6003      	str	r3, [r0, #0]
 8008f2c:	4646      	mov	r6, r8
 8008f2e:	b942      	cbnz	r2, 8008f42 <_strtol_l.constprop.0+0xe6>
 8008f30:	4630      	mov	r0, r6
 8008f32:	e79e      	b.n	8008e72 <_strtol_l.constprop.0+0x16>
 8008f34:	b107      	cbz	r7, 8008f38 <_strtol_l.constprop.0+0xdc>
 8008f36:	4276      	negs	r6, r6
 8008f38:	2a00      	cmp	r2, #0
 8008f3a:	d0f9      	beq.n	8008f30 <_strtol_l.constprop.0+0xd4>
 8008f3c:	f1be 0f00 	cmp.w	lr, #0
 8008f40:	d000      	beq.n	8008f44 <_strtol_l.constprop.0+0xe8>
 8008f42:	1e69      	subs	r1, r5, #1
 8008f44:	6011      	str	r1, [r2, #0]
 8008f46:	e7f3      	b.n	8008f30 <_strtol_l.constprop.0+0xd4>
 8008f48:	2430      	movs	r4, #48	; 0x30
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1b1      	bne.n	8008eb2 <_strtol_l.constprop.0+0x56>
 8008f4e:	2308      	movs	r3, #8
 8008f50:	e7af      	b.n	8008eb2 <_strtol_l.constprop.0+0x56>
 8008f52:	2c30      	cmp	r4, #48	; 0x30
 8008f54:	d0a5      	beq.n	8008ea2 <_strtol_l.constprop.0+0x46>
 8008f56:	230a      	movs	r3, #10
 8008f58:	e7ab      	b.n	8008eb2 <_strtol_l.constprop.0+0x56>
 8008f5a:	bf00      	nop
 8008f5c:	0800b881 	.word	0x0800b881

08008f60 <_strtol_r>:
 8008f60:	f7ff bf7c 	b.w	8008e5c <_strtol_l.constprop.0>

08008f64 <__ssputs_r>:
 8008f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f68:	688e      	ldr	r6, [r1, #8]
 8008f6a:	461f      	mov	r7, r3
 8008f6c:	42be      	cmp	r6, r7
 8008f6e:	680b      	ldr	r3, [r1, #0]
 8008f70:	4682      	mov	sl, r0
 8008f72:	460c      	mov	r4, r1
 8008f74:	4690      	mov	r8, r2
 8008f76:	d82c      	bhi.n	8008fd2 <__ssputs_r+0x6e>
 8008f78:	898a      	ldrh	r2, [r1, #12]
 8008f7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f7e:	d026      	beq.n	8008fce <__ssputs_r+0x6a>
 8008f80:	6965      	ldr	r5, [r4, #20]
 8008f82:	6909      	ldr	r1, [r1, #16]
 8008f84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f88:	eba3 0901 	sub.w	r9, r3, r1
 8008f8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f90:	1c7b      	adds	r3, r7, #1
 8008f92:	444b      	add	r3, r9
 8008f94:	106d      	asrs	r5, r5, #1
 8008f96:	429d      	cmp	r5, r3
 8008f98:	bf38      	it	cc
 8008f9a:	461d      	movcc	r5, r3
 8008f9c:	0553      	lsls	r3, r2, #21
 8008f9e:	d527      	bpl.n	8008ff0 <__ssputs_r+0x8c>
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	f7fe fc0f 	bl	80077c4 <_malloc_r>
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	b360      	cbz	r0, 8009004 <__ssputs_r+0xa0>
 8008faa:	6921      	ldr	r1, [r4, #16]
 8008fac:	464a      	mov	r2, r9
 8008fae:	f7fd fd06 	bl	80069be <memcpy>
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fbc:	81a3      	strh	r3, [r4, #12]
 8008fbe:	6126      	str	r6, [r4, #16]
 8008fc0:	6165      	str	r5, [r4, #20]
 8008fc2:	444e      	add	r6, r9
 8008fc4:	eba5 0509 	sub.w	r5, r5, r9
 8008fc8:	6026      	str	r6, [r4, #0]
 8008fca:	60a5      	str	r5, [r4, #8]
 8008fcc:	463e      	mov	r6, r7
 8008fce:	42be      	cmp	r6, r7
 8008fd0:	d900      	bls.n	8008fd4 <__ssputs_r+0x70>
 8008fd2:	463e      	mov	r6, r7
 8008fd4:	6820      	ldr	r0, [r4, #0]
 8008fd6:	4632      	mov	r2, r6
 8008fd8:	4641      	mov	r1, r8
 8008fda:	f7fd fc56 	bl	800688a <memmove>
 8008fde:	68a3      	ldr	r3, [r4, #8]
 8008fe0:	1b9b      	subs	r3, r3, r6
 8008fe2:	60a3      	str	r3, [r4, #8]
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	4433      	add	r3, r6
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	2000      	movs	r0, #0
 8008fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff0:	462a      	mov	r2, r5
 8008ff2:	f000 fd86 	bl	8009b02 <_realloc_r>
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d1e0      	bne.n	8008fbe <__ssputs_r+0x5a>
 8008ffc:	6921      	ldr	r1, [r4, #16]
 8008ffe:	4650      	mov	r0, sl
 8009000:	f7fe fb6c 	bl	80076dc <_free_r>
 8009004:	230c      	movs	r3, #12
 8009006:	f8ca 3000 	str.w	r3, [sl]
 800900a:	89a3      	ldrh	r3, [r4, #12]
 800900c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009010:	81a3      	strh	r3, [r4, #12]
 8009012:	f04f 30ff 	mov.w	r0, #4294967295
 8009016:	e7e9      	b.n	8008fec <__ssputs_r+0x88>

08009018 <_svfiprintf_r>:
 8009018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901c:	4698      	mov	r8, r3
 800901e:	898b      	ldrh	r3, [r1, #12]
 8009020:	061b      	lsls	r3, r3, #24
 8009022:	b09d      	sub	sp, #116	; 0x74
 8009024:	4607      	mov	r7, r0
 8009026:	460d      	mov	r5, r1
 8009028:	4614      	mov	r4, r2
 800902a:	d50e      	bpl.n	800904a <_svfiprintf_r+0x32>
 800902c:	690b      	ldr	r3, [r1, #16]
 800902e:	b963      	cbnz	r3, 800904a <_svfiprintf_r+0x32>
 8009030:	2140      	movs	r1, #64	; 0x40
 8009032:	f7fe fbc7 	bl	80077c4 <_malloc_r>
 8009036:	6028      	str	r0, [r5, #0]
 8009038:	6128      	str	r0, [r5, #16]
 800903a:	b920      	cbnz	r0, 8009046 <_svfiprintf_r+0x2e>
 800903c:	230c      	movs	r3, #12
 800903e:	603b      	str	r3, [r7, #0]
 8009040:	f04f 30ff 	mov.w	r0, #4294967295
 8009044:	e0d0      	b.n	80091e8 <_svfiprintf_r+0x1d0>
 8009046:	2340      	movs	r3, #64	; 0x40
 8009048:	616b      	str	r3, [r5, #20]
 800904a:	2300      	movs	r3, #0
 800904c:	9309      	str	r3, [sp, #36]	; 0x24
 800904e:	2320      	movs	r3, #32
 8009050:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009054:	f8cd 800c 	str.w	r8, [sp, #12]
 8009058:	2330      	movs	r3, #48	; 0x30
 800905a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009200 <_svfiprintf_r+0x1e8>
 800905e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009062:	f04f 0901 	mov.w	r9, #1
 8009066:	4623      	mov	r3, r4
 8009068:	469a      	mov	sl, r3
 800906a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800906e:	b10a      	cbz	r2, 8009074 <_svfiprintf_r+0x5c>
 8009070:	2a25      	cmp	r2, #37	; 0x25
 8009072:	d1f9      	bne.n	8009068 <_svfiprintf_r+0x50>
 8009074:	ebba 0b04 	subs.w	fp, sl, r4
 8009078:	d00b      	beq.n	8009092 <_svfiprintf_r+0x7a>
 800907a:	465b      	mov	r3, fp
 800907c:	4622      	mov	r2, r4
 800907e:	4629      	mov	r1, r5
 8009080:	4638      	mov	r0, r7
 8009082:	f7ff ff6f 	bl	8008f64 <__ssputs_r>
 8009086:	3001      	adds	r0, #1
 8009088:	f000 80a9 	beq.w	80091de <_svfiprintf_r+0x1c6>
 800908c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800908e:	445a      	add	r2, fp
 8009090:	9209      	str	r2, [sp, #36]	; 0x24
 8009092:	f89a 3000 	ldrb.w	r3, [sl]
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 80a1 	beq.w	80091de <_svfiprintf_r+0x1c6>
 800909c:	2300      	movs	r3, #0
 800909e:	f04f 32ff 	mov.w	r2, #4294967295
 80090a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090a6:	f10a 0a01 	add.w	sl, sl, #1
 80090aa:	9304      	str	r3, [sp, #16]
 80090ac:	9307      	str	r3, [sp, #28]
 80090ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090b2:	931a      	str	r3, [sp, #104]	; 0x68
 80090b4:	4654      	mov	r4, sl
 80090b6:	2205      	movs	r2, #5
 80090b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090bc:	4850      	ldr	r0, [pc, #320]	; (8009200 <_svfiprintf_r+0x1e8>)
 80090be:	f7f7 f88f 	bl	80001e0 <memchr>
 80090c2:	9a04      	ldr	r2, [sp, #16]
 80090c4:	b9d8      	cbnz	r0, 80090fe <_svfiprintf_r+0xe6>
 80090c6:	06d0      	lsls	r0, r2, #27
 80090c8:	bf44      	itt	mi
 80090ca:	2320      	movmi	r3, #32
 80090cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090d0:	0711      	lsls	r1, r2, #28
 80090d2:	bf44      	itt	mi
 80090d4:	232b      	movmi	r3, #43	; 0x2b
 80090d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090da:	f89a 3000 	ldrb.w	r3, [sl]
 80090de:	2b2a      	cmp	r3, #42	; 0x2a
 80090e0:	d015      	beq.n	800910e <_svfiprintf_r+0xf6>
 80090e2:	9a07      	ldr	r2, [sp, #28]
 80090e4:	4654      	mov	r4, sl
 80090e6:	2000      	movs	r0, #0
 80090e8:	f04f 0c0a 	mov.w	ip, #10
 80090ec:	4621      	mov	r1, r4
 80090ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090f2:	3b30      	subs	r3, #48	; 0x30
 80090f4:	2b09      	cmp	r3, #9
 80090f6:	d94d      	bls.n	8009194 <_svfiprintf_r+0x17c>
 80090f8:	b1b0      	cbz	r0, 8009128 <_svfiprintf_r+0x110>
 80090fa:	9207      	str	r2, [sp, #28]
 80090fc:	e014      	b.n	8009128 <_svfiprintf_r+0x110>
 80090fe:	eba0 0308 	sub.w	r3, r0, r8
 8009102:	fa09 f303 	lsl.w	r3, r9, r3
 8009106:	4313      	orrs	r3, r2
 8009108:	9304      	str	r3, [sp, #16]
 800910a:	46a2      	mov	sl, r4
 800910c:	e7d2      	b.n	80090b4 <_svfiprintf_r+0x9c>
 800910e:	9b03      	ldr	r3, [sp, #12]
 8009110:	1d19      	adds	r1, r3, #4
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	9103      	str	r1, [sp, #12]
 8009116:	2b00      	cmp	r3, #0
 8009118:	bfbb      	ittet	lt
 800911a:	425b      	neglt	r3, r3
 800911c:	f042 0202 	orrlt.w	r2, r2, #2
 8009120:	9307      	strge	r3, [sp, #28]
 8009122:	9307      	strlt	r3, [sp, #28]
 8009124:	bfb8      	it	lt
 8009126:	9204      	strlt	r2, [sp, #16]
 8009128:	7823      	ldrb	r3, [r4, #0]
 800912a:	2b2e      	cmp	r3, #46	; 0x2e
 800912c:	d10c      	bne.n	8009148 <_svfiprintf_r+0x130>
 800912e:	7863      	ldrb	r3, [r4, #1]
 8009130:	2b2a      	cmp	r3, #42	; 0x2a
 8009132:	d134      	bne.n	800919e <_svfiprintf_r+0x186>
 8009134:	9b03      	ldr	r3, [sp, #12]
 8009136:	1d1a      	adds	r2, r3, #4
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	9203      	str	r2, [sp, #12]
 800913c:	2b00      	cmp	r3, #0
 800913e:	bfb8      	it	lt
 8009140:	f04f 33ff 	movlt.w	r3, #4294967295
 8009144:	3402      	adds	r4, #2
 8009146:	9305      	str	r3, [sp, #20]
 8009148:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009210 <_svfiprintf_r+0x1f8>
 800914c:	7821      	ldrb	r1, [r4, #0]
 800914e:	2203      	movs	r2, #3
 8009150:	4650      	mov	r0, sl
 8009152:	f7f7 f845 	bl	80001e0 <memchr>
 8009156:	b138      	cbz	r0, 8009168 <_svfiprintf_r+0x150>
 8009158:	9b04      	ldr	r3, [sp, #16]
 800915a:	eba0 000a 	sub.w	r0, r0, sl
 800915e:	2240      	movs	r2, #64	; 0x40
 8009160:	4082      	lsls	r2, r0
 8009162:	4313      	orrs	r3, r2
 8009164:	3401      	adds	r4, #1
 8009166:	9304      	str	r3, [sp, #16]
 8009168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800916c:	4825      	ldr	r0, [pc, #148]	; (8009204 <_svfiprintf_r+0x1ec>)
 800916e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009172:	2206      	movs	r2, #6
 8009174:	f7f7 f834 	bl	80001e0 <memchr>
 8009178:	2800      	cmp	r0, #0
 800917a:	d038      	beq.n	80091ee <_svfiprintf_r+0x1d6>
 800917c:	4b22      	ldr	r3, [pc, #136]	; (8009208 <_svfiprintf_r+0x1f0>)
 800917e:	bb1b      	cbnz	r3, 80091c8 <_svfiprintf_r+0x1b0>
 8009180:	9b03      	ldr	r3, [sp, #12]
 8009182:	3307      	adds	r3, #7
 8009184:	f023 0307 	bic.w	r3, r3, #7
 8009188:	3308      	adds	r3, #8
 800918a:	9303      	str	r3, [sp, #12]
 800918c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800918e:	4433      	add	r3, r6
 8009190:	9309      	str	r3, [sp, #36]	; 0x24
 8009192:	e768      	b.n	8009066 <_svfiprintf_r+0x4e>
 8009194:	fb0c 3202 	mla	r2, ip, r2, r3
 8009198:	460c      	mov	r4, r1
 800919a:	2001      	movs	r0, #1
 800919c:	e7a6      	b.n	80090ec <_svfiprintf_r+0xd4>
 800919e:	2300      	movs	r3, #0
 80091a0:	3401      	adds	r4, #1
 80091a2:	9305      	str	r3, [sp, #20]
 80091a4:	4619      	mov	r1, r3
 80091a6:	f04f 0c0a 	mov.w	ip, #10
 80091aa:	4620      	mov	r0, r4
 80091ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091b0:	3a30      	subs	r2, #48	; 0x30
 80091b2:	2a09      	cmp	r2, #9
 80091b4:	d903      	bls.n	80091be <_svfiprintf_r+0x1a6>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d0c6      	beq.n	8009148 <_svfiprintf_r+0x130>
 80091ba:	9105      	str	r1, [sp, #20]
 80091bc:	e7c4      	b.n	8009148 <_svfiprintf_r+0x130>
 80091be:	fb0c 2101 	mla	r1, ip, r1, r2
 80091c2:	4604      	mov	r4, r0
 80091c4:	2301      	movs	r3, #1
 80091c6:	e7f0      	b.n	80091aa <_svfiprintf_r+0x192>
 80091c8:	ab03      	add	r3, sp, #12
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	462a      	mov	r2, r5
 80091ce:	4b0f      	ldr	r3, [pc, #60]	; (800920c <_svfiprintf_r+0x1f4>)
 80091d0:	a904      	add	r1, sp, #16
 80091d2:	4638      	mov	r0, r7
 80091d4:	f7fc fc2a 	bl	8005a2c <_printf_float>
 80091d8:	1c42      	adds	r2, r0, #1
 80091da:	4606      	mov	r6, r0
 80091dc:	d1d6      	bne.n	800918c <_svfiprintf_r+0x174>
 80091de:	89ab      	ldrh	r3, [r5, #12]
 80091e0:	065b      	lsls	r3, r3, #25
 80091e2:	f53f af2d 	bmi.w	8009040 <_svfiprintf_r+0x28>
 80091e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091e8:	b01d      	add	sp, #116	; 0x74
 80091ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ee:	ab03      	add	r3, sp, #12
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	462a      	mov	r2, r5
 80091f4:	4b05      	ldr	r3, [pc, #20]	; (800920c <_svfiprintf_r+0x1f4>)
 80091f6:	a904      	add	r1, sp, #16
 80091f8:	4638      	mov	r0, r7
 80091fa:	f7fc febb 	bl	8005f74 <_printf_i>
 80091fe:	e7eb      	b.n	80091d8 <_svfiprintf_r+0x1c0>
 8009200:	0800b981 	.word	0x0800b981
 8009204:	0800b98b 	.word	0x0800b98b
 8009208:	08005a2d 	.word	0x08005a2d
 800920c:	08008f65 	.word	0x08008f65
 8009210:	0800b987 	.word	0x0800b987

08009214 <__sflush_r>:
 8009214:	898a      	ldrh	r2, [r1, #12]
 8009216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800921a:	4605      	mov	r5, r0
 800921c:	0710      	lsls	r0, r2, #28
 800921e:	460c      	mov	r4, r1
 8009220:	d458      	bmi.n	80092d4 <__sflush_r+0xc0>
 8009222:	684b      	ldr	r3, [r1, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	dc05      	bgt.n	8009234 <__sflush_r+0x20>
 8009228:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	dc02      	bgt.n	8009234 <__sflush_r+0x20>
 800922e:	2000      	movs	r0, #0
 8009230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009236:	2e00      	cmp	r6, #0
 8009238:	d0f9      	beq.n	800922e <__sflush_r+0x1a>
 800923a:	2300      	movs	r3, #0
 800923c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009240:	682f      	ldr	r7, [r5, #0]
 8009242:	6a21      	ldr	r1, [r4, #32]
 8009244:	602b      	str	r3, [r5, #0]
 8009246:	d032      	beq.n	80092ae <__sflush_r+0x9a>
 8009248:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	075a      	lsls	r2, r3, #29
 800924e:	d505      	bpl.n	800925c <__sflush_r+0x48>
 8009250:	6863      	ldr	r3, [r4, #4]
 8009252:	1ac0      	subs	r0, r0, r3
 8009254:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009256:	b10b      	cbz	r3, 800925c <__sflush_r+0x48>
 8009258:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800925a:	1ac0      	subs	r0, r0, r3
 800925c:	2300      	movs	r3, #0
 800925e:	4602      	mov	r2, r0
 8009260:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009262:	6a21      	ldr	r1, [r4, #32]
 8009264:	4628      	mov	r0, r5
 8009266:	47b0      	blx	r6
 8009268:	1c43      	adds	r3, r0, #1
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	d106      	bne.n	800927c <__sflush_r+0x68>
 800926e:	6829      	ldr	r1, [r5, #0]
 8009270:	291d      	cmp	r1, #29
 8009272:	d82b      	bhi.n	80092cc <__sflush_r+0xb8>
 8009274:	4a29      	ldr	r2, [pc, #164]	; (800931c <__sflush_r+0x108>)
 8009276:	410a      	asrs	r2, r1
 8009278:	07d6      	lsls	r6, r2, #31
 800927a:	d427      	bmi.n	80092cc <__sflush_r+0xb8>
 800927c:	2200      	movs	r2, #0
 800927e:	6062      	str	r2, [r4, #4]
 8009280:	04d9      	lsls	r1, r3, #19
 8009282:	6922      	ldr	r2, [r4, #16]
 8009284:	6022      	str	r2, [r4, #0]
 8009286:	d504      	bpl.n	8009292 <__sflush_r+0x7e>
 8009288:	1c42      	adds	r2, r0, #1
 800928a:	d101      	bne.n	8009290 <__sflush_r+0x7c>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	b903      	cbnz	r3, 8009292 <__sflush_r+0x7e>
 8009290:	6560      	str	r0, [r4, #84]	; 0x54
 8009292:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009294:	602f      	str	r7, [r5, #0]
 8009296:	2900      	cmp	r1, #0
 8009298:	d0c9      	beq.n	800922e <__sflush_r+0x1a>
 800929a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800929e:	4299      	cmp	r1, r3
 80092a0:	d002      	beq.n	80092a8 <__sflush_r+0x94>
 80092a2:	4628      	mov	r0, r5
 80092a4:	f7fe fa1a 	bl	80076dc <_free_r>
 80092a8:	2000      	movs	r0, #0
 80092aa:	6360      	str	r0, [r4, #52]	; 0x34
 80092ac:	e7c0      	b.n	8009230 <__sflush_r+0x1c>
 80092ae:	2301      	movs	r3, #1
 80092b0:	4628      	mov	r0, r5
 80092b2:	47b0      	blx	r6
 80092b4:	1c41      	adds	r1, r0, #1
 80092b6:	d1c8      	bne.n	800924a <__sflush_r+0x36>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0c5      	beq.n	800924a <__sflush_r+0x36>
 80092be:	2b1d      	cmp	r3, #29
 80092c0:	d001      	beq.n	80092c6 <__sflush_r+0xb2>
 80092c2:	2b16      	cmp	r3, #22
 80092c4:	d101      	bne.n	80092ca <__sflush_r+0xb6>
 80092c6:	602f      	str	r7, [r5, #0]
 80092c8:	e7b1      	b.n	800922e <__sflush_r+0x1a>
 80092ca:	89a3      	ldrh	r3, [r4, #12]
 80092cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d0:	81a3      	strh	r3, [r4, #12]
 80092d2:	e7ad      	b.n	8009230 <__sflush_r+0x1c>
 80092d4:	690f      	ldr	r7, [r1, #16]
 80092d6:	2f00      	cmp	r7, #0
 80092d8:	d0a9      	beq.n	800922e <__sflush_r+0x1a>
 80092da:	0793      	lsls	r3, r2, #30
 80092dc:	680e      	ldr	r6, [r1, #0]
 80092de:	bf08      	it	eq
 80092e0:	694b      	ldreq	r3, [r1, #20]
 80092e2:	600f      	str	r7, [r1, #0]
 80092e4:	bf18      	it	ne
 80092e6:	2300      	movne	r3, #0
 80092e8:	eba6 0807 	sub.w	r8, r6, r7
 80092ec:	608b      	str	r3, [r1, #8]
 80092ee:	f1b8 0f00 	cmp.w	r8, #0
 80092f2:	dd9c      	ble.n	800922e <__sflush_r+0x1a>
 80092f4:	6a21      	ldr	r1, [r4, #32]
 80092f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092f8:	4643      	mov	r3, r8
 80092fa:	463a      	mov	r2, r7
 80092fc:	4628      	mov	r0, r5
 80092fe:	47b0      	blx	r6
 8009300:	2800      	cmp	r0, #0
 8009302:	dc06      	bgt.n	8009312 <__sflush_r+0xfe>
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800930a:	81a3      	strh	r3, [r4, #12]
 800930c:	f04f 30ff 	mov.w	r0, #4294967295
 8009310:	e78e      	b.n	8009230 <__sflush_r+0x1c>
 8009312:	4407      	add	r7, r0
 8009314:	eba8 0800 	sub.w	r8, r8, r0
 8009318:	e7e9      	b.n	80092ee <__sflush_r+0xda>
 800931a:	bf00      	nop
 800931c:	dfbffffe 	.word	0xdfbffffe

08009320 <_fflush_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	690b      	ldr	r3, [r1, #16]
 8009324:	4605      	mov	r5, r0
 8009326:	460c      	mov	r4, r1
 8009328:	b913      	cbnz	r3, 8009330 <_fflush_r+0x10>
 800932a:	2500      	movs	r5, #0
 800932c:	4628      	mov	r0, r5
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	b118      	cbz	r0, 800933a <_fflush_r+0x1a>
 8009332:	6a03      	ldr	r3, [r0, #32]
 8009334:	b90b      	cbnz	r3, 800933a <_fflush_r+0x1a>
 8009336:	f7fd f9db 	bl	80066f0 <__sinit>
 800933a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d0f3      	beq.n	800932a <_fflush_r+0xa>
 8009342:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009344:	07d0      	lsls	r0, r2, #31
 8009346:	d404      	bmi.n	8009352 <_fflush_r+0x32>
 8009348:	0599      	lsls	r1, r3, #22
 800934a:	d402      	bmi.n	8009352 <_fflush_r+0x32>
 800934c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800934e:	f7fd fb34 	bl	80069ba <__retarget_lock_acquire_recursive>
 8009352:	4628      	mov	r0, r5
 8009354:	4621      	mov	r1, r4
 8009356:	f7ff ff5d 	bl	8009214 <__sflush_r>
 800935a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800935c:	07da      	lsls	r2, r3, #31
 800935e:	4605      	mov	r5, r0
 8009360:	d4e4      	bmi.n	800932c <_fflush_r+0xc>
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	059b      	lsls	r3, r3, #22
 8009366:	d4e1      	bmi.n	800932c <_fflush_r+0xc>
 8009368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800936a:	f7fd fb27 	bl	80069bc <__retarget_lock_release_recursive>
 800936e:	e7dd      	b.n	800932c <_fflush_r+0xc>

08009370 <strncmp>:
 8009370:	b510      	push	{r4, lr}
 8009372:	b16a      	cbz	r2, 8009390 <strncmp+0x20>
 8009374:	3901      	subs	r1, #1
 8009376:	1884      	adds	r4, r0, r2
 8009378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800937c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009380:	429a      	cmp	r2, r3
 8009382:	d103      	bne.n	800938c <strncmp+0x1c>
 8009384:	42a0      	cmp	r0, r4
 8009386:	d001      	beq.n	800938c <strncmp+0x1c>
 8009388:	2a00      	cmp	r2, #0
 800938a:	d1f5      	bne.n	8009378 <strncmp+0x8>
 800938c:	1ad0      	subs	r0, r2, r3
 800938e:	bd10      	pop	{r4, pc}
 8009390:	4610      	mov	r0, r2
 8009392:	e7fc      	b.n	800938e <strncmp+0x1e>

08009394 <_sbrk_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d06      	ldr	r5, [pc, #24]	; (80093b0 <_sbrk_r+0x1c>)
 8009398:	2300      	movs	r3, #0
 800939a:	4604      	mov	r4, r0
 800939c:	4608      	mov	r0, r1
 800939e:	602b      	str	r3, [r5, #0]
 80093a0:	f7f9 faf0 	bl	8002984 <_sbrk>
 80093a4:	1c43      	adds	r3, r0, #1
 80093a6:	d102      	bne.n	80093ae <_sbrk_r+0x1a>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	b103      	cbz	r3, 80093ae <_sbrk_r+0x1a>
 80093ac:	6023      	str	r3, [r4, #0]
 80093ae:	bd38      	pop	{r3, r4, r5, pc}
 80093b0:	20000bc4 	.word	0x20000bc4
 80093b4:	00000000 	.word	0x00000000

080093b8 <nan>:
 80093b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80093c0 <nan+0x8>
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	00000000 	.word	0x00000000
 80093c4:	7ff80000 	.word	0x7ff80000

080093c8 <__assert_func>:
 80093c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093ca:	4614      	mov	r4, r2
 80093cc:	461a      	mov	r2, r3
 80093ce:	4b09      	ldr	r3, [pc, #36]	; (80093f4 <__assert_func+0x2c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4605      	mov	r5, r0
 80093d4:	68d8      	ldr	r0, [r3, #12]
 80093d6:	b14c      	cbz	r4, 80093ec <__assert_func+0x24>
 80093d8:	4b07      	ldr	r3, [pc, #28]	; (80093f8 <__assert_func+0x30>)
 80093da:	9100      	str	r1, [sp, #0]
 80093dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093e0:	4906      	ldr	r1, [pc, #24]	; (80093fc <__assert_func+0x34>)
 80093e2:	462b      	mov	r3, r5
 80093e4:	f000 fbca 	bl	8009b7c <fiprintf>
 80093e8:	f000 fbda 	bl	8009ba0 <abort>
 80093ec:	4b04      	ldr	r3, [pc, #16]	; (8009400 <__assert_func+0x38>)
 80093ee:	461c      	mov	r4, r3
 80093f0:	e7f3      	b.n	80093da <__assert_func+0x12>
 80093f2:	bf00      	nop
 80093f4:	20000078 	.word	0x20000078
 80093f8:	0800b99a 	.word	0x0800b99a
 80093fc:	0800b9a7 	.word	0x0800b9a7
 8009400:	0800b9d5 	.word	0x0800b9d5

08009404 <_calloc_r>:
 8009404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009406:	fba1 2402 	umull	r2, r4, r1, r2
 800940a:	b94c      	cbnz	r4, 8009420 <_calloc_r+0x1c>
 800940c:	4611      	mov	r1, r2
 800940e:	9201      	str	r2, [sp, #4]
 8009410:	f7fe f9d8 	bl	80077c4 <_malloc_r>
 8009414:	9a01      	ldr	r2, [sp, #4]
 8009416:	4605      	mov	r5, r0
 8009418:	b930      	cbnz	r0, 8009428 <_calloc_r+0x24>
 800941a:	4628      	mov	r0, r5
 800941c:	b003      	add	sp, #12
 800941e:	bd30      	pop	{r4, r5, pc}
 8009420:	220c      	movs	r2, #12
 8009422:	6002      	str	r2, [r0, #0]
 8009424:	2500      	movs	r5, #0
 8009426:	e7f8      	b.n	800941a <_calloc_r+0x16>
 8009428:	4621      	mov	r1, r4
 800942a:	f7fd fa48 	bl	80068be <memset>
 800942e:	e7f4      	b.n	800941a <_calloc_r+0x16>

08009430 <rshift>:
 8009430:	6903      	ldr	r3, [r0, #16]
 8009432:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009436:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800943a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800943e:	f100 0414 	add.w	r4, r0, #20
 8009442:	dd45      	ble.n	80094d0 <rshift+0xa0>
 8009444:	f011 011f 	ands.w	r1, r1, #31
 8009448:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800944c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009450:	d10c      	bne.n	800946c <rshift+0x3c>
 8009452:	f100 0710 	add.w	r7, r0, #16
 8009456:	4629      	mov	r1, r5
 8009458:	42b1      	cmp	r1, r6
 800945a:	d334      	bcc.n	80094c6 <rshift+0x96>
 800945c:	1a9b      	subs	r3, r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	1eea      	subs	r2, r5, #3
 8009462:	4296      	cmp	r6, r2
 8009464:	bf38      	it	cc
 8009466:	2300      	movcc	r3, #0
 8009468:	4423      	add	r3, r4
 800946a:	e015      	b.n	8009498 <rshift+0x68>
 800946c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009470:	f1c1 0820 	rsb	r8, r1, #32
 8009474:	40cf      	lsrs	r7, r1
 8009476:	f105 0e04 	add.w	lr, r5, #4
 800947a:	46a1      	mov	r9, r4
 800947c:	4576      	cmp	r6, lr
 800947e:	46f4      	mov	ip, lr
 8009480:	d815      	bhi.n	80094ae <rshift+0x7e>
 8009482:	1a9a      	subs	r2, r3, r2
 8009484:	0092      	lsls	r2, r2, #2
 8009486:	3a04      	subs	r2, #4
 8009488:	3501      	adds	r5, #1
 800948a:	42ae      	cmp	r6, r5
 800948c:	bf38      	it	cc
 800948e:	2200      	movcc	r2, #0
 8009490:	18a3      	adds	r3, r4, r2
 8009492:	50a7      	str	r7, [r4, r2]
 8009494:	b107      	cbz	r7, 8009498 <rshift+0x68>
 8009496:	3304      	adds	r3, #4
 8009498:	1b1a      	subs	r2, r3, r4
 800949a:	42a3      	cmp	r3, r4
 800949c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80094a0:	bf08      	it	eq
 80094a2:	2300      	moveq	r3, #0
 80094a4:	6102      	str	r2, [r0, #16]
 80094a6:	bf08      	it	eq
 80094a8:	6143      	streq	r3, [r0, #20]
 80094aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094ae:	f8dc c000 	ldr.w	ip, [ip]
 80094b2:	fa0c fc08 	lsl.w	ip, ip, r8
 80094b6:	ea4c 0707 	orr.w	r7, ip, r7
 80094ba:	f849 7b04 	str.w	r7, [r9], #4
 80094be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094c2:	40cf      	lsrs	r7, r1
 80094c4:	e7da      	b.n	800947c <rshift+0x4c>
 80094c6:	f851 cb04 	ldr.w	ip, [r1], #4
 80094ca:	f847 cf04 	str.w	ip, [r7, #4]!
 80094ce:	e7c3      	b.n	8009458 <rshift+0x28>
 80094d0:	4623      	mov	r3, r4
 80094d2:	e7e1      	b.n	8009498 <rshift+0x68>

080094d4 <__hexdig_fun>:
 80094d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80094d8:	2b09      	cmp	r3, #9
 80094da:	d802      	bhi.n	80094e2 <__hexdig_fun+0xe>
 80094dc:	3820      	subs	r0, #32
 80094de:	b2c0      	uxtb	r0, r0
 80094e0:	4770      	bx	lr
 80094e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80094e6:	2b05      	cmp	r3, #5
 80094e8:	d801      	bhi.n	80094ee <__hexdig_fun+0x1a>
 80094ea:	3847      	subs	r0, #71	; 0x47
 80094ec:	e7f7      	b.n	80094de <__hexdig_fun+0xa>
 80094ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80094f2:	2b05      	cmp	r3, #5
 80094f4:	d801      	bhi.n	80094fa <__hexdig_fun+0x26>
 80094f6:	3827      	subs	r0, #39	; 0x27
 80094f8:	e7f1      	b.n	80094de <__hexdig_fun+0xa>
 80094fa:	2000      	movs	r0, #0
 80094fc:	4770      	bx	lr
	...

08009500 <__gethex>:
 8009500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009504:	4617      	mov	r7, r2
 8009506:	680a      	ldr	r2, [r1, #0]
 8009508:	b085      	sub	sp, #20
 800950a:	f102 0b02 	add.w	fp, r2, #2
 800950e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009512:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009516:	4681      	mov	r9, r0
 8009518:	468a      	mov	sl, r1
 800951a:	9302      	str	r3, [sp, #8]
 800951c:	32fe      	adds	r2, #254	; 0xfe
 800951e:	eb02 030b 	add.w	r3, r2, fp
 8009522:	46d8      	mov	r8, fp
 8009524:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009528:	9301      	str	r3, [sp, #4]
 800952a:	2830      	cmp	r0, #48	; 0x30
 800952c:	d0f7      	beq.n	800951e <__gethex+0x1e>
 800952e:	f7ff ffd1 	bl	80094d4 <__hexdig_fun>
 8009532:	4604      	mov	r4, r0
 8009534:	2800      	cmp	r0, #0
 8009536:	d138      	bne.n	80095aa <__gethex+0xaa>
 8009538:	49a7      	ldr	r1, [pc, #668]	; (80097d8 <__gethex+0x2d8>)
 800953a:	2201      	movs	r2, #1
 800953c:	4640      	mov	r0, r8
 800953e:	f7ff ff17 	bl	8009370 <strncmp>
 8009542:	4606      	mov	r6, r0
 8009544:	2800      	cmp	r0, #0
 8009546:	d169      	bne.n	800961c <__gethex+0x11c>
 8009548:	f898 0001 	ldrb.w	r0, [r8, #1]
 800954c:	465d      	mov	r5, fp
 800954e:	f7ff ffc1 	bl	80094d4 <__hexdig_fun>
 8009552:	2800      	cmp	r0, #0
 8009554:	d064      	beq.n	8009620 <__gethex+0x120>
 8009556:	465a      	mov	r2, fp
 8009558:	7810      	ldrb	r0, [r2, #0]
 800955a:	2830      	cmp	r0, #48	; 0x30
 800955c:	4690      	mov	r8, r2
 800955e:	f102 0201 	add.w	r2, r2, #1
 8009562:	d0f9      	beq.n	8009558 <__gethex+0x58>
 8009564:	f7ff ffb6 	bl	80094d4 <__hexdig_fun>
 8009568:	2301      	movs	r3, #1
 800956a:	fab0 f480 	clz	r4, r0
 800956e:	0964      	lsrs	r4, r4, #5
 8009570:	465e      	mov	r6, fp
 8009572:	9301      	str	r3, [sp, #4]
 8009574:	4642      	mov	r2, r8
 8009576:	4615      	mov	r5, r2
 8009578:	3201      	adds	r2, #1
 800957a:	7828      	ldrb	r0, [r5, #0]
 800957c:	f7ff ffaa 	bl	80094d4 <__hexdig_fun>
 8009580:	2800      	cmp	r0, #0
 8009582:	d1f8      	bne.n	8009576 <__gethex+0x76>
 8009584:	4994      	ldr	r1, [pc, #592]	; (80097d8 <__gethex+0x2d8>)
 8009586:	2201      	movs	r2, #1
 8009588:	4628      	mov	r0, r5
 800958a:	f7ff fef1 	bl	8009370 <strncmp>
 800958e:	b978      	cbnz	r0, 80095b0 <__gethex+0xb0>
 8009590:	b946      	cbnz	r6, 80095a4 <__gethex+0xa4>
 8009592:	1c6e      	adds	r6, r5, #1
 8009594:	4632      	mov	r2, r6
 8009596:	4615      	mov	r5, r2
 8009598:	3201      	adds	r2, #1
 800959a:	7828      	ldrb	r0, [r5, #0]
 800959c:	f7ff ff9a 	bl	80094d4 <__hexdig_fun>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d1f8      	bne.n	8009596 <__gethex+0x96>
 80095a4:	1b73      	subs	r3, r6, r5
 80095a6:	009e      	lsls	r6, r3, #2
 80095a8:	e004      	b.n	80095b4 <__gethex+0xb4>
 80095aa:	2400      	movs	r4, #0
 80095ac:	4626      	mov	r6, r4
 80095ae:	e7e1      	b.n	8009574 <__gethex+0x74>
 80095b0:	2e00      	cmp	r6, #0
 80095b2:	d1f7      	bne.n	80095a4 <__gethex+0xa4>
 80095b4:	782b      	ldrb	r3, [r5, #0]
 80095b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095ba:	2b50      	cmp	r3, #80	; 0x50
 80095bc:	d13d      	bne.n	800963a <__gethex+0x13a>
 80095be:	786b      	ldrb	r3, [r5, #1]
 80095c0:	2b2b      	cmp	r3, #43	; 0x2b
 80095c2:	d02f      	beq.n	8009624 <__gethex+0x124>
 80095c4:	2b2d      	cmp	r3, #45	; 0x2d
 80095c6:	d031      	beq.n	800962c <__gethex+0x12c>
 80095c8:	1c69      	adds	r1, r5, #1
 80095ca:	f04f 0b00 	mov.w	fp, #0
 80095ce:	7808      	ldrb	r0, [r1, #0]
 80095d0:	f7ff ff80 	bl	80094d4 <__hexdig_fun>
 80095d4:	1e42      	subs	r2, r0, #1
 80095d6:	b2d2      	uxtb	r2, r2
 80095d8:	2a18      	cmp	r2, #24
 80095da:	d82e      	bhi.n	800963a <__gethex+0x13a>
 80095dc:	f1a0 0210 	sub.w	r2, r0, #16
 80095e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80095e4:	f7ff ff76 	bl	80094d4 <__hexdig_fun>
 80095e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80095ec:	fa5f fc8c 	uxtb.w	ip, ip
 80095f0:	f1bc 0f18 	cmp.w	ip, #24
 80095f4:	d91d      	bls.n	8009632 <__gethex+0x132>
 80095f6:	f1bb 0f00 	cmp.w	fp, #0
 80095fa:	d000      	beq.n	80095fe <__gethex+0xfe>
 80095fc:	4252      	negs	r2, r2
 80095fe:	4416      	add	r6, r2
 8009600:	f8ca 1000 	str.w	r1, [sl]
 8009604:	b1dc      	cbz	r4, 800963e <__gethex+0x13e>
 8009606:	9b01      	ldr	r3, [sp, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	bf14      	ite	ne
 800960c:	f04f 0800 	movne.w	r8, #0
 8009610:	f04f 0806 	moveq.w	r8, #6
 8009614:	4640      	mov	r0, r8
 8009616:	b005      	add	sp, #20
 8009618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961c:	4645      	mov	r5, r8
 800961e:	4626      	mov	r6, r4
 8009620:	2401      	movs	r4, #1
 8009622:	e7c7      	b.n	80095b4 <__gethex+0xb4>
 8009624:	f04f 0b00 	mov.w	fp, #0
 8009628:	1ca9      	adds	r1, r5, #2
 800962a:	e7d0      	b.n	80095ce <__gethex+0xce>
 800962c:	f04f 0b01 	mov.w	fp, #1
 8009630:	e7fa      	b.n	8009628 <__gethex+0x128>
 8009632:	230a      	movs	r3, #10
 8009634:	fb03 0002 	mla	r0, r3, r2, r0
 8009638:	e7d0      	b.n	80095dc <__gethex+0xdc>
 800963a:	4629      	mov	r1, r5
 800963c:	e7e0      	b.n	8009600 <__gethex+0x100>
 800963e:	eba5 0308 	sub.w	r3, r5, r8
 8009642:	3b01      	subs	r3, #1
 8009644:	4621      	mov	r1, r4
 8009646:	2b07      	cmp	r3, #7
 8009648:	dc0a      	bgt.n	8009660 <__gethex+0x160>
 800964a:	4648      	mov	r0, r9
 800964c:	f7fe f946 	bl	80078dc <_Balloc>
 8009650:	4604      	mov	r4, r0
 8009652:	b940      	cbnz	r0, 8009666 <__gethex+0x166>
 8009654:	4b61      	ldr	r3, [pc, #388]	; (80097dc <__gethex+0x2dc>)
 8009656:	4602      	mov	r2, r0
 8009658:	21e4      	movs	r1, #228	; 0xe4
 800965a:	4861      	ldr	r0, [pc, #388]	; (80097e0 <__gethex+0x2e0>)
 800965c:	f7ff feb4 	bl	80093c8 <__assert_func>
 8009660:	3101      	adds	r1, #1
 8009662:	105b      	asrs	r3, r3, #1
 8009664:	e7ef      	b.n	8009646 <__gethex+0x146>
 8009666:	f100 0a14 	add.w	sl, r0, #20
 800966a:	2300      	movs	r3, #0
 800966c:	495a      	ldr	r1, [pc, #360]	; (80097d8 <__gethex+0x2d8>)
 800966e:	f8cd a004 	str.w	sl, [sp, #4]
 8009672:	469b      	mov	fp, r3
 8009674:	45a8      	cmp	r8, r5
 8009676:	d342      	bcc.n	80096fe <__gethex+0x1fe>
 8009678:	9801      	ldr	r0, [sp, #4]
 800967a:	f840 bb04 	str.w	fp, [r0], #4
 800967e:	eba0 000a 	sub.w	r0, r0, sl
 8009682:	1080      	asrs	r0, r0, #2
 8009684:	6120      	str	r0, [r4, #16]
 8009686:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800968a:	4658      	mov	r0, fp
 800968c:	f7fe fa18 	bl	8007ac0 <__hi0bits>
 8009690:	683d      	ldr	r5, [r7, #0]
 8009692:	eba8 0000 	sub.w	r0, r8, r0
 8009696:	42a8      	cmp	r0, r5
 8009698:	dd59      	ble.n	800974e <__gethex+0x24e>
 800969a:	eba0 0805 	sub.w	r8, r0, r5
 800969e:	4641      	mov	r1, r8
 80096a0:	4620      	mov	r0, r4
 80096a2:	f7fe fda7 	bl	80081f4 <__any_on>
 80096a6:	4683      	mov	fp, r0
 80096a8:	b1b8      	cbz	r0, 80096da <__gethex+0x1da>
 80096aa:	f108 33ff 	add.w	r3, r8, #4294967295
 80096ae:	1159      	asrs	r1, r3, #5
 80096b0:	f003 021f 	and.w	r2, r3, #31
 80096b4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80096b8:	f04f 0b01 	mov.w	fp, #1
 80096bc:	fa0b f202 	lsl.w	r2, fp, r2
 80096c0:	420a      	tst	r2, r1
 80096c2:	d00a      	beq.n	80096da <__gethex+0x1da>
 80096c4:	455b      	cmp	r3, fp
 80096c6:	dd06      	ble.n	80096d6 <__gethex+0x1d6>
 80096c8:	f1a8 0102 	sub.w	r1, r8, #2
 80096cc:	4620      	mov	r0, r4
 80096ce:	f7fe fd91 	bl	80081f4 <__any_on>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d138      	bne.n	8009748 <__gethex+0x248>
 80096d6:	f04f 0b02 	mov.w	fp, #2
 80096da:	4641      	mov	r1, r8
 80096dc:	4620      	mov	r0, r4
 80096de:	f7ff fea7 	bl	8009430 <rshift>
 80096e2:	4446      	add	r6, r8
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	42b3      	cmp	r3, r6
 80096e8:	da41      	bge.n	800976e <__gethex+0x26e>
 80096ea:	4621      	mov	r1, r4
 80096ec:	4648      	mov	r0, r9
 80096ee:	f7fe f935 	bl	800795c <_Bfree>
 80096f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096f4:	2300      	movs	r3, #0
 80096f6:	6013      	str	r3, [r2, #0]
 80096f8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80096fc:	e78a      	b.n	8009614 <__gethex+0x114>
 80096fe:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009702:	2a2e      	cmp	r2, #46	; 0x2e
 8009704:	d014      	beq.n	8009730 <__gethex+0x230>
 8009706:	2b20      	cmp	r3, #32
 8009708:	d106      	bne.n	8009718 <__gethex+0x218>
 800970a:	9b01      	ldr	r3, [sp, #4]
 800970c:	f843 bb04 	str.w	fp, [r3], #4
 8009710:	f04f 0b00 	mov.w	fp, #0
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	465b      	mov	r3, fp
 8009718:	7828      	ldrb	r0, [r5, #0]
 800971a:	9303      	str	r3, [sp, #12]
 800971c:	f7ff feda 	bl	80094d4 <__hexdig_fun>
 8009720:	9b03      	ldr	r3, [sp, #12]
 8009722:	f000 000f 	and.w	r0, r0, #15
 8009726:	4098      	lsls	r0, r3
 8009728:	ea4b 0b00 	orr.w	fp, fp, r0
 800972c:	3304      	adds	r3, #4
 800972e:	e7a1      	b.n	8009674 <__gethex+0x174>
 8009730:	45a8      	cmp	r8, r5
 8009732:	d8e8      	bhi.n	8009706 <__gethex+0x206>
 8009734:	2201      	movs	r2, #1
 8009736:	4628      	mov	r0, r5
 8009738:	9303      	str	r3, [sp, #12]
 800973a:	f7ff fe19 	bl	8009370 <strncmp>
 800973e:	4926      	ldr	r1, [pc, #152]	; (80097d8 <__gethex+0x2d8>)
 8009740:	9b03      	ldr	r3, [sp, #12]
 8009742:	2800      	cmp	r0, #0
 8009744:	d1df      	bne.n	8009706 <__gethex+0x206>
 8009746:	e795      	b.n	8009674 <__gethex+0x174>
 8009748:	f04f 0b03 	mov.w	fp, #3
 800974c:	e7c5      	b.n	80096da <__gethex+0x1da>
 800974e:	da0b      	bge.n	8009768 <__gethex+0x268>
 8009750:	eba5 0800 	sub.w	r8, r5, r0
 8009754:	4621      	mov	r1, r4
 8009756:	4642      	mov	r2, r8
 8009758:	4648      	mov	r0, r9
 800975a:	f7fe fb19 	bl	8007d90 <__lshift>
 800975e:	eba6 0608 	sub.w	r6, r6, r8
 8009762:	4604      	mov	r4, r0
 8009764:	f100 0a14 	add.w	sl, r0, #20
 8009768:	f04f 0b00 	mov.w	fp, #0
 800976c:	e7ba      	b.n	80096e4 <__gethex+0x1e4>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	42b3      	cmp	r3, r6
 8009772:	dd73      	ble.n	800985c <__gethex+0x35c>
 8009774:	1b9e      	subs	r6, r3, r6
 8009776:	42b5      	cmp	r5, r6
 8009778:	dc34      	bgt.n	80097e4 <__gethex+0x2e4>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b02      	cmp	r3, #2
 800977e:	d023      	beq.n	80097c8 <__gethex+0x2c8>
 8009780:	2b03      	cmp	r3, #3
 8009782:	d025      	beq.n	80097d0 <__gethex+0x2d0>
 8009784:	2b01      	cmp	r3, #1
 8009786:	d115      	bne.n	80097b4 <__gethex+0x2b4>
 8009788:	42b5      	cmp	r5, r6
 800978a:	d113      	bne.n	80097b4 <__gethex+0x2b4>
 800978c:	2d01      	cmp	r5, #1
 800978e:	d10b      	bne.n	80097a8 <__gethex+0x2a8>
 8009790:	9a02      	ldr	r2, [sp, #8]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	2301      	movs	r3, #1
 8009798:	6123      	str	r3, [r4, #16]
 800979a:	f8ca 3000 	str.w	r3, [sl]
 800979e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097a0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80097a4:	601c      	str	r4, [r3, #0]
 80097a6:	e735      	b.n	8009614 <__gethex+0x114>
 80097a8:	1e69      	subs	r1, r5, #1
 80097aa:	4620      	mov	r0, r4
 80097ac:	f7fe fd22 	bl	80081f4 <__any_on>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d1ed      	bne.n	8009790 <__gethex+0x290>
 80097b4:	4621      	mov	r1, r4
 80097b6:	4648      	mov	r0, r9
 80097b8:	f7fe f8d0 	bl	800795c <_Bfree>
 80097bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097be:	2300      	movs	r3, #0
 80097c0:	6013      	str	r3, [r2, #0]
 80097c2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80097c6:	e725      	b.n	8009614 <__gethex+0x114>
 80097c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1f2      	bne.n	80097b4 <__gethex+0x2b4>
 80097ce:	e7df      	b.n	8009790 <__gethex+0x290>
 80097d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1dc      	bne.n	8009790 <__gethex+0x290>
 80097d6:	e7ed      	b.n	80097b4 <__gethex+0x2b4>
 80097d8:	0800b82c 	.word	0x0800b82c
 80097dc:	0800b6c1 	.word	0x0800b6c1
 80097e0:	0800b9d6 	.word	0x0800b9d6
 80097e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80097e8:	f1bb 0f00 	cmp.w	fp, #0
 80097ec:	d133      	bne.n	8009856 <__gethex+0x356>
 80097ee:	f1b8 0f00 	cmp.w	r8, #0
 80097f2:	d004      	beq.n	80097fe <__gethex+0x2fe>
 80097f4:	4641      	mov	r1, r8
 80097f6:	4620      	mov	r0, r4
 80097f8:	f7fe fcfc 	bl	80081f4 <__any_on>
 80097fc:	4683      	mov	fp, r0
 80097fe:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009802:	2301      	movs	r3, #1
 8009804:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009808:	f008 081f 	and.w	r8, r8, #31
 800980c:	fa03 f308 	lsl.w	r3, r3, r8
 8009810:	4213      	tst	r3, r2
 8009812:	4631      	mov	r1, r6
 8009814:	4620      	mov	r0, r4
 8009816:	bf18      	it	ne
 8009818:	f04b 0b02 	orrne.w	fp, fp, #2
 800981c:	1bad      	subs	r5, r5, r6
 800981e:	f7ff fe07 	bl	8009430 <rshift>
 8009822:	687e      	ldr	r6, [r7, #4]
 8009824:	f04f 0802 	mov.w	r8, #2
 8009828:	f1bb 0f00 	cmp.w	fp, #0
 800982c:	d04a      	beq.n	80098c4 <__gethex+0x3c4>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2b02      	cmp	r3, #2
 8009832:	d016      	beq.n	8009862 <__gethex+0x362>
 8009834:	2b03      	cmp	r3, #3
 8009836:	d018      	beq.n	800986a <__gethex+0x36a>
 8009838:	2b01      	cmp	r3, #1
 800983a:	d109      	bne.n	8009850 <__gethex+0x350>
 800983c:	f01b 0f02 	tst.w	fp, #2
 8009840:	d006      	beq.n	8009850 <__gethex+0x350>
 8009842:	f8da 3000 	ldr.w	r3, [sl]
 8009846:	ea4b 0b03 	orr.w	fp, fp, r3
 800984a:	f01b 0f01 	tst.w	fp, #1
 800984e:	d10f      	bne.n	8009870 <__gethex+0x370>
 8009850:	f048 0810 	orr.w	r8, r8, #16
 8009854:	e036      	b.n	80098c4 <__gethex+0x3c4>
 8009856:	f04f 0b01 	mov.w	fp, #1
 800985a:	e7d0      	b.n	80097fe <__gethex+0x2fe>
 800985c:	f04f 0801 	mov.w	r8, #1
 8009860:	e7e2      	b.n	8009828 <__gethex+0x328>
 8009862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009864:	f1c3 0301 	rsb	r3, r3, #1
 8009868:	930f      	str	r3, [sp, #60]	; 0x3c
 800986a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800986c:	2b00      	cmp	r3, #0
 800986e:	d0ef      	beq.n	8009850 <__gethex+0x350>
 8009870:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009874:	f104 0214 	add.w	r2, r4, #20
 8009878:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800987c:	9301      	str	r3, [sp, #4]
 800987e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009882:	2300      	movs	r3, #0
 8009884:	4694      	mov	ip, r2
 8009886:	f852 1b04 	ldr.w	r1, [r2], #4
 800988a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800988e:	d01e      	beq.n	80098ce <__gethex+0x3ce>
 8009890:	3101      	adds	r1, #1
 8009892:	f8cc 1000 	str.w	r1, [ip]
 8009896:	f1b8 0f02 	cmp.w	r8, #2
 800989a:	f104 0214 	add.w	r2, r4, #20
 800989e:	d13d      	bne.n	800991c <__gethex+0x41c>
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	3b01      	subs	r3, #1
 80098a4:	42ab      	cmp	r3, r5
 80098a6:	d10b      	bne.n	80098c0 <__gethex+0x3c0>
 80098a8:	1169      	asrs	r1, r5, #5
 80098aa:	2301      	movs	r3, #1
 80098ac:	f005 051f 	and.w	r5, r5, #31
 80098b0:	fa03 f505 	lsl.w	r5, r3, r5
 80098b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098b8:	421d      	tst	r5, r3
 80098ba:	bf18      	it	ne
 80098bc:	f04f 0801 	movne.w	r8, #1
 80098c0:	f048 0820 	orr.w	r8, r8, #32
 80098c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098c6:	601c      	str	r4, [r3, #0]
 80098c8:	9b02      	ldr	r3, [sp, #8]
 80098ca:	601e      	str	r6, [r3, #0]
 80098cc:	e6a2      	b.n	8009614 <__gethex+0x114>
 80098ce:	4290      	cmp	r0, r2
 80098d0:	f842 3c04 	str.w	r3, [r2, #-4]
 80098d4:	d8d6      	bhi.n	8009884 <__gethex+0x384>
 80098d6:	68a2      	ldr	r2, [r4, #8]
 80098d8:	4593      	cmp	fp, r2
 80098da:	db17      	blt.n	800990c <__gethex+0x40c>
 80098dc:	6861      	ldr	r1, [r4, #4]
 80098de:	4648      	mov	r0, r9
 80098e0:	3101      	adds	r1, #1
 80098e2:	f7fd fffb 	bl	80078dc <_Balloc>
 80098e6:	4682      	mov	sl, r0
 80098e8:	b918      	cbnz	r0, 80098f2 <__gethex+0x3f2>
 80098ea:	4b1b      	ldr	r3, [pc, #108]	; (8009958 <__gethex+0x458>)
 80098ec:	4602      	mov	r2, r0
 80098ee:	2184      	movs	r1, #132	; 0x84
 80098f0:	e6b3      	b.n	800965a <__gethex+0x15a>
 80098f2:	6922      	ldr	r2, [r4, #16]
 80098f4:	3202      	adds	r2, #2
 80098f6:	f104 010c 	add.w	r1, r4, #12
 80098fa:	0092      	lsls	r2, r2, #2
 80098fc:	300c      	adds	r0, #12
 80098fe:	f7fd f85e 	bl	80069be <memcpy>
 8009902:	4621      	mov	r1, r4
 8009904:	4648      	mov	r0, r9
 8009906:	f7fe f829 	bl	800795c <_Bfree>
 800990a:	4654      	mov	r4, sl
 800990c:	6922      	ldr	r2, [r4, #16]
 800990e:	1c51      	adds	r1, r2, #1
 8009910:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009914:	6121      	str	r1, [r4, #16]
 8009916:	2101      	movs	r1, #1
 8009918:	6151      	str	r1, [r2, #20]
 800991a:	e7bc      	b.n	8009896 <__gethex+0x396>
 800991c:	6921      	ldr	r1, [r4, #16]
 800991e:	4559      	cmp	r1, fp
 8009920:	dd0b      	ble.n	800993a <__gethex+0x43a>
 8009922:	2101      	movs	r1, #1
 8009924:	4620      	mov	r0, r4
 8009926:	f7ff fd83 	bl	8009430 <rshift>
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	3601      	adds	r6, #1
 800992e:	42b3      	cmp	r3, r6
 8009930:	f6ff aedb 	blt.w	80096ea <__gethex+0x1ea>
 8009934:	f04f 0801 	mov.w	r8, #1
 8009938:	e7c2      	b.n	80098c0 <__gethex+0x3c0>
 800993a:	f015 051f 	ands.w	r5, r5, #31
 800993e:	d0f9      	beq.n	8009934 <__gethex+0x434>
 8009940:	9b01      	ldr	r3, [sp, #4]
 8009942:	441a      	add	r2, r3
 8009944:	f1c5 0520 	rsb	r5, r5, #32
 8009948:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800994c:	f7fe f8b8 	bl	8007ac0 <__hi0bits>
 8009950:	42a8      	cmp	r0, r5
 8009952:	dbe6      	blt.n	8009922 <__gethex+0x422>
 8009954:	e7ee      	b.n	8009934 <__gethex+0x434>
 8009956:	bf00      	nop
 8009958:	0800b6c1 	.word	0x0800b6c1

0800995c <L_shift>:
 800995c:	f1c2 0208 	rsb	r2, r2, #8
 8009960:	0092      	lsls	r2, r2, #2
 8009962:	b570      	push	{r4, r5, r6, lr}
 8009964:	f1c2 0620 	rsb	r6, r2, #32
 8009968:	6843      	ldr	r3, [r0, #4]
 800996a:	6804      	ldr	r4, [r0, #0]
 800996c:	fa03 f506 	lsl.w	r5, r3, r6
 8009970:	432c      	orrs	r4, r5
 8009972:	40d3      	lsrs	r3, r2
 8009974:	6004      	str	r4, [r0, #0]
 8009976:	f840 3f04 	str.w	r3, [r0, #4]!
 800997a:	4288      	cmp	r0, r1
 800997c:	d3f4      	bcc.n	8009968 <L_shift+0xc>
 800997e:	bd70      	pop	{r4, r5, r6, pc}

08009980 <__match>:
 8009980:	b530      	push	{r4, r5, lr}
 8009982:	6803      	ldr	r3, [r0, #0]
 8009984:	3301      	adds	r3, #1
 8009986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800998a:	b914      	cbnz	r4, 8009992 <__match+0x12>
 800998c:	6003      	str	r3, [r0, #0]
 800998e:	2001      	movs	r0, #1
 8009990:	bd30      	pop	{r4, r5, pc}
 8009992:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009996:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800999a:	2d19      	cmp	r5, #25
 800999c:	bf98      	it	ls
 800999e:	3220      	addls	r2, #32
 80099a0:	42a2      	cmp	r2, r4
 80099a2:	d0f0      	beq.n	8009986 <__match+0x6>
 80099a4:	2000      	movs	r0, #0
 80099a6:	e7f3      	b.n	8009990 <__match+0x10>

080099a8 <__hexnan>:
 80099a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ac:	680b      	ldr	r3, [r1, #0]
 80099ae:	6801      	ldr	r1, [r0, #0]
 80099b0:	115e      	asrs	r6, r3, #5
 80099b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80099b6:	f013 031f 	ands.w	r3, r3, #31
 80099ba:	b087      	sub	sp, #28
 80099bc:	bf18      	it	ne
 80099be:	3604      	addne	r6, #4
 80099c0:	2500      	movs	r5, #0
 80099c2:	1f37      	subs	r7, r6, #4
 80099c4:	4682      	mov	sl, r0
 80099c6:	4690      	mov	r8, r2
 80099c8:	9301      	str	r3, [sp, #4]
 80099ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80099ce:	46b9      	mov	r9, r7
 80099d0:	463c      	mov	r4, r7
 80099d2:	9502      	str	r5, [sp, #8]
 80099d4:	46ab      	mov	fp, r5
 80099d6:	784a      	ldrb	r2, [r1, #1]
 80099d8:	1c4b      	adds	r3, r1, #1
 80099da:	9303      	str	r3, [sp, #12]
 80099dc:	b342      	cbz	r2, 8009a30 <__hexnan+0x88>
 80099de:	4610      	mov	r0, r2
 80099e0:	9105      	str	r1, [sp, #20]
 80099e2:	9204      	str	r2, [sp, #16]
 80099e4:	f7ff fd76 	bl	80094d4 <__hexdig_fun>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d14f      	bne.n	8009a8c <__hexnan+0xe4>
 80099ec:	9a04      	ldr	r2, [sp, #16]
 80099ee:	9905      	ldr	r1, [sp, #20]
 80099f0:	2a20      	cmp	r2, #32
 80099f2:	d818      	bhi.n	8009a26 <__hexnan+0x7e>
 80099f4:	9b02      	ldr	r3, [sp, #8]
 80099f6:	459b      	cmp	fp, r3
 80099f8:	dd13      	ble.n	8009a22 <__hexnan+0x7a>
 80099fa:	454c      	cmp	r4, r9
 80099fc:	d206      	bcs.n	8009a0c <__hexnan+0x64>
 80099fe:	2d07      	cmp	r5, #7
 8009a00:	dc04      	bgt.n	8009a0c <__hexnan+0x64>
 8009a02:	462a      	mov	r2, r5
 8009a04:	4649      	mov	r1, r9
 8009a06:	4620      	mov	r0, r4
 8009a08:	f7ff ffa8 	bl	800995c <L_shift>
 8009a0c:	4544      	cmp	r4, r8
 8009a0e:	d950      	bls.n	8009ab2 <__hexnan+0x10a>
 8009a10:	2300      	movs	r3, #0
 8009a12:	f1a4 0904 	sub.w	r9, r4, #4
 8009a16:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a1a:	f8cd b008 	str.w	fp, [sp, #8]
 8009a1e:	464c      	mov	r4, r9
 8009a20:	461d      	mov	r5, r3
 8009a22:	9903      	ldr	r1, [sp, #12]
 8009a24:	e7d7      	b.n	80099d6 <__hexnan+0x2e>
 8009a26:	2a29      	cmp	r2, #41	; 0x29
 8009a28:	d155      	bne.n	8009ad6 <__hexnan+0x12e>
 8009a2a:	3102      	adds	r1, #2
 8009a2c:	f8ca 1000 	str.w	r1, [sl]
 8009a30:	f1bb 0f00 	cmp.w	fp, #0
 8009a34:	d04f      	beq.n	8009ad6 <__hexnan+0x12e>
 8009a36:	454c      	cmp	r4, r9
 8009a38:	d206      	bcs.n	8009a48 <__hexnan+0xa0>
 8009a3a:	2d07      	cmp	r5, #7
 8009a3c:	dc04      	bgt.n	8009a48 <__hexnan+0xa0>
 8009a3e:	462a      	mov	r2, r5
 8009a40:	4649      	mov	r1, r9
 8009a42:	4620      	mov	r0, r4
 8009a44:	f7ff ff8a 	bl	800995c <L_shift>
 8009a48:	4544      	cmp	r4, r8
 8009a4a:	d934      	bls.n	8009ab6 <__hexnan+0x10e>
 8009a4c:	f1a8 0204 	sub.w	r2, r8, #4
 8009a50:	4623      	mov	r3, r4
 8009a52:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a56:	f842 1f04 	str.w	r1, [r2, #4]!
 8009a5a:	429f      	cmp	r7, r3
 8009a5c:	d2f9      	bcs.n	8009a52 <__hexnan+0xaa>
 8009a5e:	1b3b      	subs	r3, r7, r4
 8009a60:	f023 0303 	bic.w	r3, r3, #3
 8009a64:	3304      	adds	r3, #4
 8009a66:	3e03      	subs	r6, #3
 8009a68:	3401      	adds	r4, #1
 8009a6a:	42a6      	cmp	r6, r4
 8009a6c:	bf38      	it	cc
 8009a6e:	2304      	movcc	r3, #4
 8009a70:	4443      	add	r3, r8
 8009a72:	2200      	movs	r2, #0
 8009a74:	f843 2b04 	str.w	r2, [r3], #4
 8009a78:	429f      	cmp	r7, r3
 8009a7a:	d2fb      	bcs.n	8009a74 <__hexnan+0xcc>
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	b91b      	cbnz	r3, 8009a88 <__hexnan+0xe0>
 8009a80:	4547      	cmp	r7, r8
 8009a82:	d126      	bne.n	8009ad2 <__hexnan+0x12a>
 8009a84:	2301      	movs	r3, #1
 8009a86:	603b      	str	r3, [r7, #0]
 8009a88:	2005      	movs	r0, #5
 8009a8a:	e025      	b.n	8009ad8 <__hexnan+0x130>
 8009a8c:	3501      	adds	r5, #1
 8009a8e:	2d08      	cmp	r5, #8
 8009a90:	f10b 0b01 	add.w	fp, fp, #1
 8009a94:	dd06      	ble.n	8009aa4 <__hexnan+0xfc>
 8009a96:	4544      	cmp	r4, r8
 8009a98:	d9c3      	bls.n	8009a22 <__hexnan+0x7a>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009aa0:	2501      	movs	r5, #1
 8009aa2:	3c04      	subs	r4, #4
 8009aa4:	6822      	ldr	r2, [r4, #0]
 8009aa6:	f000 000f 	and.w	r0, r0, #15
 8009aaa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009aae:	6020      	str	r0, [r4, #0]
 8009ab0:	e7b7      	b.n	8009a22 <__hexnan+0x7a>
 8009ab2:	2508      	movs	r5, #8
 8009ab4:	e7b5      	b.n	8009a22 <__hexnan+0x7a>
 8009ab6:	9b01      	ldr	r3, [sp, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d0df      	beq.n	8009a7c <__hexnan+0xd4>
 8009abc:	f1c3 0320 	rsb	r3, r3, #32
 8009ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac4:	40da      	lsrs	r2, r3
 8009ac6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009aca:	4013      	ands	r3, r2
 8009acc:	f846 3c04 	str.w	r3, [r6, #-4]
 8009ad0:	e7d4      	b.n	8009a7c <__hexnan+0xd4>
 8009ad2:	3f04      	subs	r7, #4
 8009ad4:	e7d2      	b.n	8009a7c <__hexnan+0xd4>
 8009ad6:	2004      	movs	r0, #4
 8009ad8:	b007      	add	sp, #28
 8009ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ade <__ascii_mbtowc>:
 8009ade:	b082      	sub	sp, #8
 8009ae0:	b901      	cbnz	r1, 8009ae4 <__ascii_mbtowc+0x6>
 8009ae2:	a901      	add	r1, sp, #4
 8009ae4:	b142      	cbz	r2, 8009af8 <__ascii_mbtowc+0x1a>
 8009ae6:	b14b      	cbz	r3, 8009afc <__ascii_mbtowc+0x1e>
 8009ae8:	7813      	ldrb	r3, [r2, #0]
 8009aea:	600b      	str	r3, [r1, #0]
 8009aec:	7812      	ldrb	r2, [r2, #0]
 8009aee:	1e10      	subs	r0, r2, #0
 8009af0:	bf18      	it	ne
 8009af2:	2001      	movne	r0, #1
 8009af4:	b002      	add	sp, #8
 8009af6:	4770      	bx	lr
 8009af8:	4610      	mov	r0, r2
 8009afa:	e7fb      	b.n	8009af4 <__ascii_mbtowc+0x16>
 8009afc:	f06f 0001 	mvn.w	r0, #1
 8009b00:	e7f8      	b.n	8009af4 <__ascii_mbtowc+0x16>

08009b02 <_realloc_r>:
 8009b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b06:	4680      	mov	r8, r0
 8009b08:	4614      	mov	r4, r2
 8009b0a:	460e      	mov	r6, r1
 8009b0c:	b921      	cbnz	r1, 8009b18 <_realloc_r+0x16>
 8009b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b12:	4611      	mov	r1, r2
 8009b14:	f7fd be56 	b.w	80077c4 <_malloc_r>
 8009b18:	b92a      	cbnz	r2, 8009b26 <_realloc_r+0x24>
 8009b1a:	f7fd fddf 	bl	80076dc <_free_r>
 8009b1e:	4625      	mov	r5, r4
 8009b20:	4628      	mov	r0, r5
 8009b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b26:	f000 f842 	bl	8009bae <_malloc_usable_size_r>
 8009b2a:	4284      	cmp	r4, r0
 8009b2c:	4607      	mov	r7, r0
 8009b2e:	d802      	bhi.n	8009b36 <_realloc_r+0x34>
 8009b30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b34:	d812      	bhi.n	8009b5c <_realloc_r+0x5a>
 8009b36:	4621      	mov	r1, r4
 8009b38:	4640      	mov	r0, r8
 8009b3a:	f7fd fe43 	bl	80077c4 <_malloc_r>
 8009b3e:	4605      	mov	r5, r0
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d0ed      	beq.n	8009b20 <_realloc_r+0x1e>
 8009b44:	42bc      	cmp	r4, r7
 8009b46:	4622      	mov	r2, r4
 8009b48:	4631      	mov	r1, r6
 8009b4a:	bf28      	it	cs
 8009b4c:	463a      	movcs	r2, r7
 8009b4e:	f7fc ff36 	bl	80069be <memcpy>
 8009b52:	4631      	mov	r1, r6
 8009b54:	4640      	mov	r0, r8
 8009b56:	f7fd fdc1 	bl	80076dc <_free_r>
 8009b5a:	e7e1      	b.n	8009b20 <_realloc_r+0x1e>
 8009b5c:	4635      	mov	r5, r6
 8009b5e:	e7df      	b.n	8009b20 <_realloc_r+0x1e>

08009b60 <__ascii_wctomb>:
 8009b60:	b149      	cbz	r1, 8009b76 <__ascii_wctomb+0x16>
 8009b62:	2aff      	cmp	r2, #255	; 0xff
 8009b64:	bf85      	ittet	hi
 8009b66:	238a      	movhi	r3, #138	; 0x8a
 8009b68:	6003      	strhi	r3, [r0, #0]
 8009b6a:	700a      	strbls	r2, [r1, #0]
 8009b6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b70:	bf98      	it	ls
 8009b72:	2001      	movls	r0, #1
 8009b74:	4770      	bx	lr
 8009b76:	4608      	mov	r0, r1
 8009b78:	4770      	bx	lr
	...

08009b7c <fiprintf>:
 8009b7c:	b40e      	push	{r1, r2, r3}
 8009b7e:	b503      	push	{r0, r1, lr}
 8009b80:	4601      	mov	r1, r0
 8009b82:	ab03      	add	r3, sp, #12
 8009b84:	4805      	ldr	r0, [pc, #20]	; (8009b9c <fiprintf+0x20>)
 8009b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b8a:	6800      	ldr	r0, [r0, #0]
 8009b8c:	9301      	str	r3, [sp, #4]
 8009b8e:	f000 f83f 	bl	8009c10 <_vfiprintf_r>
 8009b92:	b002      	add	sp, #8
 8009b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b98:	b003      	add	sp, #12
 8009b9a:	4770      	bx	lr
 8009b9c:	20000078 	.word	0x20000078

08009ba0 <abort>:
 8009ba0:	b508      	push	{r3, lr}
 8009ba2:	2006      	movs	r0, #6
 8009ba4:	f000 fa0c 	bl	8009fc0 <raise>
 8009ba8:	2001      	movs	r0, #1
 8009baa:	f7f8 fe73 	bl	8002894 <_exit>

08009bae <_malloc_usable_size_r>:
 8009bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bb2:	1f18      	subs	r0, r3, #4
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	bfbc      	itt	lt
 8009bb8:	580b      	ldrlt	r3, [r1, r0]
 8009bba:	18c0      	addlt	r0, r0, r3
 8009bbc:	4770      	bx	lr

08009bbe <__sfputc_r>:
 8009bbe:	6893      	ldr	r3, [r2, #8]
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	b410      	push	{r4}
 8009bc6:	6093      	str	r3, [r2, #8]
 8009bc8:	da08      	bge.n	8009bdc <__sfputc_r+0x1e>
 8009bca:	6994      	ldr	r4, [r2, #24]
 8009bcc:	42a3      	cmp	r3, r4
 8009bce:	db01      	blt.n	8009bd4 <__sfputc_r+0x16>
 8009bd0:	290a      	cmp	r1, #10
 8009bd2:	d103      	bne.n	8009bdc <__sfputc_r+0x1e>
 8009bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bd8:	f000 b934 	b.w	8009e44 <__swbuf_r>
 8009bdc:	6813      	ldr	r3, [r2, #0]
 8009bde:	1c58      	adds	r0, r3, #1
 8009be0:	6010      	str	r0, [r2, #0]
 8009be2:	7019      	strb	r1, [r3, #0]
 8009be4:	4608      	mov	r0, r1
 8009be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <__sfputs_r>:
 8009bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bee:	4606      	mov	r6, r0
 8009bf0:	460f      	mov	r7, r1
 8009bf2:	4614      	mov	r4, r2
 8009bf4:	18d5      	adds	r5, r2, r3
 8009bf6:	42ac      	cmp	r4, r5
 8009bf8:	d101      	bne.n	8009bfe <__sfputs_r+0x12>
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	e007      	b.n	8009c0e <__sfputs_r+0x22>
 8009bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c02:	463a      	mov	r2, r7
 8009c04:	4630      	mov	r0, r6
 8009c06:	f7ff ffda 	bl	8009bbe <__sfputc_r>
 8009c0a:	1c43      	adds	r3, r0, #1
 8009c0c:	d1f3      	bne.n	8009bf6 <__sfputs_r+0xa>
 8009c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c10 <_vfiprintf_r>:
 8009c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c14:	460d      	mov	r5, r1
 8009c16:	b09d      	sub	sp, #116	; 0x74
 8009c18:	4614      	mov	r4, r2
 8009c1a:	4698      	mov	r8, r3
 8009c1c:	4606      	mov	r6, r0
 8009c1e:	b118      	cbz	r0, 8009c28 <_vfiprintf_r+0x18>
 8009c20:	6a03      	ldr	r3, [r0, #32]
 8009c22:	b90b      	cbnz	r3, 8009c28 <_vfiprintf_r+0x18>
 8009c24:	f7fc fd64 	bl	80066f0 <__sinit>
 8009c28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c2a:	07d9      	lsls	r1, r3, #31
 8009c2c:	d405      	bmi.n	8009c3a <_vfiprintf_r+0x2a>
 8009c2e:	89ab      	ldrh	r3, [r5, #12]
 8009c30:	059a      	lsls	r2, r3, #22
 8009c32:	d402      	bmi.n	8009c3a <_vfiprintf_r+0x2a>
 8009c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c36:	f7fc fec0 	bl	80069ba <__retarget_lock_acquire_recursive>
 8009c3a:	89ab      	ldrh	r3, [r5, #12]
 8009c3c:	071b      	lsls	r3, r3, #28
 8009c3e:	d501      	bpl.n	8009c44 <_vfiprintf_r+0x34>
 8009c40:	692b      	ldr	r3, [r5, #16]
 8009c42:	b99b      	cbnz	r3, 8009c6c <_vfiprintf_r+0x5c>
 8009c44:	4629      	mov	r1, r5
 8009c46:	4630      	mov	r0, r6
 8009c48:	f000 f93a 	bl	8009ec0 <__swsetup_r>
 8009c4c:	b170      	cbz	r0, 8009c6c <_vfiprintf_r+0x5c>
 8009c4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c50:	07dc      	lsls	r4, r3, #31
 8009c52:	d504      	bpl.n	8009c5e <_vfiprintf_r+0x4e>
 8009c54:	f04f 30ff 	mov.w	r0, #4294967295
 8009c58:	b01d      	add	sp, #116	; 0x74
 8009c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c5e:	89ab      	ldrh	r3, [r5, #12]
 8009c60:	0598      	lsls	r0, r3, #22
 8009c62:	d4f7      	bmi.n	8009c54 <_vfiprintf_r+0x44>
 8009c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c66:	f7fc fea9 	bl	80069bc <__retarget_lock_release_recursive>
 8009c6a:	e7f3      	b.n	8009c54 <_vfiprintf_r+0x44>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c70:	2320      	movs	r3, #32
 8009c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c7a:	2330      	movs	r3, #48	; 0x30
 8009c7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009e30 <_vfiprintf_r+0x220>
 8009c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c84:	f04f 0901 	mov.w	r9, #1
 8009c88:	4623      	mov	r3, r4
 8009c8a:	469a      	mov	sl, r3
 8009c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c90:	b10a      	cbz	r2, 8009c96 <_vfiprintf_r+0x86>
 8009c92:	2a25      	cmp	r2, #37	; 0x25
 8009c94:	d1f9      	bne.n	8009c8a <_vfiprintf_r+0x7a>
 8009c96:	ebba 0b04 	subs.w	fp, sl, r4
 8009c9a:	d00b      	beq.n	8009cb4 <_vfiprintf_r+0xa4>
 8009c9c:	465b      	mov	r3, fp
 8009c9e:	4622      	mov	r2, r4
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f7ff ffa2 	bl	8009bec <__sfputs_r>
 8009ca8:	3001      	adds	r0, #1
 8009caa:	f000 80a9 	beq.w	8009e00 <_vfiprintf_r+0x1f0>
 8009cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cb0:	445a      	add	r2, fp
 8009cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8009cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 80a1 	beq.w	8009e00 <_vfiprintf_r+0x1f0>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cc8:	f10a 0a01 	add.w	sl, sl, #1
 8009ccc:	9304      	str	r3, [sp, #16]
 8009cce:	9307      	str	r3, [sp, #28]
 8009cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8009cd6:	4654      	mov	r4, sl
 8009cd8:	2205      	movs	r2, #5
 8009cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cde:	4854      	ldr	r0, [pc, #336]	; (8009e30 <_vfiprintf_r+0x220>)
 8009ce0:	f7f6 fa7e 	bl	80001e0 <memchr>
 8009ce4:	9a04      	ldr	r2, [sp, #16]
 8009ce6:	b9d8      	cbnz	r0, 8009d20 <_vfiprintf_r+0x110>
 8009ce8:	06d1      	lsls	r1, r2, #27
 8009cea:	bf44      	itt	mi
 8009cec:	2320      	movmi	r3, #32
 8009cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cf2:	0713      	lsls	r3, r2, #28
 8009cf4:	bf44      	itt	mi
 8009cf6:	232b      	movmi	r3, #43	; 0x2b
 8009cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8009d00:	2b2a      	cmp	r3, #42	; 0x2a
 8009d02:	d015      	beq.n	8009d30 <_vfiprintf_r+0x120>
 8009d04:	9a07      	ldr	r2, [sp, #28]
 8009d06:	4654      	mov	r4, sl
 8009d08:	2000      	movs	r0, #0
 8009d0a:	f04f 0c0a 	mov.w	ip, #10
 8009d0e:	4621      	mov	r1, r4
 8009d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d14:	3b30      	subs	r3, #48	; 0x30
 8009d16:	2b09      	cmp	r3, #9
 8009d18:	d94d      	bls.n	8009db6 <_vfiprintf_r+0x1a6>
 8009d1a:	b1b0      	cbz	r0, 8009d4a <_vfiprintf_r+0x13a>
 8009d1c:	9207      	str	r2, [sp, #28]
 8009d1e:	e014      	b.n	8009d4a <_vfiprintf_r+0x13a>
 8009d20:	eba0 0308 	sub.w	r3, r0, r8
 8009d24:	fa09 f303 	lsl.w	r3, r9, r3
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	9304      	str	r3, [sp, #16]
 8009d2c:	46a2      	mov	sl, r4
 8009d2e:	e7d2      	b.n	8009cd6 <_vfiprintf_r+0xc6>
 8009d30:	9b03      	ldr	r3, [sp, #12]
 8009d32:	1d19      	adds	r1, r3, #4
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	9103      	str	r1, [sp, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	bfbb      	ittet	lt
 8009d3c:	425b      	neglt	r3, r3
 8009d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d42:	9307      	strge	r3, [sp, #28]
 8009d44:	9307      	strlt	r3, [sp, #28]
 8009d46:	bfb8      	it	lt
 8009d48:	9204      	strlt	r2, [sp, #16]
 8009d4a:	7823      	ldrb	r3, [r4, #0]
 8009d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8009d4e:	d10c      	bne.n	8009d6a <_vfiprintf_r+0x15a>
 8009d50:	7863      	ldrb	r3, [r4, #1]
 8009d52:	2b2a      	cmp	r3, #42	; 0x2a
 8009d54:	d134      	bne.n	8009dc0 <_vfiprintf_r+0x1b0>
 8009d56:	9b03      	ldr	r3, [sp, #12]
 8009d58:	1d1a      	adds	r2, r3, #4
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	9203      	str	r2, [sp, #12]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	bfb8      	it	lt
 8009d62:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d66:	3402      	adds	r4, #2
 8009d68:	9305      	str	r3, [sp, #20]
 8009d6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009e40 <_vfiprintf_r+0x230>
 8009d6e:	7821      	ldrb	r1, [r4, #0]
 8009d70:	2203      	movs	r2, #3
 8009d72:	4650      	mov	r0, sl
 8009d74:	f7f6 fa34 	bl	80001e0 <memchr>
 8009d78:	b138      	cbz	r0, 8009d8a <_vfiprintf_r+0x17a>
 8009d7a:	9b04      	ldr	r3, [sp, #16]
 8009d7c:	eba0 000a 	sub.w	r0, r0, sl
 8009d80:	2240      	movs	r2, #64	; 0x40
 8009d82:	4082      	lsls	r2, r0
 8009d84:	4313      	orrs	r3, r2
 8009d86:	3401      	adds	r4, #1
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d8e:	4829      	ldr	r0, [pc, #164]	; (8009e34 <_vfiprintf_r+0x224>)
 8009d90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d94:	2206      	movs	r2, #6
 8009d96:	f7f6 fa23 	bl	80001e0 <memchr>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d03f      	beq.n	8009e1e <_vfiprintf_r+0x20e>
 8009d9e:	4b26      	ldr	r3, [pc, #152]	; (8009e38 <_vfiprintf_r+0x228>)
 8009da0:	bb1b      	cbnz	r3, 8009dea <_vfiprintf_r+0x1da>
 8009da2:	9b03      	ldr	r3, [sp, #12]
 8009da4:	3307      	adds	r3, #7
 8009da6:	f023 0307 	bic.w	r3, r3, #7
 8009daa:	3308      	adds	r3, #8
 8009dac:	9303      	str	r3, [sp, #12]
 8009dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db0:	443b      	add	r3, r7
 8009db2:	9309      	str	r3, [sp, #36]	; 0x24
 8009db4:	e768      	b.n	8009c88 <_vfiprintf_r+0x78>
 8009db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dba:	460c      	mov	r4, r1
 8009dbc:	2001      	movs	r0, #1
 8009dbe:	e7a6      	b.n	8009d0e <_vfiprintf_r+0xfe>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	3401      	adds	r4, #1
 8009dc4:	9305      	str	r3, [sp, #20]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	f04f 0c0a 	mov.w	ip, #10
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dd2:	3a30      	subs	r2, #48	; 0x30
 8009dd4:	2a09      	cmp	r2, #9
 8009dd6:	d903      	bls.n	8009de0 <_vfiprintf_r+0x1d0>
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d0c6      	beq.n	8009d6a <_vfiprintf_r+0x15a>
 8009ddc:	9105      	str	r1, [sp, #20]
 8009dde:	e7c4      	b.n	8009d6a <_vfiprintf_r+0x15a>
 8009de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009de4:	4604      	mov	r4, r0
 8009de6:	2301      	movs	r3, #1
 8009de8:	e7f0      	b.n	8009dcc <_vfiprintf_r+0x1bc>
 8009dea:	ab03      	add	r3, sp, #12
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	462a      	mov	r2, r5
 8009df0:	4b12      	ldr	r3, [pc, #72]	; (8009e3c <_vfiprintf_r+0x22c>)
 8009df2:	a904      	add	r1, sp, #16
 8009df4:	4630      	mov	r0, r6
 8009df6:	f7fb fe19 	bl	8005a2c <_printf_float>
 8009dfa:	4607      	mov	r7, r0
 8009dfc:	1c78      	adds	r0, r7, #1
 8009dfe:	d1d6      	bne.n	8009dae <_vfiprintf_r+0x19e>
 8009e00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e02:	07d9      	lsls	r1, r3, #31
 8009e04:	d405      	bmi.n	8009e12 <_vfiprintf_r+0x202>
 8009e06:	89ab      	ldrh	r3, [r5, #12]
 8009e08:	059a      	lsls	r2, r3, #22
 8009e0a:	d402      	bmi.n	8009e12 <_vfiprintf_r+0x202>
 8009e0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e0e:	f7fc fdd5 	bl	80069bc <__retarget_lock_release_recursive>
 8009e12:	89ab      	ldrh	r3, [r5, #12]
 8009e14:	065b      	lsls	r3, r3, #25
 8009e16:	f53f af1d 	bmi.w	8009c54 <_vfiprintf_r+0x44>
 8009e1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e1c:	e71c      	b.n	8009c58 <_vfiprintf_r+0x48>
 8009e1e:	ab03      	add	r3, sp, #12
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	462a      	mov	r2, r5
 8009e24:	4b05      	ldr	r3, [pc, #20]	; (8009e3c <_vfiprintf_r+0x22c>)
 8009e26:	a904      	add	r1, sp, #16
 8009e28:	4630      	mov	r0, r6
 8009e2a:	f7fc f8a3 	bl	8005f74 <_printf_i>
 8009e2e:	e7e4      	b.n	8009dfa <_vfiprintf_r+0x1ea>
 8009e30:	0800b981 	.word	0x0800b981
 8009e34:	0800b98b 	.word	0x0800b98b
 8009e38:	08005a2d 	.word	0x08005a2d
 8009e3c:	08009bed 	.word	0x08009bed
 8009e40:	0800b987 	.word	0x0800b987

08009e44 <__swbuf_r>:
 8009e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e46:	460e      	mov	r6, r1
 8009e48:	4614      	mov	r4, r2
 8009e4a:	4605      	mov	r5, r0
 8009e4c:	b118      	cbz	r0, 8009e56 <__swbuf_r+0x12>
 8009e4e:	6a03      	ldr	r3, [r0, #32]
 8009e50:	b90b      	cbnz	r3, 8009e56 <__swbuf_r+0x12>
 8009e52:	f7fc fc4d 	bl	80066f0 <__sinit>
 8009e56:	69a3      	ldr	r3, [r4, #24]
 8009e58:	60a3      	str	r3, [r4, #8]
 8009e5a:	89a3      	ldrh	r3, [r4, #12]
 8009e5c:	071a      	lsls	r2, r3, #28
 8009e5e:	d525      	bpl.n	8009eac <__swbuf_r+0x68>
 8009e60:	6923      	ldr	r3, [r4, #16]
 8009e62:	b31b      	cbz	r3, 8009eac <__swbuf_r+0x68>
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	6922      	ldr	r2, [r4, #16]
 8009e68:	1a98      	subs	r0, r3, r2
 8009e6a:	6963      	ldr	r3, [r4, #20]
 8009e6c:	b2f6      	uxtb	r6, r6
 8009e6e:	4283      	cmp	r3, r0
 8009e70:	4637      	mov	r7, r6
 8009e72:	dc04      	bgt.n	8009e7e <__swbuf_r+0x3a>
 8009e74:	4621      	mov	r1, r4
 8009e76:	4628      	mov	r0, r5
 8009e78:	f7ff fa52 	bl	8009320 <_fflush_r>
 8009e7c:	b9e0      	cbnz	r0, 8009eb8 <__swbuf_r+0x74>
 8009e7e:	68a3      	ldr	r3, [r4, #8]
 8009e80:	3b01      	subs	r3, #1
 8009e82:	60a3      	str	r3, [r4, #8]
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	1c5a      	adds	r2, r3, #1
 8009e88:	6022      	str	r2, [r4, #0]
 8009e8a:	701e      	strb	r6, [r3, #0]
 8009e8c:	6962      	ldr	r2, [r4, #20]
 8009e8e:	1c43      	adds	r3, r0, #1
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d004      	beq.n	8009e9e <__swbuf_r+0x5a>
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	07db      	lsls	r3, r3, #31
 8009e98:	d506      	bpl.n	8009ea8 <__swbuf_r+0x64>
 8009e9a:	2e0a      	cmp	r6, #10
 8009e9c:	d104      	bne.n	8009ea8 <__swbuf_r+0x64>
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	f7ff fa3d 	bl	8009320 <_fflush_r>
 8009ea6:	b938      	cbnz	r0, 8009eb8 <__swbuf_r+0x74>
 8009ea8:	4638      	mov	r0, r7
 8009eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eac:	4621      	mov	r1, r4
 8009eae:	4628      	mov	r0, r5
 8009eb0:	f000 f806 	bl	8009ec0 <__swsetup_r>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d0d5      	beq.n	8009e64 <__swbuf_r+0x20>
 8009eb8:	f04f 37ff 	mov.w	r7, #4294967295
 8009ebc:	e7f4      	b.n	8009ea8 <__swbuf_r+0x64>
	...

08009ec0 <__swsetup_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4b2a      	ldr	r3, [pc, #168]	; (8009f6c <__swsetup_r+0xac>)
 8009ec4:	4605      	mov	r5, r0
 8009ec6:	6818      	ldr	r0, [r3, #0]
 8009ec8:	460c      	mov	r4, r1
 8009eca:	b118      	cbz	r0, 8009ed4 <__swsetup_r+0x14>
 8009ecc:	6a03      	ldr	r3, [r0, #32]
 8009ece:	b90b      	cbnz	r3, 8009ed4 <__swsetup_r+0x14>
 8009ed0:	f7fc fc0e 	bl	80066f0 <__sinit>
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eda:	0718      	lsls	r0, r3, #28
 8009edc:	d422      	bmi.n	8009f24 <__swsetup_r+0x64>
 8009ede:	06d9      	lsls	r1, r3, #27
 8009ee0:	d407      	bmi.n	8009ef2 <__swsetup_r+0x32>
 8009ee2:	2309      	movs	r3, #9
 8009ee4:	602b      	str	r3, [r5, #0]
 8009ee6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009eea:	81a3      	strh	r3, [r4, #12]
 8009eec:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef0:	e034      	b.n	8009f5c <__swsetup_r+0x9c>
 8009ef2:	0758      	lsls	r0, r3, #29
 8009ef4:	d512      	bpl.n	8009f1c <__swsetup_r+0x5c>
 8009ef6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ef8:	b141      	cbz	r1, 8009f0c <__swsetup_r+0x4c>
 8009efa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009efe:	4299      	cmp	r1, r3
 8009f00:	d002      	beq.n	8009f08 <__swsetup_r+0x48>
 8009f02:	4628      	mov	r0, r5
 8009f04:	f7fd fbea 	bl	80076dc <_free_r>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	6363      	str	r3, [r4, #52]	; 0x34
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f12:	81a3      	strh	r3, [r4, #12]
 8009f14:	2300      	movs	r3, #0
 8009f16:	6063      	str	r3, [r4, #4]
 8009f18:	6923      	ldr	r3, [r4, #16]
 8009f1a:	6023      	str	r3, [r4, #0]
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	f043 0308 	orr.w	r3, r3, #8
 8009f22:	81a3      	strh	r3, [r4, #12]
 8009f24:	6923      	ldr	r3, [r4, #16]
 8009f26:	b94b      	cbnz	r3, 8009f3c <__swsetup_r+0x7c>
 8009f28:	89a3      	ldrh	r3, [r4, #12]
 8009f2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f32:	d003      	beq.n	8009f3c <__swsetup_r+0x7c>
 8009f34:	4621      	mov	r1, r4
 8009f36:	4628      	mov	r0, r5
 8009f38:	f000 f884 	bl	800a044 <__smakebuf_r>
 8009f3c:	89a0      	ldrh	r0, [r4, #12]
 8009f3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f42:	f010 0301 	ands.w	r3, r0, #1
 8009f46:	d00a      	beq.n	8009f5e <__swsetup_r+0x9e>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	60a3      	str	r3, [r4, #8]
 8009f4c:	6963      	ldr	r3, [r4, #20]
 8009f4e:	425b      	negs	r3, r3
 8009f50:	61a3      	str	r3, [r4, #24]
 8009f52:	6923      	ldr	r3, [r4, #16]
 8009f54:	b943      	cbnz	r3, 8009f68 <__swsetup_r+0xa8>
 8009f56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f5a:	d1c4      	bne.n	8009ee6 <__swsetup_r+0x26>
 8009f5c:	bd38      	pop	{r3, r4, r5, pc}
 8009f5e:	0781      	lsls	r1, r0, #30
 8009f60:	bf58      	it	pl
 8009f62:	6963      	ldrpl	r3, [r4, #20]
 8009f64:	60a3      	str	r3, [r4, #8]
 8009f66:	e7f4      	b.n	8009f52 <__swsetup_r+0x92>
 8009f68:	2000      	movs	r0, #0
 8009f6a:	e7f7      	b.n	8009f5c <__swsetup_r+0x9c>
 8009f6c:	20000078 	.word	0x20000078

08009f70 <_raise_r>:
 8009f70:	291f      	cmp	r1, #31
 8009f72:	b538      	push	{r3, r4, r5, lr}
 8009f74:	4604      	mov	r4, r0
 8009f76:	460d      	mov	r5, r1
 8009f78:	d904      	bls.n	8009f84 <_raise_r+0x14>
 8009f7a:	2316      	movs	r3, #22
 8009f7c:	6003      	str	r3, [r0, #0]
 8009f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
 8009f84:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009f86:	b112      	cbz	r2, 8009f8e <_raise_r+0x1e>
 8009f88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f8c:	b94b      	cbnz	r3, 8009fa2 <_raise_r+0x32>
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 f830 	bl	8009ff4 <_getpid_r>
 8009f94:	462a      	mov	r2, r5
 8009f96:	4601      	mov	r1, r0
 8009f98:	4620      	mov	r0, r4
 8009f9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f9e:	f000 b817 	b.w	8009fd0 <_kill_r>
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d00a      	beq.n	8009fbc <_raise_r+0x4c>
 8009fa6:	1c59      	adds	r1, r3, #1
 8009fa8:	d103      	bne.n	8009fb2 <_raise_r+0x42>
 8009faa:	2316      	movs	r3, #22
 8009fac:	6003      	str	r3, [r0, #0]
 8009fae:	2001      	movs	r0, #1
 8009fb0:	e7e7      	b.n	8009f82 <_raise_r+0x12>
 8009fb2:	2400      	movs	r4, #0
 8009fb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009fb8:	4628      	mov	r0, r5
 8009fba:	4798      	blx	r3
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	e7e0      	b.n	8009f82 <_raise_r+0x12>

08009fc0 <raise>:
 8009fc0:	4b02      	ldr	r3, [pc, #8]	; (8009fcc <raise+0xc>)
 8009fc2:	4601      	mov	r1, r0
 8009fc4:	6818      	ldr	r0, [r3, #0]
 8009fc6:	f7ff bfd3 	b.w	8009f70 <_raise_r>
 8009fca:	bf00      	nop
 8009fcc:	20000078 	.word	0x20000078

08009fd0 <_kill_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4d07      	ldr	r5, [pc, #28]	; (8009ff0 <_kill_r+0x20>)
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	4608      	mov	r0, r1
 8009fda:	4611      	mov	r1, r2
 8009fdc:	602b      	str	r3, [r5, #0]
 8009fde:	f7f8 fc49 	bl	8002874 <_kill>
 8009fe2:	1c43      	adds	r3, r0, #1
 8009fe4:	d102      	bne.n	8009fec <_kill_r+0x1c>
 8009fe6:	682b      	ldr	r3, [r5, #0]
 8009fe8:	b103      	cbz	r3, 8009fec <_kill_r+0x1c>
 8009fea:	6023      	str	r3, [r4, #0]
 8009fec:	bd38      	pop	{r3, r4, r5, pc}
 8009fee:	bf00      	nop
 8009ff0:	20000bc4 	.word	0x20000bc4

08009ff4 <_getpid_r>:
 8009ff4:	f7f8 bc36 	b.w	8002864 <_getpid>

08009ff8 <__swhatbuf_r>:
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a000:	2900      	cmp	r1, #0
 800a002:	b096      	sub	sp, #88	; 0x58
 800a004:	4615      	mov	r5, r2
 800a006:	461e      	mov	r6, r3
 800a008:	da0d      	bge.n	800a026 <__swhatbuf_r+0x2e>
 800a00a:	89a3      	ldrh	r3, [r4, #12]
 800a00c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a010:	f04f 0100 	mov.w	r1, #0
 800a014:	bf0c      	ite	eq
 800a016:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a01a:	2340      	movne	r3, #64	; 0x40
 800a01c:	2000      	movs	r0, #0
 800a01e:	6031      	str	r1, [r6, #0]
 800a020:	602b      	str	r3, [r5, #0]
 800a022:	b016      	add	sp, #88	; 0x58
 800a024:	bd70      	pop	{r4, r5, r6, pc}
 800a026:	466a      	mov	r2, sp
 800a028:	f000 f848 	bl	800a0bc <_fstat_r>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	dbec      	blt.n	800a00a <__swhatbuf_r+0x12>
 800a030:	9901      	ldr	r1, [sp, #4]
 800a032:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a036:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a03a:	4259      	negs	r1, r3
 800a03c:	4159      	adcs	r1, r3
 800a03e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a042:	e7eb      	b.n	800a01c <__swhatbuf_r+0x24>

0800a044 <__smakebuf_r>:
 800a044:	898b      	ldrh	r3, [r1, #12]
 800a046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a048:	079d      	lsls	r5, r3, #30
 800a04a:	4606      	mov	r6, r0
 800a04c:	460c      	mov	r4, r1
 800a04e:	d507      	bpl.n	800a060 <__smakebuf_r+0x1c>
 800a050:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a054:	6023      	str	r3, [r4, #0]
 800a056:	6123      	str	r3, [r4, #16]
 800a058:	2301      	movs	r3, #1
 800a05a:	6163      	str	r3, [r4, #20]
 800a05c:	b002      	add	sp, #8
 800a05e:	bd70      	pop	{r4, r5, r6, pc}
 800a060:	ab01      	add	r3, sp, #4
 800a062:	466a      	mov	r2, sp
 800a064:	f7ff ffc8 	bl	8009ff8 <__swhatbuf_r>
 800a068:	9900      	ldr	r1, [sp, #0]
 800a06a:	4605      	mov	r5, r0
 800a06c:	4630      	mov	r0, r6
 800a06e:	f7fd fba9 	bl	80077c4 <_malloc_r>
 800a072:	b948      	cbnz	r0, 800a088 <__smakebuf_r+0x44>
 800a074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a078:	059a      	lsls	r2, r3, #22
 800a07a:	d4ef      	bmi.n	800a05c <__smakebuf_r+0x18>
 800a07c:	f023 0303 	bic.w	r3, r3, #3
 800a080:	f043 0302 	orr.w	r3, r3, #2
 800a084:	81a3      	strh	r3, [r4, #12]
 800a086:	e7e3      	b.n	800a050 <__smakebuf_r+0xc>
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	6020      	str	r0, [r4, #0]
 800a08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a090:	81a3      	strh	r3, [r4, #12]
 800a092:	9b00      	ldr	r3, [sp, #0]
 800a094:	6163      	str	r3, [r4, #20]
 800a096:	9b01      	ldr	r3, [sp, #4]
 800a098:	6120      	str	r0, [r4, #16]
 800a09a:	b15b      	cbz	r3, 800a0b4 <__smakebuf_r+0x70>
 800a09c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f000 f81d 	bl	800a0e0 <_isatty_r>
 800a0a6:	b128      	cbz	r0, 800a0b4 <__smakebuf_r+0x70>
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	f023 0303 	bic.w	r3, r3, #3
 800a0ae:	f043 0301 	orr.w	r3, r3, #1
 800a0b2:	81a3      	strh	r3, [r4, #12]
 800a0b4:	89a3      	ldrh	r3, [r4, #12]
 800a0b6:	431d      	orrs	r5, r3
 800a0b8:	81a5      	strh	r5, [r4, #12]
 800a0ba:	e7cf      	b.n	800a05c <__smakebuf_r+0x18>

0800a0bc <_fstat_r>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	4d07      	ldr	r5, [pc, #28]	; (800a0dc <_fstat_r+0x20>)
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	4608      	mov	r0, r1
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	602b      	str	r3, [r5, #0]
 800a0ca:	f7f8 fc32 	bl	8002932 <_fstat>
 800a0ce:	1c43      	adds	r3, r0, #1
 800a0d0:	d102      	bne.n	800a0d8 <_fstat_r+0x1c>
 800a0d2:	682b      	ldr	r3, [r5, #0]
 800a0d4:	b103      	cbz	r3, 800a0d8 <_fstat_r+0x1c>
 800a0d6:	6023      	str	r3, [r4, #0]
 800a0d8:	bd38      	pop	{r3, r4, r5, pc}
 800a0da:	bf00      	nop
 800a0dc:	20000bc4 	.word	0x20000bc4

0800a0e0 <_isatty_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4d06      	ldr	r5, [pc, #24]	; (800a0fc <_isatty_r+0x1c>)
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	4608      	mov	r0, r1
 800a0ea:	602b      	str	r3, [r5, #0]
 800a0ec:	f7f8 fc31 	bl	8002952 <_isatty>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_isatty_r+0x1a>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_isatty_r+0x1a>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	20000bc4 	.word	0x20000bc4

0800a100 <_init>:
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	bf00      	nop
 800a104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a106:	bc08      	pop	{r3}
 800a108:	469e      	mov	lr, r3
 800a10a:	4770      	bx	lr

0800a10c <_fini>:
 800a10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10e:	bf00      	nop
 800a110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a112:	bc08      	pop	{r3}
 800a114:	469e      	mov	lr, r3
 800a116:	4770      	bx	lr
